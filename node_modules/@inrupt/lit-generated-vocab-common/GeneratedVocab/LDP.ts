import { LitVocabTerm, getLocalStore } from "@inrupt/lit-vocab-term";
import dataFactory from "@rdfjs/data-model";

const { namedNode } = dataFactory;
import { NamedNode } from "rdf-js";

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */

function _NS(localName: string): NamedNode { 
  return namedNode(`http://www.w3.org/ns/ldp#${localName}`);
}

const LDP = {
  PREFIX: "ldp",
  NAMESPACE: "http://www.w3.org/ns/ldp#",
  PREFIX_AND_NAMESPACE: { "ldp": "http://www.w3.org/ns/ldp#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
   */
  Resource: new LitVocabTerm(
    _NS("Resource"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Resource`)
    .addCommentNoLanguage(`A HTTP-addressable resource whose lifecycle is managed by a LDP server.`),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
   */
  RDFSource: new LitVocabTerm(
    _NS("RDFSource"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`RDFSource`)
    .addCommentNoLanguage(`A Linked Data Platform Resource (LDPR) whose state is represented as RDF.`),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
   */
  NonRDFSource: new LitVocabTerm(
    _NS("NonRDFSource"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`NonRDFSource`)
    .addCommentNoLanguage(`A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.`),

  /**
   * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
   */
  Container: new LitVocabTerm(
    _NS("Container"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Container`)
    .addCommentNoLanguage(`A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.`),

  /**
   * An LDPC that uses a predefined predicate to simply link to its contained resources.
   */
  BasicContainer: new LitVocabTerm(
    _NS("BasicContainer"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`BasicContainer`)
    .addCommentNoLanguage(`An LDPC that uses a predefined predicate to simply link to its contained resources.`),

  /**
   * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
   */
  DirectContainer: new LitVocabTerm(
    _NS("DirectContainer"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`DirectContainer`)
    .addCommentNoLanguage(`An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.`),

  /**
   * An LDPC that has the flexibility of choosing what form the membership triples take.
   */
  IndirectContainer: new LitVocabTerm(
    _NS("IndirectContainer"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`IndirectContainer`)
    .addCommentNoLanguage(`An LDPC that has the flexibility of choosing what form the membership triples take.`),

  /**
   * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
   */
  Page: new LitVocabTerm(
    _NS("Page"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Page`)
    .addCommentNoLanguage(`URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.`),

  /**
   * Element in the list of sorting criteria used by the server to assign container members to pages.
   */
  PageSortCriterion: new LitVocabTerm(
    _NS("PageSortCriterion"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`PageSortCriterion`)
    .addCommentNoLanguage(`Element in the list of sorting criteria used by the server to assign container members to pages.`),

  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
   */
  hasMemberRelation: new LitVocabTerm(
    _NS("hasMemberRelation"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`hasMemberRelation`)
    .addCommentNoLanguage(`Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.`),

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
   */
  isMemberOfRelation: new LitVocabTerm(
    _NS("isMemberOfRelation"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`isMemmberOfRelation`)
    .addCommentNoLanguage(`Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.`),

  /**
   * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
   */
  membershipResource: new LitVocabTerm(
    _NS("membershipResource"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`membershipResource`)
    .addCommentNoLanguage(`Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.`),

  /**
   * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
   */
  insertedContentRelation: new LitVocabTerm(
    _NS("insertedContentRelation"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`insertedContentRelation`)
    .addCommentNoLanguage(`Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.`),

  /**
   * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
   */
  member: new LitVocabTerm(
    _NS("member"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`member`)
    .addCommentNoLanguage(`LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.`),

  /**
   * Links a container with resources created through the container.
   */
  contains: new LitVocabTerm(
    _NS("contains"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`contains`)
    .addCommentNoLanguage(`Links a container with resources created through the container.`),

  /**
   * Links a resource with constraints that the server requires requests like creation and update to conform to.
   */
  constrainedBy: new LitVocabTerm(
    _NS("constrainedBy"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`constrainedBy`)
    .addCommentNoLanguage(`Links a resource with constraints that the server requires requests like creation and update to conform to.`),

  /**
   * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
   */
  pageSortCriteria: new LitVocabTerm(
    _NS("pageSortCriteria"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`pageSortCriteria`)
    .addCommentNoLanguage(`Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.`),

  /**
   * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
   */
  pageSortPredicate: new LitVocabTerm(
    _NS("pageSortPredicate"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`pageSortPredicate`)
    .addCommentNoLanguage(`Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.`),

  /**
   * The ascending/descending/etc order used to order the members across pages in a page sequence.
   */
  pageSortOrder: new LitVocabTerm(
    _NS("pageSortOrder"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`pageSortOrder`)
    .addCommentNoLanguage(`The ascending/descending/etc order used to order the members across pages in a page sequence.`),

  /**
   * The collation used to order the members across pages in a page sequence when comparing strings.
   */
  pageSortCollation: new LitVocabTerm(
    _NS("pageSortCollation"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`pageSortCollation`)
    .addCommentNoLanguage(`The collation used to order the members across pages in a page sequence when comparing strings.`),

  /**
   * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
   */
  pageSequence: new LitVocabTerm(
    _NS("pageSequence"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Page`)
    .addCommentNoLanguage(`Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.`),

  /**
   * Links a resource to a container where notifications for the resource can be created and discovered.
   */
  inbox: new LitVocabTerm(
    _NS("inbox"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`inbox`)
    .addCommentNoLanguage(`Links a resource to a container where notifications for the resource can be created and discovered.`),

};

export { LDP };
