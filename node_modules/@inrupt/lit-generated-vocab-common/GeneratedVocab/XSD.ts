import { LitVocabTerm, getLocalStore } from "@inrupt/lit-vocab-term";
import dataFactory from "@rdfjs/data-model";

const { namedNode } = dataFactory;
import { NamedNode } from "rdf-js";

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  A vocabulary for describing XML Schema datatypes.
 */

function _NS(localName: string): NamedNode { 
  return namedNode(`http://www.w3.org/2001/XMLSchema#${localName}`);
}

const XSD = {
  PREFIX: "xsd",
  NAMESPACE: "http://www.w3.org/2001/XMLSchema#",
  PREFIX_AND_NAMESPACE: { "xsd": "http://www.w3.org/2001/XMLSchema#" },
  NS: _NS,


  // *******************
  // All the Properties.
  // *******************

  /**
   * .
   */
  changes: new LitVocabTerm(
    _NS("changes"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Changes`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  string: new LitVocabTerm(
    _NS("string"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`String`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  boolean_: new LitVocabTerm(
    _NS("boolean"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Boolean`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  float_: new LitVocabTerm(
    _NS("float"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Float`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  double_: new LitVocabTerm(
    _NS("double"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Double`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  decimal: new LitVocabTerm(
    _NS("decimal"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Decimal`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  dateTime: new LitVocabTerm(
    _NS("dateTime"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Date and time`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  duration: new LitVocabTerm(
    _NS("duration"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Duration`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  hexBinary: new LitVocabTerm(
    _NS("hexBinary"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Hexadecimal binary`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  base64Binary: new LitVocabTerm(
    _NS("base64Binary"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Base64 binary`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  anyURI: new LitVocabTerm(
    _NS("anyURI"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`URI`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  ID: new LitVocabTerm(
    _NS("ID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`ID`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  IDREF: new LitVocabTerm(
    _NS("IDREF"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`ID reference`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  ENTITY: new LitVocabTerm(
    _NS("ENTITY"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`ENTITY`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  NOTATION: new LitVocabTerm(
    _NS("NOTATION"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`NOTATION`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  normalizedString: new LitVocabTerm(
    _NS("normalizedString"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Normalized string`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  token: new LitVocabTerm(
    _NS("token"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Token`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  language: new LitVocabTerm(
    _NS("language"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Language`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  IDREFS: new LitVocabTerm(
    _NS("IDREFS"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`IDREFS`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  ENTITIES: new LitVocabTerm(
    _NS("ENTITIES"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`ENTITIES`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  NMTOKEN: new LitVocabTerm(
    _NS("NMTOKEN"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`NMTOKEN`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  NMTOKENS: new LitVocabTerm(
    _NS("NMTOKENS"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`NMTOKENS`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  Name: new LitVocabTerm(
    _NS("Name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Name`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  QName: new LitVocabTerm(
    _NS("QName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`QName`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  NCName: new LitVocabTerm(
    _NS("NCName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`NCName`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  integer: new LitVocabTerm(
    _NS("integer"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Integer`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  nonNegativeInteger: new LitVocabTerm(
    _NS("nonNegativeInteger"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Non-negative integer`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  positiveInteger: new LitVocabTerm(
    _NS("positiveInteger"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Positive integer`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  nonPositiveInteger: new LitVocabTerm(
    _NS("nonPositiveInteger"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Non-positive integer`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  negativeInteger: new LitVocabTerm(
    _NS("negativeInteger"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Negative integer`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  byte_: new LitVocabTerm(
    _NS("byte"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Byte`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  int_: new LitVocabTerm(
    _NS("int"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Int`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  long_: new LitVocabTerm(
    _NS("long"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Long`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  short_: new LitVocabTerm(
    _NS("short"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Short`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  unsignedByte: new LitVocabTerm(
    _NS("unsignedByte"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Unsigned byte`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  unsignedInt: new LitVocabTerm(
    _NS("unsignedInt"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Unsigned int`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  unsignedLong: new LitVocabTerm(
    _NS("unsignedLong"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Unsigned long`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  unsignedShort: new LitVocabTerm(
    _NS("unsignedShort"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Unsigned short`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  date: new LitVocabTerm(
    _NS("date"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Date`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  time: new LitVocabTerm(
    _NS("time"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Time`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  gYearMonth: new LitVocabTerm(
    _NS("gYearMonth"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Year month`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  gYear: new LitVocabTerm(
    _NS("gYear"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Year`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  gMonthDay: new LitVocabTerm(
    _NS("gMonthDay"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Month day`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  gDay: new LitVocabTerm(
    _NS("gDay"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Day`, "en")
    .addComment(`.`, "en"),

  /**
   * .
   */
  gMonth: new LitVocabTerm(
    _NS("gMonth"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Month`, "en")
    .addComment(`.`, "en"),

};

export { XSD };
