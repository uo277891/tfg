import { LitVocabTerm, getLocalStore } from "@inrupt/lit-vocab-term";
import dataFactory from "@rdfjs/data-model";

const { namedNode } = dataFactory;
import { NamedNode } from "rdf-js";

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */

function _NS(localName: string): NamedNode { 
  return namedNode(`http://www.w3.org/2006/vcard/ns#${localName}`);
}

const VCARD = {
  PREFIX: "vcard",
  NAMESPACE: "http://www.w3.org/2006/vcard/ns#",
  PREFIX_AND_NAMESPACE: { "vcard": "http://www.w3.org/2006/vcard/ns#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * Acquaintance
   */
  Acquaintance: new LitVocabTerm(
    _NS("Acquaintance"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Acquaintance`, "en"),

  /**
   * Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.
   */
  RelatedType: new LitVocabTerm(
    _NS("RelatedType"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Relation Type`, "en")
    .addComment(`Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.`, "en"),

  /**
   * Agent
   */
  Agent: new LitVocabTerm(
    _NS("Agent"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Agent`, "en"),

  /**
   * This class is deprecated
   */
  BBS: new LitVocabTerm(
    _NS("BBS"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`BBS`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.
   */
  TelephoneType: new LitVocabTerm(
    _NS("TelephoneType"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Phone`, "en")
    .addComment(`Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.`, "en"),

  /**
   * This class is deprecated
   */
  Car: new LitVocabTerm(
    _NS("Car"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Car`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Also called mobile telephone
   */
  Cell: new LitVocabTerm(
    _NS("Cell"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Cell`, "en")
    .addComment(`Also called mobile telephone`, "en"),

  /**
   * Child
   */
  Child: new LitVocabTerm(
    _NS("Child"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Child`, "en"),

  /**
   * Colleague
   */
  Colleague: new LitVocabTerm(
    _NS("Colleague"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Colleague`, "en"),

  /**
   * Contact
   */
  Contact: new LitVocabTerm(
    _NS("Contact"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Contact`, "en"),

  /**
   * Coresident
   */
  Coresident: new LitVocabTerm(
    _NS("Coresident"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Coresident`, "en"),

  /**
   * Coworker
   */
  Coworker: new LitVocabTerm(
    _NS("Coworker"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Coworker`, "en"),

  /**
   * Crush
   */
  Crush: new LitVocabTerm(
    _NS("Crush"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Crush`, "en"),

  /**
   * Date
   */
  Date: new LitVocabTerm(
    _NS("Date"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Date`, "en"),

  /**
   * This class is deprecated
   */
  Dom: new LitVocabTerm(
    _NS("Dom"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Dom`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Used for type codes. The URI of the type code must be used as the value for Type.
   */
  Type: new LitVocabTerm(
    _NS("Type"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Type`, "en")
    .addComment(`Used for type codes. The URI of the type code must be used as the value for Type.`, "en"),

  /**
   * Emergency
   */
  Emergency: new LitVocabTerm(
    _NS("Emergency"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Emergency`, "en"),

  /**
   * Fax
   */
  Fax: new LitVocabTerm(
    _NS("Fax"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Fax`, "en"),

  /**
   * Female
   */
  Female: new LitVocabTerm(
    _NS("Female"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Female`, "en"),

  /**
   * Used for gender codes. The URI of the gender code must be used as the value for Gender.
   */
  Gender: new LitVocabTerm(
    _NS("Gender"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Gender`, "en")
    .addComment(`Used for gender codes. The URI of the gender code must be used as the value for Gender.`, "en"),

  /**
   * Friend
   */
  Friend: new LitVocabTerm(
    _NS("Friend"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Friend`, "en"),

  /**
   * This implies that the property is related to an individual's personal life
   */
  Home: new LitVocabTerm(
    _NS("Home"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Home`, "en")
    .addComment(`This implies that the property is related to an individual's personal life`, "en"),

  /**
   * This class is deprecated
   */
  ISDN: new LitVocabTerm(
    _NS("ISDN"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`ISDN`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * This class is deprecated
   */
  Internet: new LitVocabTerm(
    _NS("Internet"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Internet`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * This class is deprecated
   */
  Intl: new LitVocabTerm(
    _NS("Intl"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Intl`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Kin
   */
  Kin: new LitVocabTerm(
    _NS("Kin"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Kin`, "en"),

  /**
   * This class is deprecated
   */
  Label: new LitVocabTerm(
    _NS("Label"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Label`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Male
   */
  Male: new LitVocabTerm(
    _NS("Male"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Male`, "en"),

  /**
   * Me
   */
  Me: new LitVocabTerm(
    _NS("Me"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Me`, "en"),

  /**
   * Met
   */
  Met: new LitVocabTerm(
    _NS("Met"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Met`, "en"),

  /**
   * This class is deprecated
   */
  Modem: new LitVocabTerm(
    _NS("Modem"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Modem`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * This class is deprecated
   */
  Msg: new LitVocabTerm(
    _NS("Msg"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Msg`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Muse
   */
  Muse: new LitVocabTerm(
    _NS("Muse"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Muse`, "en"),

  /**
   * Neighbor
   */
  Neighbor: new LitVocabTerm(
    _NS("Neighbor"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Neighbor`, "en"),

  /**
   * None
   */
  None: new LitVocabTerm(
    _NS("None"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`None`, "en"),

  /**
   * Other
   */
  Other: new LitVocabTerm(
    _NS("Other"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Other`, "en"),

  /**
   * This class is deprecated
   */
  PCS: new LitVocabTerm(
    _NS("PCS"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`PCS`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Pager
   */
  Pager: new LitVocabTerm(
    _NS("Pager"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Pager`, "en"),

  /**
   * This class is deprecated
   */
  Parcel: new LitVocabTerm(
    _NS("Parcel"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Parcel`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Parent
   */
  Parent: new LitVocabTerm(
    _NS("Parent"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Parent`, "en"),

  /**
   * This class is deprecated
   */
  Postal: new LitVocabTerm(
    _NS("Postal"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Postal`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * This class is deprecated
   */
  Pref: new LitVocabTerm(
    _NS("Pref"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Pref`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * Sibling
   */
  Sibling: new LitVocabTerm(
    _NS("Sibling"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Sibling`, "en"),

  /**
   * Spouse
   */
  Spouse: new LitVocabTerm(
    _NS("Spouse"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Spouse`, "en"),

  /**
   * Sweetheart
   */
  Sweetheart: new LitVocabTerm(
    _NS("Sweetheart"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Sweetheart`, "en"),

  /**
   * This class is deprecated. Use the hasTelephone object property.
   */
  Tel: new LitVocabTerm(
    _NS("Tel"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Tel`, "en")
    .addComment(`This class is deprecated. Use the hasTelephone object property.`, "en"),

  /**
   * Also called sms telephone
   */
  Text: new LitVocabTerm(
    _NS("Text"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Text`, "en")
    .addComment(`Also called sms telephone`, "en"),

  /**
   * Text phone
   */
  TextPhone: new LitVocabTerm(
    _NS("TextPhone"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Text phone`, "en"),

  /**
   * Unknown
   */
  Unknown: new LitVocabTerm(
    _NS("Unknown"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Unknown`, "en"),

  /**
   * Video
   */
  Video: new LitVocabTerm(
    _NS("Video"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Video`, "en"),

  /**
   * Voice
   */
  Voice: new LitVocabTerm(
    _NS("Voice"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Voice`, "en"),

  /**
   * This implies that the property is related to an individual's work place
   */
  Work: new LitVocabTerm(
    _NS("Work"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Work`, "en")
    .addComment(`This implies that the property is related to an individual's work place`, "en"),

  /**
   * This class is deprecated
   */
  X400: new LitVocabTerm(
    _NS("X400"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`X400`, "en")
    .addComment(`This class is deprecated`, "en"),

  /**
   * To specify the components of the delivery address for the  object
   */
  Address: new LitVocabTerm(
    _NS("Address"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Address`, "en")
    .addComment(`To specify the components of the delivery address for the  object`, "en"),

  /**
   * To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.
   */
  Email: new LitVocabTerm(
    _NS("Email"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Email`, "en")
    .addComment(`To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.`, "en"),

  /**
   * Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.
   */
  Group: new LitVocabTerm(
    _NS("Group"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Group`, "en")
    .addComment(`Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.`, "en"),

  /**
   * The parent class for all objects
   */
  Kind: new LitVocabTerm(
    _NS("Kind"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Kind`, "en")
    .addComment(`The parent class for all objects`, "en"),

  /**
   * An object representing a single person or entity
   */
  Individual: new LitVocabTerm(
    _NS("Individual"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Individual`, "en")
    .addComment(`An object representing a single person or entity`, "en"),

  /**
   * An object representing a named geographical place
   */
  Location: new LitVocabTerm(
    _NS("Location"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Location`, "en")
    .addComment(`An object representing a named geographical place`, "en"),

  /**
   * An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.

   */
  Organization: new LitVocabTerm(
    _NS("Organization"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Organization`, "en")
    .addComment(`An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.
`, "en"),

  /**
   * To specify the components of the name of the object
   */
  Name: new LitVocabTerm(
    _NS("Name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Name`, "en")
    .addComment(`To specify the components of the name of the object`, "en"),

  /**
   * The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)
   */
  VCard: new LitVocabTerm(
    _NS("VCard"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`VCard`, "en")
    .addComment(`The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)`, "en"),

  // *******************
  // All the Properties.
  // *******************

  /**
   * This object property has been mapped
   */
  adr: new LitVocabTerm(
    _NS("adr"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`address`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify the components of the delivery address for the object
   */
  hasAddress: new LitVocabTerm(
    _NS("hasAddress"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has address`, "en")
    .addComment(`To specify the components of the delivery address for the object`, "en"),

  /**
   * This object property has been deprecated
   */
  agent: new LitVocabTerm(
    _NS("agent"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`agent`, "en")
    .addComment(`This object property has been deprecated`, "en"),

  /**
   * The date of marriage, or equivalent, of the object
   */
  anniversary: new LitVocabTerm(
    _NS("anniversary"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`anniversary`, "en")
    .addComment(`The date of marriage, or equivalent, of the object`, "en"),

  /**
   * To specify the birth date of the object
   */
  bday: new LitVocabTerm(
    _NS("bday"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`birth date`, "en")
    .addComment(`To specify the birth date of the object`, "en"),

  /**
   * The category information about the object, also known as tags
   */
  category: new LitVocabTerm(
    _NS("category"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`category`, "en")
    .addComment(`The category information about the object, also known as tags`, "en"),

  /**
   * This data property has been deprecated
   */
  class_: new LitVocabTerm(
    _NS("class"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`class`, "en")
    .addComment(`This data property has been deprecated`, "en"),

  /**
   * This object property has been mapped
   */
  email: new LitVocabTerm(
    _NS("email"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`email`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify the electronic mail address for communication with the object
   */
  hasEmail: new LitVocabTerm(
    _NS("hasEmail"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has email`, "en")
    .addComment(`To specify the electronic mail address for communication with the object`, "en"),

  /**
   * This data property has been deprecated
   */
  extended_address: new LitVocabTerm(
    _NS("extended-address"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`extended address`, "en")
    .addComment(`This data property has been deprecated`, "en"),

  /**
   * This object property has been mapped
   */
  geo: new LitVocabTerm(
    _NS("geo"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`geo`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify information related to the global positioning of the object. May also be used as a property parameter.
   */
  hasGeo: new LitVocabTerm(
    _NS("hasGeo"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has geo`, "en")
    .addComment(`To specify information related to the global positioning of the object. May also be used as a property parameter.`, "en"),

  /**
   * Used to support property parameters for the additional name data property
   */
  hasAdditionalName: new LitVocabTerm(
    _NS("hasAdditionalName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has additional name`, "en")
    .addComment(`Used to support property parameters for the additional name data property`, "en"),

  /**
   * To specify the busy time associated with the object. (Was called FBURL in RFC6350)
   */
  hasCalendarBusy: new LitVocabTerm(
    _NS("hasCalendarBusy"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has calendar busy`, "en")
    .addComment(`To specify the busy time associated with the object. (Was called FBURL in RFC6350)`, "en"),

  /**
   * To specify the calendar associated with the object. (Was called CALURI in RFC6350)
   */
  hasCalendarLink: new LitVocabTerm(
    _NS("hasCalendarLink"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has calendar link`, "en")
    .addComment(`To specify the calendar associated with the object. (Was called CALURI in RFC6350)`, "en"),

  /**
   * To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)
   */
  hasCalendarRequest: new LitVocabTerm(
    _NS("hasCalendarRequest"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has calendar request`, "en")
    .addComment(`To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)`, "en"),

  /**
   * Used to support property parameters for the category data property
   */
  hasCategory: new LitVocabTerm(
    _NS("hasCategory"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has category`, "en")
    .addComment(`Used to support property parameters for the category data property`, "en"),

  /**
   * Used to support property parameters for the country name data property
   */
  hasCountryName: new LitVocabTerm(
    _NS("hasCountryName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has country name`, "en")
    .addComment(`Used to support property parameters for the country name data property`, "en"),

  /**
   * Used to support property parameters for the formatted name data property
   */
  hasFN: new LitVocabTerm(
    _NS("hasFN"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has formatted name`, "en")
    .addComment(`Used to support property parameters for the formatted name data property`, "en"),

  /**
   * Used to support property parameters for the family name data property
   */
  hasFamilyName: new LitVocabTerm(
    _NS("hasFamilyName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has family name`, "en")
    .addComment(`Used to support property parameters for the family name data property`, "en"),

  /**
   * To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.
   */
  hasGender: new LitVocabTerm(
    _NS("hasGender"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has gender`, "en")
    .addComment(`To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.`, "en"),

  /**
   * Used to support property parameters for the given name data property
   */
  hasGivenName: new LitVocabTerm(
    _NS("hasGivenName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has given name`, "en")
    .addComment(`Used to support property parameters for the given name data property`, "en"),

  /**
   * Used to support property parameters for the honorific prefix data property
   */
  hasHonorificPrefix: new LitVocabTerm(
    _NS("hasHonorificPrefix"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has honorific prefix`, "en")
    .addComment(`Used to support property parameters for the honorific prefix data property`, "en"),

  /**
   * Used to support property parameters for the honorific suffix data property
   */
  hasHonorificSuffix: new LitVocabTerm(
    _NS("hasHonorificSuffix"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has honorific suffix`, "en")
    .addComment(`Used to support property parameters for the honorific suffix data property`, "en"),

  /**
   * To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)
   */
  hasInstantMessage: new LitVocabTerm(
    _NS("hasInstantMessage"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has messaging`, "en")
    .addComment(`To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)`, "en"),

  /**
   * Used to support property parameters for the language data property
   */
  hasLanguage: new LitVocabTerm(
    _NS("hasLanguage"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has language`, "en")
    .addComment(`Used to support property parameters for the language data property`, "en"),

  /**
   * Used to support property parameters for the locality data property
   */
  hasLocality: new LitVocabTerm(
    _NS("hasLocality"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has locality`, "en")
    .addComment(`Used to support property parameters for the locality data property`, "en"),

  /**
   * Used to support property parameters for the nickname data property
   */
  hasNickname: new LitVocabTerm(
    _NS("hasNickname"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has nickname`, "en")
    .addComment(`Used to support property parameters for the nickname data property`, "en"),

  /**
   * The nick name associated with the object
   */
  nickname: new LitVocabTerm(
    _NS("nickname"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`nickname`, "en")
    .addComment(`The nick name associated with the object`, "en"),

  /**
   * Used to support property parameters for the note data property
   */
  hasNote: new LitVocabTerm(
    _NS("hasNote"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has note`, "en")
    .addComment(`Used to support property parameters for the note data property`, "en"),

  /**
   * Used to support property parameters for the organization name data property
   */
  hasOrganizationName: new LitVocabTerm(
    _NS("hasOrganizationName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has organization name`, "en")
    .addComment(`Used to support property parameters for the organization name data property`, "en"),

  /**
   * Used to support property parameters for the organization unit name data property
   */
  hasOrganizationUnit: new LitVocabTerm(
    _NS("hasOrganizationUnit"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has organization unit name`, "en")
    .addComment(`Used to support property parameters for the organization unit name data property`, "en"),

  /**
   * Used to support property parameters for the postal code data property
   */
  hasPostalCode: new LitVocabTerm(
    _NS("hasPostalCode"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has postal code`, "en")
    .addComment(`Used to support property parameters for the postal code data property`, "en"),

  /**
   * Used to support property parameters for the region data property
   */
  hasRegion: new LitVocabTerm(
    _NS("hasRegion"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has region`, "en")
    .addComment(`Used to support property parameters for the region data property`, "en"),

  /**
   * To specify a relationship between another entity and the entity represented by this object
   */
  hasRelated: new LitVocabTerm(
    _NS("hasRelated"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has related`, "en")
    .addComment(`To specify a relationship between another entity and the entity represented by this object`, "en"),

  /**
   * Used to support property parameters for the role data property
   */
  hasRole: new LitVocabTerm(
    _NS("hasRole"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has role`, "en")
    .addComment(`Used to support property parameters for the role data property`, "en"),

  /**
   * To identify the source of directory information of the object
   */
  hasSource: new LitVocabTerm(
    _NS("hasSource"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has source`, "en")
    .addComment(`To identify the source of directory information of the object`, "en"),

  /**
   * Used to support property parameters for the street address data property
   */
  hasStreetAddress: new LitVocabTerm(
    _NS("hasStreetAddress"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has street address`, "en")
    .addComment(`Used to support property parameters for the street address data property`, "en"),

  /**
   * Used to support property parameters for the title data property
   */
  hasTitle: new LitVocabTerm(
    _NS("hasTitle"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has title`, "en")
    .addComment(`Used to support property parameters for the title data property`, "en"),

  /**
   * To specify a value that represents a globally unique identifier corresponding to the object
   */
  hasUID: new LitVocabTerm(
    _NS("hasUID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has uid`, "en")
    .addComment(`To specify a value that represents a globally unique identifier corresponding to the object`, "en"),

  /**
   * Used to indicate the resource value of an object property that requires property parameters
   */
  hasValue: new LitVocabTerm(
    _NS("hasValue"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has value`, "en")
    .addComment(`Used to indicate the resource value of an object property that requires property parameters`, "en"),

  /**
   * This data property has been deprecated
   */
  label: new LitVocabTerm(
    _NS("label"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`label`, "en")
    .addComment(`This data property has been deprecated`, "en"),

  /**
   * To specify the language that may be used for contacting the object. May also be used as a property parameter.
   */
  language: new LitVocabTerm(
    _NS("language"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`language`, "en")
    .addComment(`To specify the language that may be used for contacting the object. May also be used as a property parameter.`, "en"),

  /**
   * This data property has been deprecated. See hasGeo
   */
  latitude: new LitVocabTerm(
    _NS("latitude"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`latitude`, "en")
    .addComment(`This data property has been deprecated. See hasGeo`, "en"),

  /**
   * This data property has been deprecated. See hasGeo
   */
  longitude: new LitVocabTerm(
    _NS("longitude"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`longitude`, "en")
    .addComment(`This data property has been deprecated. See hasGeo`, "en"),

  /**
   * This data property has been deprecated
   */
  mailer: new LitVocabTerm(
    _NS("mailer"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`mailer`, "en")
    .addComment(`This data property has been deprecated`, "en"),

  /**
   * A note associated with the object
   */
  note: new LitVocabTerm(
    _NS("note"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`note`, "en")
    .addComment(`A note associated with the object`, "en"),

  /**
   * This object property has been mapped. Use the organization-name data property.
   */
  org: new LitVocabTerm(
    _NS("org"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`organization`, "en")
    .addComment(`This object property has been mapped. Use the organization-name data property.`, "en"),

  /**
   * To specify the organizational name associated with the object
   */
  organization_name: new LitVocabTerm(
    _NS("organization-name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`organization name`, "en")
    .addComment(`To specify the organizational name associated with the object`, "en"),

  /**
   * To specify the organizational unit name associated with the object
   */
  organization_unit: new LitVocabTerm(
    _NS("organization-unit"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`organizational unit name`, "en")
    .addComment(`To specify the organizational unit name associated with the object`, "en"),

  /**
   * This data property has been deprecated
   */
  post_office_box: new LitVocabTerm(
    _NS("post-office-box"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`post office box`, "en")
    .addComment(`This data property has been deprecated`, "en"),

  /**
   * To specify the identifier for the product that created the object
   */
  prodid: new LitVocabTerm(
    _NS("prodid"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`product id`, "en")
    .addComment(`To specify the identifier for the product that created the object`, "en"),

  /**
   * To specify revision information about the object
   */
  rev: new LitVocabTerm(
    _NS("rev"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`revision`, "en")
    .addComment(`To specify revision information about the object`, "en"),

  /**
   * To specify the function or part played in a particular situation by the object
   */
  role: new LitVocabTerm(
    _NS("role"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`role`, "en")
    .addComment(`To specify the function or part played in a particular situation by the object`, "en"),

  /**
   * To specify the string to be used for national-language-specific sorting. Used as a property parameter only.
   */
  sort_string: new LitVocabTerm(
    _NS("sort-string"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`sort as`, "en")
    .addComment(`To specify the string to be used for national-language-specific sorting. Used as a property parameter only.`, "en"),

  /**
   * To specify the position or job of the object
   */
  title: new LitVocabTerm(
    _NS("title"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`title`, "en")
    .addComment(`To specify the position or job of the object`, "en"),

  /**
   * To indicate time zone information that is specific to the object. May also be used as a property parameter.
   */
  tz: new LitVocabTerm(
    _NS("tz"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`time zone`, "en")
    .addComment(`To indicate time zone information that is specific to the object. May also be used as a property parameter.`, "en"),

  /**
   * Used to indicate the literal value of a data property that requires property parameters
   */
  value: new LitVocabTerm(
    _NS("value"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`value`, "en")
    .addComment(`Used to indicate the literal value of a data property that requires property parameters`, "en"),

  /**
   * The country name associated with the address of the object
   */
  country_name: new LitVocabTerm(
    _NS("country-name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`country name`, "en")
    .addComment(`The country name associated with the address of the object`, "en"),

  /**
   * The locality (e.g. city or town) associated with the address of the object
   */
  locality: new LitVocabTerm(
    _NS("locality"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`locality`, "en")
    .addComment(`The locality (e.g. city or town) associated with the address of the object`, "en"),

  /**
   * The postal code associated with the address of the object
   */
  postal_code: new LitVocabTerm(
    _NS("postal-code"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`postal code`, "en")
    .addComment(`The postal code associated with the address of the object`, "en"),

  /**
   * The region (e.g. state or province) associated with the address of the object
   */
  region: new LitVocabTerm(
    _NS("region"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`region`, "en")
    .addComment(`The region (e.g. state or province) associated with the address of the object`, "en"),

  /**
   * The street address associated with the address of the object
   */
  street_address: new LitVocabTerm(
    _NS("street-address"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`street address`, "en")
    .addComment(`The street address associated with the address of the object`, "en"),

  /**
   * To include a member in the group this object represents. (This property can only be used by Group individuals)
   */
  hasMember: new LitVocabTerm(
    _NS("hasMember"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has member`, "en")
    .addComment(`To include a member in the group this object represents. (This property can only be used by Group individuals)`, "en"),

  /**
   * The additional name associated with the object
   */
  additional_name: new LitVocabTerm(
    _NS("additional-name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`additional name`, "en")
    .addComment(`The additional name associated with the object`, "en"),

  /**
   * The family name associated with the object
   */
  family_name: new LitVocabTerm(
    _NS("family-name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`family name`, "en")
    .addComment(`The family name associated with the object`, "en"),

  /**
   * The given name associated with the object
   */
  given_name: new LitVocabTerm(
    _NS("given-name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`given name`, "en")
    .addComment(`The given name associated with the object`, "en"),

  /**
   * The honorific prefix of the name associated with the object
   */
  honorific_prefix: new LitVocabTerm(
    _NS("honorific-prefix"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`honorific prefix`, "en")
    .addComment(`The honorific prefix of the name associated with the object`, "en"),

  /**
   * The honorific suffix of the name associated with the object
   */
  honorific_suffix: new LitVocabTerm(
    _NS("honorific-suffix"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`honorific suffix`, "en")
    .addComment(`The honorific suffix of the name associated with the object`, "en"),

  /**
   * The formatted text corresponding to the name of the object
   */
  fn: new LitVocabTerm(
    _NS("fn"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`formatted name`, "en")
    .addComment(`The formatted text corresponding to the name of the object`, "en"),

  /**
   * To specify a public key or authentication certificate associated with the object
   */
  hasKey: new LitVocabTerm(
    _NS("hasKey"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has key`, "en")
    .addComment(`To specify a public key or authentication certificate associated with the object`, "en"),

  /**
   * This object property has been mapped
   */
  key: new LitVocabTerm(
    _NS("key"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`key`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify a graphic image of a logo associated with the object 
   */
  hasLogo: new LitVocabTerm(
    _NS("hasLogo"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has logo`, "en")
    .addComment(`To specify a graphic image of a logo associated with the object `, "en"),

  /**
   * This object property has been mapped
   */
  logo: new LitVocabTerm(
    _NS("logo"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`logo`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify the components of the name of the object
   */
  hasName: new LitVocabTerm(
    _NS("hasName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has name`, "en")
    .addComment(`To specify the components of the name of the object`, "en"),

  /**
   * This object property has been mapped
   */
  n: new LitVocabTerm(
    _NS("n"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`name`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify an image or photograph information that annotates some aspect of the object
   */
  hasPhoto: new LitVocabTerm(
    _NS("hasPhoto"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has photo`, "en")
    .addComment(`To specify an image or photograph information that annotates some aspect of the object`, "en"),

  /**
   * This object property has been mapped
   */
  photo: new LitVocabTerm(
    _NS("photo"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`photo`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify a digital sound content information that annotates some aspect of the object
   */
  hasSound: new LitVocabTerm(
    _NS("hasSound"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has sound`, "en")
    .addComment(`To specify a digital sound content information that annotates some aspect of the object`, "en"),

  /**
   * This object property has been mapped
   */
  sound: new LitVocabTerm(
    _NS("sound"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`sound`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify the telephone number for telephony communication with the object
   */
  hasTelephone: new LitVocabTerm(
    _NS("hasTelephone"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has telephone`, "en")
    .addComment(`To specify the telephone number for telephony communication with the object`, "en"),

  /**
   * This object property has been mapped
   */
  tel: new LitVocabTerm(
    _NS("tel"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`telephone`, "en")
    .addComment(`This object property has been mapped`, "en"),

  /**
   * To specify a uniform resource locator associated with the object
   */
  hasURL: new LitVocabTerm(
    _NS("hasURL"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has url`, "en")
    .addComment(`To specify a uniform resource locator associated with the object`, "en"),

  /**
   * This object property has been mapped
   */
  url: new LitVocabTerm(
    _NS("url"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`url`, "en")
    .addComment(`This object property has been mapped`, "en"),

};

export { VCARD };
