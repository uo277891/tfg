/**
 * Begin license text.
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * End license text.Source Distributions
 */
/**
 * Returns a local store instance
 */
function buildStore() {
    var storage = new Map();
    return {
        setItem: function (key, value) {
            storage.set(key, value);
        },
        getItem: function (key) {
            var result = storage.get(key);
            return result ? result : null;
        },
        removeItem: function (key) {
            storage.delete(key);
        },
        get length() {
            return storage.size;
        },
        clear: function () { return storage.clear(); },
        key: function (index) {
            var iterator = storage.entries();
            var item = iterator.next();
            for (var i = 0; i < index; i++) {
                item = iterator.next();
            }
            return item && item.value ? item.value[0] : null;
        },
    };
}
/**
 * Returns localStore in a browser environment, and a local store instance otherwise
 */
function getLocalStore() {
    if (typeof window !== "undefined" &&
        typeof window.localStorage !== "undefined") {
        return window.localStorage;
    }
    return buildStore();
}

/**
 * Begin license text.
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * End license text.Source Distributions
 */
var CONTEXT_KEY_LOCALE = "i18nextLng";
// Key that specifies a preferred fallback language - e.g. if the user selects
// 'French' as the language for the current page, but there is no French, then
// we'll check if the user has a preferred fallback language, e.g. maybe in
// their profile they have selected 'Spanish' as their preferred fallback.
var CONTEXT_KEY_PREFERRED_FALLBACK_LANGUAGE = "lang_preferred_fallback";
/**
 * Simple class to hold 'context', which could include things like a chosen language, localization settings, process
 * details (like the credentials of the process, time the process started, the process ID, etc.).
 *
 * We can be configured with a storage instance on construction (e.g. to attempt to read values from 'localStorage' in
 * cases when we are deployed within a browser - e.g. a language drop-down might set the current language using a
 * simple key value of say 'i18nLanguage' in localStorage).
 */
var LitContext = /** @class */ (function () {
    function LitContext(locale, storage) {
        if (!locale) {
            throw new Error("A new context *MUST* be provided a locale, but none was provided.");
        }
        if (!storage) {
            throw new Error("A new context *MUST* be provided storage (we expect 'localStorage').");
        }
        this._initialLocale = locale;
        this._storage = storage;
        this._storage.setItem(CONTEXT_KEY_LOCALE, locale);
        this._createdAt = Date.now();
    }
    LitContext.prototype.getLocale = function () {
        var _a;
        return (_a = this._storage.getItem(CONTEXT_KEY_LOCALE)) !== null && _a !== void 0 ? _a : this._initialLocale;
    };
    LitContext.prototype.setLocale = function (locale) {
        this._storage.setItem(CONTEXT_KEY_LOCALE, locale);
        return this;
    };
    LitContext.prototype.getInitialLocale = function () {
        return this._initialLocale;
    };
    LitContext.prototype.getCreatedAt = function () {
        return this._createdAt;
    };
    return LitContext;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

/**
 * Begin license text.
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * End license text.Source Distributions
 */
var LitContextError = /** @class */ (function (_super) {
    __extends(LitContextError, _super);
    function LitContextError(context, message, wrappedException) {
        var _this = 
        // The ignore is required because of code coverage bug
        // https://github.com/gotwarlost/istanbul/issues/690
        _super.call(this, message) /* istanbul ignore next */ || this;
        if (wrappedException) {
            if (wrappedException instanceof LitContextError) {
                _this._wrappedException = wrappedException;
                _this.message = _this.message + "\nContains context error: " + wrappedException.message;
            }
            else if (wrappedException instanceof Error) {
                _this._wrappedException = wrappedException;
                _this.message = _this.message + "\nContains error: " + wrappedException.message;
            }
            else {
                throw new Error("Context error can only wrap ContextErrors or Errors, but got [" + wrappedException + "] (message was [" + message + "]).");
            }
        }
        _this._context = context;
        _this._createdAt = Date.now();
        // See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(_this, LitContextError.prototype);
        return _this;
    }
    LitContextError.prototype.report = function (level, totalLevels, exception) {
        var _a;
        var result = exception.message;
        var stack = exception.stack ? exception.stack.toString() : "";
        // Ignoring the next line is required for full code coverage, because when
        // testing in a Node environment, it is not possible to have `process`
        // undefined.
        // istanbul ignore next
        if (((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.NODE_ENV) !== "production") {
            result += "\n" + ("Level " + level + " of " + totalLevels + ":\n" + stack);
        }
        return result;
    };
    LitContextError.prototype.countLevels = function () {
        var result = 1;
        var current = this;
        while (current && current._wrappedException) {
            if (!(current._wrappedException instanceof LitContextError)) {
                // If we have wrapped a standard exception, then the unwrapping stops,
                //  because standard errors can't wrap other errors.
                current = undefined;
                result++;
            }
            else {
                current = current._wrappedException;
                result++;
            }
        }
        return result;
    };
    LitContextError.prototype.unwrapException = function () {
        var totalLevels = this.countLevels();
        var level = 1;
        var result = "";
        var current = this;
        while (current !== undefined) {
            result += "\n\n" + this.report(level++, totalLevels, current);
            if (!(current._wrappedException instanceof LitContextError) &&
                current._wrappedException) {
                result +=
                    "\n\n" + this.report(level++, totalLevels, current._wrappedException);
                // When reaching a plain Error, the unwrapping stops
                current = undefined;
            }
            else {
                // Unwraps the exception until _wrappedException is undefined
                current = current._wrappedException;
            }
        }
        return result;
    };
    LitContextError.prototype.toString = function () {
        return this.unwrapException();
    };
    LitContextError.prototype.contains = function (elements) {
        if (!elements) {
            return true;
        }
        var message = this.unwrapException();
        return elements
            .map(function (element) { return message.includes(element); })
            .reduce(function (acc, current) { return acc && current; }, true);
    };
    return LitContextError;
}(Error));

/**
 * Begin license text.
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * End license text.Source Distributions
 */
var NO_LANGUAGE_TAG = "<No Language>";
// Typically, these would come from a LIT-generated artifact,
// but since those generated artifacts depend on this current, it's
// just much easier to define the constants we need manually here.
var XSD_STRING = "http://www.w3.org/2001/XMLSchema#string";
var RDF_LANGSTRING = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
function isLiteral(term) {
    return term.language !== undefined;
}
/**
 * Class that defines the concept of a multi-lingual literal (as in an RDF
 * String literal). We can add multiple values in different languages, and
 * look them up again.
 * Also supports parameterized string values (using {{0}} placeholders), for
 * which we can provide values when looking them up.
 */
var LitMultiLingualLiteral = /** @class */ (function () {
    /**
     *
     * @param rdfFactory Expected to provide RDF primitives (e.g. named nodes,
     * literals, etc.).
     * @param iri The IRI for this instance
     * @param values The values (if any) to initialise this instance
     * @param contextMessage Context information (helpful for debugging)
     * @returns {LitMultiLingualLiteral|*}
     */
    function LitMultiLingualLiteral(rdfFactory, iri, values, contextMessage) {
        // Implementing the RDFJS Literal interface
        this.termType = "Literal";
        this._rdfFactory = rdfFactory;
        this._iri = iri;
        this._values = values ? values : new Map();
        this._contextMessage = contextMessage ? contextMessage : "<None provided>";
        this._language = undefined;
        this._expandedMessage = undefined;
    }
    Object.defineProperty(LitMultiLingualLiteral.prototype, "setToEnglish", {
        get: function () {
            this.asLanguage("en");
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitMultiLingualLiteral.prototype, "value", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.lookup(false)) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitMultiLingualLiteral.prototype, "language", {
        get: function () {
            if (!this._language || this._language === NO_LANGUAGE_TAG) {
                return "";
            }
            else {
                return this._language;
            }
        },
        enumerable: true,
        configurable: true
    });
    LitMultiLingualLiteral.prototype.equals = function (other) {
        if (isLiteral(other)) {
            return (this._values.get(other.language || NO_LANGUAGE_TAG) === other.value);
        }
        else {
            return false;
        }
    };
    Object.defineProperty(LitMultiLingualLiteral.prototype, "datatype", {
        get: function () {
            if (!this.language || this.language == NO_LANGUAGE_TAG) {
                return this._rdfFactory.namedNode(XSD_STRING);
            }
            else {
                return this._rdfFactory.namedNode(RDF_LANGSTRING);
            }
        },
        enumerable: true,
        configurable: true
    });
    LitMultiLingualLiteral.prototype.getIri = function () {
        return this._iri;
    };
    LitMultiLingualLiteral.prototype.asLanguage = function (tag) {
        this._language = tag;
        return this;
    };
    LitMultiLingualLiteral.prototype.addValue = function (value, locale) {
        if (!this._language) {
            this._language = locale;
        }
        this._values.set(locale, value);
        return this;
    };
    LitMultiLingualLiteral.prototype.lookupEnglish = function (mandatory) {
        return this.asLanguage("en").lookup(mandatory);
    };
    /**
     * Looks up a message in the currently set language, but if none found we
     * use the English message (which code-generators can enforce, so they should
     * always ensure at least an English message for vocab terms).
     *
     * NOTE: If we do use the English default, then we also reset our language
     * tag so that if we are returning an RDF literal it will contain the correct
     * language tag (i.e. 'en'), and not the requested language that didn't exist!
     *
     * @param mandatory Flag - if true, we'll Throw an error if no value found.
     * @returns {*}
     */
    LitMultiLingualLiteral.prototype.lookup = function (mandatory) {
        var message = this.lookupButDefaultToEnglishOrNoLanguage(mandatory);
        if (message === undefined) {
            return undefined;
        }
        this._expandedMessage = message;
        return this._rdfFactory.literal(message, this.handleNoLanguageTag());
    };
    /**
     * Private method that only looks up the string itself (i.e. will not attempt
     * to wrap in an RDF literal).
     *
     * @param mandatory Flag - if true, we'll Throw an error if no value found.
     * @returns {*}
     */
    LitMultiLingualLiteral.prototype.lookupButDefaultToEnglishOrNoLanguage = function (mandatory) {
        if (!this._language) {
            if (mandatory) {
                throw new Error("No value has been added to the literal");
            }
            else {
                return undefined;
            }
        }
        var message = this._values.get(this._language);
        if (message) {
            return message;
        }
        else if (mandatory) {
            // NOTE: we explicitly throw here, regardless of our 'throw' parameter.
            throw new Error("MultiLingualLiteral message with IRI [" + this._iri.value + "] required value in language [" + this._language + "], but none found (Context: [" + this._contextMessage + "]).");
        }
        else {
            message = this._values.get("en");
            if (message) {
                this._language = "en";
            }
            else {
                message = this._values.get(NO_LANGUAGE_TAG);
                this._language = NO_LANGUAGE_TAG;
            }
        }
        return message;
    };
    /**
     * TODO: Won't yet handle replacing multiple uses of say {{1}} in a single
     *  string, which I guess it should...!?
     *
     * @param mandatory Flag - if true, we'll Throw an error if no value found.
     * @param rest array of values to be used to replace placeholders in
     * the looked-up message.
     * @returns {*}
     */
    LitMultiLingualLiteral.prototype.params = function (mandatory) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        var message = this.lookupButDefaultToEnglishOrNoLanguage(mandatory);
        // If we failed to find a value at all (and didn't throw!), then return
        // 'undefined'.
        if (message === undefined) {
            return undefined;
        }
        var paramsRequired = message.split("{{").length - 1;
        if (paramsRequired !== rest.length) {
            throw new Error("Setting parameters on LitMultiLingualLiteral with IRI [" + this._iri.value + "] and value [" + message + "] in language [" + this._language + "], but it requires [" + paramsRequired + "] params and we received [" + rest.length + "] (Context: [" + this._contextMessage + "]).");
        }
        for (var i = 0; i < rest.length; i++) {
            var marker = "{{" + i + "}}";
            message = message.replace(marker, rest[i]);
        }
        this._expandedMessage = message;
        return this._rdfFactory.literal(message, this.handleNoLanguageTag());
    };
    /**
     * We use a marker for no-language literals, so this handles that marker
     * and returns the correct RDF tag for 'no-language'.
     *
     * @returns {string}
     */
    LitMultiLingualLiteral.prototype.handleNoLanguageTag = function () {
        return this._language === NO_LANGUAGE_TAG ? "" : this._language;
    };
    return LitMultiLingualLiteral;
}());

/**
 * Begin license text.
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * End license text.Source Distributions
 */
/**
 * Simple registry of terms (and their associated meta-data (like labels,
 * comment, message)) in multiple languages.
 *
 * We use localStorage to store all term meta-data, which can only store
 * strings (so we need to expand out the meta-data for each term).
 */
var LitTermRegistry = /** @class */ (function () {
    function LitTermRegistry(store) {
        this.store = store;
    }
    LitTermRegistry.prototype.lookupLabel = function (termIri, language) {
        return this.lookupItem(termIri, language, "label");
    };
    LitTermRegistry.prototype.updateLabel = function (termIri, language, label) {
        this.updateItem(termIri, language, label, "label");
    };
    LitTermRegistry.prototype.lookupComment = function (termIri, language) {
        return this.lookupItem(termIri, language, "comment");
    };
    LitTermRegistry.prototype.updateComment = function (termIri, language, label) {
        this.updateItem(termIri, language, label, "comment");
    };
    LitTermRegistry.prototype.lookupMessage = function (termIri, language) {
        return this.lookupItem(termIri, language, "message");
    };
    LitTermRegistry.prototype.updateMessage = function (termIri, language, label) {
        this.updateItem(termIri, language, label, "message");
    };
    LitTermRegistry.prototype.updateItem = function (termIri, language, label, item) {
        this.store.setItem(termIri + "-" + item + "-" + language, label);
    };
    LitTermRegistry.prototype.lookupItem = function (termIri, language, item) {
        return this.lookupFullTerm(termIri + "-" + item + "-", language);
    };
    /**
     * Looks up the specified vocabulary term in the specified language. If no
     * value found, will lookup again using the fallback language (as set in our
     * context). If not found again, will fallback to looking up the term in
     * English.
     *
     * @param term
     * @param language
     * @returns {string}
     */
    LitTermRegistry.prototype.lookupFullTerm = function (term, language) {
        var _a;
        var fallbackLanguage = (_a = this.store.getItem(CONTEXT_KEY_PREFERRED_FALLBACK_LANGUAGE)) !== null && _a !== void 0 ? _a : "en";
        return this.lookupFullTermFallback(term, language, [
            fallbackLanguage,
            "en",
            NO_LANGUAGE_TAG,
        ]);
    };
    /**
     * Looks up the specified vocabulary term in the specified language. If no
     * value found, will lookup again using the provided fallback values one by
     * one until a value is found or there are no additional fallbacks.
     *
     * @param term {string}
     * @param language {string}
     * @param fallback {string[]}
     *
     * @returns {string | undefined}
     */
    LitTermRegistry.prototype.lookupFullTermFallback = function (term, language, fallback) {
        var result = this.store.getItem("" + term + language);
        if (result) {
            return result;
        }
        else if (fallback.length > 0) {
            return this.lookupFullTermFallback(term, fallback[0], fallback.slice(1));
        }
        else {
            return undefined;
        }
    };
    return LitTermRegistry;
}());

/**
 * Begin license text.
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * End license text.Source Distributions
 */
var DEFAULT_LOCALE = "en";
/**
 * Class to represent vocabulary terms. We expect derived classes to extend
 * an IRI (e.g. a NamedNode in RDFJS), but we just provide effectively an
 * abstract base class providing meta-data associated with terms in a
 * vocabulary, like labels and comments (in multiple-languages).
 *
 * We can also take a reference to a context storage instance, which can
 * contain various contextual information, such as the current locale, or
 * language settings for an interaction that can be used to lookup context at
 * runtime (e.g. to look up the locale for a term's label at runtime if one is
 * not explicitly asked for).
 *
 * This Turtle snippet may help illustrate what this class supports:
 *
 *   prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
 *   prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
 *   prefix skos:     <http://www.w3.org/2004/02/skos/core#>
 *   prefix ex:   <http://example.com/>
 *
 *   ex:name a rdf:Property ;
 *     rdfs:label "Name" ;
 *     rdfs:label "First name"@en ;
 *     rdfs:label "Nombre"@es ;
 *     rdfs:comment "A person's first name"@en .
 *
 *   ex:errNameTooLong a rdfs:Literal ;
 *     skos:definition "Name must be less than {{0}}, but we got {{1}}"@en .
 *
 * NOTE: Since this class does NOT actually store the IRI value for the vocab
 * term (since we expect derived classes to provide that), testing this
 * class in isolation will result in strange looking (i.e. 'undefined-'
 * prefixed) key values in 'localStorage' since we create those keys based on
 * the term IRI (that we don't store!). Currently this doesn't cause any
 * problems, but it's just something to be aware of!
 */
var LitVocabTerm = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param iri the IRI for this vocabulary term
     * @param rdfFactory an underlying RDF library that can create IRI's
     * @param contextStorage context for this term
     * @param strict flag if we should be strict. If not strict, we can use the
     * path component of the term's IRI as the English label if no explicit
     * English label (or no-language label) is provided, e.g. 'name' for the
     * term 'http://example.com/vocab#name'.
     */
    function LitVocabTerm(iri, rdfFactory, contextStorage, strict) {
        // Implementation of the NamedNode interface.
        this.termType = "NamedNode";
        if (typeof iri === "string") {
            this.iri = rdfFactory.namedNode(iri);
        }
        else {
            this.iri = iri;
        }
        this.rdfFactory = rdfFactory;
        if (strict !== undefined) {
            this.strict = strict;
        }
        else {
            this.strict = false;
        }
        this._litSessionContext = new LitContext(DEFAULT_LOCALE, contextStorage);
        this._registry = new LitTermRegistry(contextStorage);
        // Create holders for meta-data on this vocabulary term (we could probably
        // lazily create these only if values are actually provided!).
        this._label = new LitMultiLingualLiteral(rdfFactory, this.iri, undefined, "rdfs:label");
        this._comment = new LitMultiLingualLiteral(rdfFactory, this.iri, undefined, "rdfs:comment");
        this._message = new LitMultiLingualLiteral(rdfFactory, this.iri, undefined, "message (should be defined in RDF vocab using: skos:definition)");
        if (!strict) {
            // This can be overwritten if we get an actual no-language label later,
            // which would be perfectly fine.
            this._label.addValue(LitVocabTerm.extractIriLocalName(iri), NO_LANGUAGE_TAG);
        }
        // Stateful variables defaults.
        this._mandatory = true;
        this._languageOverride = undefined;
        this.resetState();
    }
    Object.defineProperty(LitVocabTerm.prototype, "value", {
        get: function () {
            return this.iri.value;
        },
        enumerable: true,
        configurable: true
    });
    LitVocabTerm.prototype.equals = function (other) {
        return this.iri.equals(other);
    };
    Object.defineProperty(LitVocabTerm.prototype, "mandatory", {
        // Set our mandatory flag - i.e. throws if not as expected.
        get: function () {
            this._mandatory = true;
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "asEnglish", {
        // Simple convenience accessor for requesting English.
        get: function () {
            return this.asLanguage("en");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "iriAsString", {
        // Explicitly named alias for getting the IRI of this term as a String.
        get: function () {
            return this.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "labelLiteral", {
        // Accessor for label that uses our LitSessionContext instance.
        get: function () {
            try {
                var language = this.useLanguageOverrideOrGetFromContext();
                return this._label.asLanguage(language).lookup(this._mandatory);
            }
            finally {
                this.resetState();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "label", {
        get: function () {
            var label = this.labelLiteral;
            return label && label.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "commentLiteral", {
        // Accessor for comment that uses our LitSessionContext instance.
        get: function () {
            try {
                var language = this.useLanguageOverrideOrGetFromContext();
                return this._comment.asLanguage(language).lookup(this._mandatory);
            }
            finally {
                this.resetState();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "comment", {
        get: function () {
            var comment = this.commentLiteral;
            return comment && comment.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "messageLiteral", {
        // Accessor for message that uses our LitSessionContext instance.
        get: function () {
            try {
                var language = this.useLanguageOverrideOrGetFromContext();
                return this._message.asLanguage(language).lookup(this._mandatory);
            }
            finally {
                this.resetState();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LitVocabTerm.prototype, "message", {
        get: function () {
            var message = this.messageLiteral;
            return message && message.value;
        },
        enumerable: true,
        configurable: true
    });
    // Get the IRI of this term as a String (means we can treat this object
    // instance as a string more easily).
    // NOTE: This is *NOT* an accessor, but deliberately overriding the
    // 'toString()' method on the base Object.
    LitVocabTerm.prototype.toString = function () {
        return this.value;
    };
    LitVocabTerm.prototype.messageParamsLiteral = function () {
        var _a;
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        var language = this.useLanguageOverrideOrGetFromContext();
        try {
            return (_a = this._message
                .asLanguage(language)).params.apply(_a, __spreadArrays([this._mandatory], rest));
        }
        finally {
            this.resetState();
        }
    };
    LitVocabTerm.prototype.messageParams = function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        var messageParams = this.messageParamsLiteral.apply(this, rest);
        return messageParams && messageParams.value;
    };
    LitVocabTerm.prototype.resetState = function () {
        this._languageOverride = undefined;
        this._mandatory = false;
    };
    LitVocabTerm.prototype.addLabelNoLanguage = function (value) {
        return this.addLabel(value, NO_LANGUAGE_TAG);
    };
    LitVocabTerm.prototype.addLabel = function (value, language) {
        this.validateAddParams(value, language, "label");
        this._label.addValue(value, language);
        this._registry.updateLabel(this.value, language, value);
        return this;
    };
    LitVocabTerm.prototype.addCommentNoLanguage = function (value) {
        return this.addComment(value, NO_LANGUAGE_TAG);
    };
    LitVocabTerm.prototype.addComment = function (value, language) {
        this.validateAddParams(value, language, "comment");
        this._comment.addValue(value, language);
        this._registry.updateComment(this.value, language, value);
        return this;
    };
    LitVocabTerm.prototype.addMessageNoLanguage = function (value) {
        return this.addMessage(value, NO_LANGUAGE_TAG);
    };
    LitVocabTerm.prototype.addMessage = function (value, language) {
        this.validateAddParams(value, language, "message");
        this._message.addValue(value, language);
        this._registry.updateMessage(this.value, language, value);
        return this;
    };
    /**
     * Ensure we always provide both a value and a lnaguage tag for that value.
     *
     * @param value the test of the value
     * @param language the language tag for the value
     * @param what what kind of value we are adding
     */
    LitVocabTerm.prototype.validateAddParams = function (value, language, what) {
        if (value === undefined || value === null) {
            throw new Error("Attempted to add a non-existent [" + what + "] value to vocab term");
        }
        if (!language) {
            throw new Error("Attempted to add the [" + what + "] value [" + value + "], but without specifying a language");
        }
        return this;
    };
    LitVocabTerm.prototype.useLanguageOverrideOrGetFromContext = function () {
        return this._languageOverride === undefined
            ? this._litSessionContext.getLocale()
            : this._languageOverride;
    };
    LitVocabTerm.prototype.asLanguage = function (language) {
        // An empty string is converted to the NO_LANGUAGE_TAG.
        this._languageOverride = language || NO_LANGUAGE_TAG;
        return this;
    };
    /**
     * Extract the local name from the specified IRI (can be a primitive string or
     * a NamedNode).
     *
     * @param stringOrNamedNode The IRI to extract from.
     * @returns {string}
     */
    LitVocabTerm.extractIriLocalName = function (stringOrNamedNode) {
        var iri = this.isString(stringOrNamedNode)
            ? stringOrNamedNode
            : stringOrNamedNode.value;
        var hashPos = iri.lastIndexOf("#");
        if (hashPos > -1) {
            return iri.substring(hashPos + 1);
        }
        var lastSlashPos = iri.lastIndexOf("/");
        if (lastSlashPos === -1 ||
            (iri.toLowerCase().startsWith("http") &&
                lastSlashPos < (iri.toLowerCase().startsWith("https") ? 8 : 7))) {
            throw Error("Expected hash fragment ('#') or slash ('/') (other than 'https://...') in IRI [" + iri + "]");
        }
        else {
            return iri.substring(lastSlashPos + 1);
        }
    };
    /**
     * Simple method to determine if the specified value is a primitive String.
  
     * @param value The value to evaluate.
     * @returns {boolean} true if String, else false.
     */
    LitVocabTerm.isString = function (value) {
        return typeof value === "string" || value instanceof String;
    };
    /**
     * Simply treat the value as an IRI if it starts with 'http://' or 'https://'
     * (case-insensitive).
     *
     * @param value
     * @returns {boolean}
     */
    LitVocabTerm.isStringIri = function (value) {
        if (!this.isString(value)) {
            return false;
        }
        var valueLower = value.toLowerCase();
        return (valueLower.startsWith("http://") || valueLower.startsWith("https://"));
    };
    return LitVocabTerm;
}());

function BlankNode (id) {
  this.value = id || ('b' + (++BlankNode.nextId));
}

BlankNode.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value
};

BlankNode.prototype.termType = 'BlankNode';

BlankNode.nextId = 0;

var blankNode = BlankNode;

function DefaultGraph () {
  this.value = '';
}

DefaultGraph.prototype.equals = function (other) {
  return !!other && other.termType === this.termType
};

DefaultGraph.prototype.termType = 'DefaultGraph';

var defaultGraph = DefaultGraph;

function NamedNode (iri) {
  this.value = iri;
}

NamedNode.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value
};

NamedNode.prototype.termType = 'NamedNode';

var namedNode = NamedNode;

function Literal (value, language, datatype) {
  this.value = value;
  this.datatype = Literal.stringDatatype;
  this.language = '';

  if (language) {
    this.language = language;
    this.datatype = Literal.langStringDatatype;
  } else if (datatype) {
    this.datatype = datatype;
  }
}

Literal.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value &&
    other.language === this.language && other.datatype.equals(this.datatype)
};

Literal.prototype.termType = 'Literal';
Literal.langStringDatatype = new namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');
Literal.stringDatatype = new namedNode('http://www.w3.org/2001/XMLSchema#string');

var literal = Literal;

function Quad (subject, predicate, object, graph) {
  this.subject = subject;
  this.predicate = predicate;
  this.object = object;

  if (graph) {
    this.graph = graph;
  } else {
    this.graph = new defaultGraph();
  }
}

Quad.prototype.equals = function (other) {
  return !!other && other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&
    other.object.equals(this.object) && other.graph.equals(this.graph)
};

var quad = Quad;

function Variable (name) {
  this.value = name;
}

Variable.prototype.equals = function (other) {
  return !!other && other.termType === this.termType && other.value === this.value
};

Variable.prototype.termType = 'Variable';

var variable = Variable;

function DataFactory () {}

DataFactory.namedNode = function (value) {
  return new namedNode(value)
};

DataFactory.blankNode = function (value) {
  return new blankNode(value)
};

DataFactory.literal = function (value, languageOrDatatype) {
  if (typeof languageOrDatatype === 'string') {
    if (languageOrDatatype.indexOf(':') === -1) {
      return new literal(value, languageOrDatatype)
    }

    return new literal(value, null, DataFactory.namedNode(languageOrDatatype))
  }

  return new literal(value, null, languageOrDatatype)
};

DataFactory.defaultGraph = function () {
  return DataFactory.defaultGraphInstance
};

DataFactory.variable = function (value) {
  return new variable(value)
};

DataFactory.triple = function (subject, predicate, object) {
  return DataFactory.quad(subject, predicate, object)
};

DataFactory.quad = function (subject, predicate, object, graph) {
  return new quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)
};

DataFactory.defaultGraphInstance = new defaultGraph();

var dataFactory = DataFactory;

var dataModel = dataFactory;

var namedNode$1 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  Extension to Schema.org terms providing multilingual alternative names and translations for comments (e.g. for use directly as labels or tool-tips in user interfaces or error messages)
 */
function _NS(localName) {
    return namedNode$1("http://schema.org/" + localName);
}
var SCHEMA_INRUPT_EXT = {
    PREFIX: "schema-inrupt-ext",
    NAMESPACE: "http://schema.org/",
    PREFIX_AND_NAMESPACE: { "schema-inrupt-ext": "http://schema.org/" },
    NS: _NS,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A person (alive, dead, undead, or fictional).
     */
    Person: new LitVocabTerm(_NS("Person"), dataModel, getLocalStore(), false)
        .addLabel("Person", "en")
        .addLabel("La personne", "fr")
        .addLabel("Person", "de")
        .addLabel("Persona", "es")
        .addLabel("Persona", "it")
        .addLabelNoLanguage("Person")
        .addComment("Une personne (vivante, morte, mort-vivant ou fictive).", "fr")
        .addComment("Eine Person (lebendig, tot, untot oder fiktiv).", "de")
        .addComment("Una persona (viva, muerta, no muerta o ficticia).", "es")
        .addComment("Una persona (viva, morta, non morta o immaginaria).", "it")
        .addCommentNoLanguage("A person (alive, dead, undead, or fictional)."),
    // *******************
    // All the Properties.
    // *******************
    /**
     * An alias for the item.
     */
    alternateName: new LitVocabTerm(_NS("alternateName"), dataModel, getLocalStore(), false)
        .addLabel("Alternate Name", "en")
        .addLabel("Nom alternatif", "fr")
        .addLabel("Anderer Name", "de")
        .addLabel("Nombre alternativo", "es")
        .addLabel("Nome alternativo", "it")
        .addLabelNoLanguage("alternateName")
        .addComment("Un alias pour l'article.", "fr")
        .addComment("Ein Alias \u200B\u200Bf\u00FCr den Artikel.", "de")
        .addComment("Un alias para el elemento.", "es")
        .addComment("Un alias per l'elemento.", "it")
        .addCommentNoLanguage("An alias for the item."),
    /**
     * Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.
     */
    givenName: new LitVocabTerm(_NS("givenName"), dataModel, getLocalStore(), false)
        .addLabel("Given Name", "en")
        .addLabel("Pr\u00E9nom", "fr")
        .addLabel("Vorname", "de")
        .addLabel("Nombre de pila", "es")
        .addLabel("Nome di battesimo", "it")
        .addLabelNoLanguage("givenName")
        .addComment("Pr\u00E9nom. Aux \u00C9tats-Unis, le pr\u00E9nom d\u2019une personne. Ceci peut \u00EAtre utilis\u00E9 avec familyName au lieu de la propri\u00E9t\u00E9 name.", "fr")
        .addComment("Vorname. In den USA der Vorname einer Person. Dies kann zusammen mit familyName anstelle der Eigenschaft name verwendet werden.", "de")
        .addComment("Nombre de pila. En los EE. UU., El primer nombre de una persona. Esto se puede usar junto con familyName en lugar de la propiedad name.", "es")
        .addComment("Nome di battesimo. Negli Stati Uniti, il primo nome di una persona. Questo pu\u00F2 essere usato insieme a familyName al posto della propriet\u00E0 name.", "it")
        .addCommentNoLanguage("Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property."),
    /**
     * Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.
     */
    familyName: new LitVocabTerm(_NS("familyName"), dataModel, getLocalStore(), false)
        .addLabel("Family Name", "en")
        .addLabel("Nom de famille", "fr")
        .addLabel("Nachname", "de")
        .addLabel("Apellido", "es")
        .addLabel("Cognome", "it")
        .addLabelNoLanguage("familyName")
        .addComment("Nom de famille. Aux \u00C9tats-Unis, le nom de famille d\u2019une personne. Ceci peut \u00EAtre utilis\u00E9 avec GivenName au lieu de la propri\u00E9t\u00E9 name.", "fr")
        .addComment("Nachname. In den USA der Nachname einer Person. Dies kann zusammen mit givenName anstelle der Eigenschaft name verwendet werden.", "de")
        .addComment("Apellido. En los EE.UU., el apellido de una persona. Esto se puede usar junto con givenName en lugar de la propiedad name.", "es")
        .addComment("Cognome. Negli Stati Uniti, il cognome di una persona. Questo pu\u00F2 essere usato insieme a givenName al posto della propriet\u00E0 name.", "it")
        .addCommentNoLanguage("Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property."),
    /**
     * An additional name for a Person, can be used for a middle name.
     */
    additionalName: new LitVocabTerm(_NS("additionalName"), dataModel, getLocalStore(), false)
        .addLabel("Additional Name", "en")
        .addLabel("Nom additionnel", "fr")
        .addLabel("Zus\u00E4tzlicher Name", "de")
        .addLabel("Nombre adicional", "es")
        .addLabel("Nome aggiuntivo", "it")
        .addLabelNoLanguage("additionalName")
        .addComment("Un nom suppl\u00E9mentaire pour une personne peut \u00EAtre utilis\u00E9 pour un deuxi\u00E8me pr\u00E9nom.", "fr")
        .addComment("Ein zus\u00E4tzlicher Name f\u00FCr eine Person kann f\u00FCr einen zweiten Vornamen verwendet werden.", "de")
        .addComment("Un nombre adicional para una persona, se puede utilizar para un segundo nombre.", "es")
        .addComment("Un nome aggiuntivo per una persona pu\u00F2 essere usato per un secondo nome.", "it")
        .addCommentNoLanguage("An additional name for a Person, can be used for a middle name."),
    /**
     * A license document that applies to this content, typically indicated by URL.
     */
    license: new LitVocabTerm(_NS("license"), dataModel, getLocalStore(), false)
        .addLabel("License", "en")
        .addLabel("License", "fr")
        .addLabel("Lizenz", "de")
        .addLabel("Licencia", "es")
        .addLabel("Licenza", "it")
        .addLabelNoLanguage("license")
        .addComment("Un document de licence qui s'applique \u00E0 ce contenu, g\u00E9n\u00E9ralement indiqu\u00E9 par une URL.", "fr")
        .addComment("Ein Lizenzdokument, das f\u00FCr diesen Inhalt gilt und in der Regel durch eine URL angegeben wird.", "de")
        .addComment("Un documento de licencia que se aplica a este contenido, normalmente indicado por URL.", "es")
        .addComment("Un documento di licenza che si applica a questo contenuto, generalmente indicato dall'URL.", "it")
        .addCommentNoLanguage("A license document that applies to this content, typically indicated by URL."),
    /**
     * Must have comment too!
     */
    newTerm: new LitVocabTerm(_NS("newTerm"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("newTerm")
        .addComment("Must have comment too!", "en"),
    /**
     * The name of the item.
     */
    name: new LitVocabTerm(_NS("name"), dataModel, getLocalStore(), false)
        .addLabel("Name", "en")
        .addLabel("Nom", "fr")
        .addLabel("Name", "de")
        .addLabel("Nombre", "es")
        .addLabel("Nome", "it")
        .addLabelNoLanguage("name")
        .addComment("Le nom de l'objet.", "fr")
        .addComment("Der Name des Artikels.", "de")
        .addComment("El nombre del art\u00EDculo.", "es")
        .addComment("Il nome dell'articolo.", "it")
        .addCommentNoLanguage("The name of the item."),
};

var namedNode$2 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$1(localName) {
    return namedNode$2("http://www.w3.org/2006/vcard/ns#" + localName);
}
var VCARD = {
    PREFIX: "vcard",
    NAMESPACE: "http://www.w3.org/2006/vcard/ns#",
    PREFIX_AND_NAMESPACE: { "vcard": "http://www.w3.org/2006/vcard/ns#" },
    NS: _NS$1,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Acquaintance
     */
    Acquaintance: new LitVocabTerm(_NS$1("Acquaintance"), dataModel, getLocalStore(), false)
        .addLabel("Acquaintance", "en"),
    /**
     * Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.
     */
    RelatedType: new LitVocabTerm(_NS$1("RelatedType"), dataModel, getLocalStore(), false)
        .addLabel("Relation Type", "en")
        .addComment("Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.", "en"),
    /**
     * Agent
     */
    Agent: new LitVocabTerm(_NS$1("Agent"), dataModel, getLocalStore(), false)
        .addLabel("Agent", "en"),
    /**
     * This class is deprecated
     */
    BBS: new LitVocabTerm(_NS$1("BBS"), dataModel, getLocalStore(), false)
        .addLabel("BBS", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.
     */
    TelephoneType: new LitVocabTerm(_NS$1("TelephoneType"), dataModel, getLocalStore(), false)
        .addLabel("Phone", "en")
        .addComment("Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.", "en"),
    /**
     * This class is deprecated
     */
    Car: new LitVocabTerm(_NS$1("Car"), dataModel, getLocalStore(), false)
        .addLabel("Car", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Also called mobile telephone
     */
    Cell: new LitVocabTerm(_NS$1("Cell"), dataModel, getLocalStore(), false)
        .addLabel("Cell", "en")
        .addComment("Also called mobile telephone", "en"),
    /**
     * Child
     */
    Child: new LitVocabTerm(_NS$1("Child"), dataModel, getLocalStore(), false)
        .addLabel("Child", "en"),
    /**
     * Colleague
     */
    Colleague: new LitVocabTerm(_NS$1("Colleague"), dataModel, getLocalStore(), false)
        .addLabel("Colleague", "en"),
    /**
     * Contact
     */
    Contact: new LitVocabTerm(_NS$1("Contact"), dataModel, getLocalStore(), false)
        .addLabel("Contact", "en"),
    /**
     * Coresident
     */
    Coresident: new LitVocabTerm(_NS$1("Coresident"), dataModel, getLocalStore(), false)
        .addLabel("Coresident", "en"),
    /**
     * Coworker
     */
    Coworker: new LitVocabTerm(_NS$1("Coworker"), dataModel, getLocalStore(), false)
        .addLabel("Coworker", "en"),
    /**
     * Crush
     */
    Crush: new LitVocabTerm(_NS$1("Crush"), dataModel, getLocalStore(), false)
        .addLabel("Crush", "en"),
    /**
     * Date
     */
    Date: new LitVocabTerm(_NS$1("Date"), dataModel, getLocalStore(), false)
        .addLabel("Date", "en"),
    /**
     * This class is deprecated
     */
    Dom: new LitVocabTerm(_NS$1("Dom"), dataModel, getLocalStore(), false)
        .addLabel("Dom", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Used for type codes. The URI of the type code must be used as the value for Type.
     */
    Type: new LitVocabTerm(_NS$1("Type"), dataModel, getLocalStore(), false)
        .addLabel("Type", "en")
        .addComment("Used for type codes. The URI of the type code must be used as the value for Type.", "en"),
    /**
     * Emergency
     */
    Emergency: new LitVocabTerm(_NS$1("Emergency"), dataModel, getLocalStore(), false)
        .addLabel("Emergency", "en"),
    /**
     * Fax
     */
    Fax: new LitVocabTerm(_NS$1("Fax"), dataModel, getLocalStore(), false)
        .addLabel("Fax", "en"),
    /**
     * Female
     */
    Female: new LitVocabTerm(_NS$1("Female"), dataModel, getLocalStore(), false)
        .addLabel("Female", "en"),
    /**
     * Used for gender codes. The URI of the gender code must be used as the value for Gender.
     */
    Gender: new LitVocabTerm(_NS$1("Gender"), dataModel, getLocalStore(), false)
        .addLabel("Gender", "en")
        .addComment("Used for gender codes. The URI of the gender code must be used as the value for Gender.", "en"),
    /**
     * Friend
     */
    Friend: new LitVocabTerm(_NS$1("Friend"), dataModel, getLocalStore(), false)
        .addLabel("Friend", "en"),
    /**
     * This implies that the property is related to an individual's personal life
     */
    Home: new LitVocabTerm(_NS$1("Home"), dataModel, getLocalStore(), false)
        .addLabel("Home", "en")
        .addComment("This implies that the property is related to an individual's personal life", "en"),
    /**
     * This class is deprecated
     */
    ISDN: new LitVocabTerm(_NS$1("ISDN"), dataModel, getLocalStore(), false)
        .addLabel("ISDN", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * This class is deprecated
     */
    Internet: new LitVocabTerm(_NS$1("Internet"), dataModel, getLocalStore(), false)
        .addLabel("Internet", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * This class is deprecated
     */
    Intl: new LitVocabTerm(_NS$1("Intl"), dataModel, getLocalStore(), false)
        .addLabel("Intl", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Kin
     */
    Kin: new LitVocabTerm(_NS$1("Kin"), dataModel, getLocalStore(), false)
        .addLabel("Kin", "en"),
    /**
     * This class is deprecated
     */
    Label: new LitVocabTerm(_NS$1("Label"), dataModel, getLocalStore(), false)
        .addLabel("Label", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Male
     */
    Male: new LitVocabTerm(_NS$1("Male"), dataModel, getLocalStore(), false)
        .addLabel("Male", "en"),
    /**
     * Me
     */
    Me: new LitVocabTerm(_NS$1("Me"), dataModel, getLocalStore(), false)
        .addLabel("Me", "en"),
    /**
     * Met
     */
    Met: new LitVocabTerm(_NS$1("Met"), dataModel, getLocalStore(), false)
        .addLabel("Met", "en"),
    /**
     * This class is deprecated
     */
    Modem: new LitVocabTerm(_NS$1("Modem"), dataModel, getLocalStore(), false)
        .addLabel("Modem", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * This class is deprecated
     */
    Msg: new LitVocabTerm(_NS$1("Msg"), dataModel, getLocalStore(), false)
        .addLabel("Msg", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Muse
     */
    Muse: new LitVocabTerm(_NS$1("Muse"), dataModel, getLocalStore(), false)
        .addLabel("Muse", "en"),
    /**
     * Neighbor
     */
    Neighbor: new LitVocabTerm(_NS$1("Neighbor"), dataModel, getLocalStore(), false)
        .addLabel("Neighbor", "en"),
    /**
     * None
     */
    None: new LitVocabTerm(_NS$1("None"), dataModel, getLocalStore(), false)
        .addLabel("None", "en"),
    /**
     * Other
     */
    Other: new LitVocabTerm(_NS$1("Other"), dataModel, getLocalStore(), false)
        .addLabel("Other", "en"),
    /**
     * This class is deprecated
     */
    PCS: new LitVocabTerm(_NS$1("PCS"), dataModel, getLocalStore(), false)
        .addLabel("PCS", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Pager
     */
    Pager: new LitVocabTerm(_NS$1("Pager"), dataModel, getLocalStore(), false)
        .addLabel("Pager", "en"),
    /**
     * This class is deprecated
     */
    Parcel: new LitVocabTerm(_NS$1("Parcel"), dataModel, getLocalStore(), false)
        .addLabel("Parcel", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Parent
     */
    Parent: new LitVocabTerm(_NS$1("Parent"), dataModel, getLocalStore(), false)
        .addLabel("Parent", "en"),
    /**
     * This class is deprecated
     */
    Postal: new LitVocabTerm(_NS$1("Postal"), dataModel, getLocalStore(), false)
        .addLabel("Postal", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * This class is deprecated
     */
    Pref: new LitVocabTerm(_NS$1("Pref"), dataModel, getLocalStore(), false)
        .addLabel("Pref", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * Sibling
     */
    Sibling: new LitVocabTerm(_NS$1("Sibling"), dataModel, getLocalStore(), false)
        .addLabel("Sibling", "en"),
    /**
     * Spouse
     */
    Spouse: new LitVocabTerm(_NS$1("Spouse"), dataModel, getLocalStore(), false)
        .addLabel("Spouse", "en"),
    /**
     * Sweetheart
     */
    Sweetheart: new LitVocabTerm(_NS$1("Sweetheart"), dataModel, getLocalStore(), false)
        .addLabel("Sweetheart", "en"),
    /**
     * This class is deprecated. Use the hasTelephone object property.
     */
    Tel: new LitVocabTerm(_NS$1("Tel"), dataModel, getLocalStore(), false)
        .addLabel("Tel", "en")
        .addComment("This class is deprecated. Use the hasTelephone object property.", "en"),
    /**
     * Also called sms telephone
     */
    Text: new LitVocabTerm(_NS$1("Text"), dataModel, getLocalStore(), false)
        .addLabel("Text", "en")
        .addComment("Also called sms telephone", "en"),
    /**
     * Text phone
     */
    TextPhone: new LitVocabTerm(_NS$1("TextPhone"), dataModel, getLocalStore(), false)
        .addLabel("Text phone", "en"),
    /**
     * Unknown
     */
    Unknown: new LitVocabTerm(_NS$1("Unknown"), dataModel, getLocalStore(), false)
        .addLabel("Unknown", "en"),
    /**
     * Video
     */
    Video: new LitVocabTerm(_NS$1("Video"), dataModel, getLocalStore(), false)
        .addLabel("Video", "en"),
    /**
     * Voice
     */
    Voice: new LitVocabTerm(_NS$1("Voice"), dataModel, getLocalStore(), false)
        .addLabel("Voice", "en"),
    /**
     * This implies that the property is related to an individual's work place
     */
    Work: new LitVocabTerm(_NS$1("Work"), dataModel, getLocalStore(), false)
        .addLabel("Work", "en")
        .addComment("This implies that the property is related to an individual's work place", "en"),
    /**
     * This class is deprecated
     */
    X400: new LitVocabTerm(_NS$1("X400"), dataModel, getLocalStore(), false)
        .addLabel("X400", "en")
        .addComment("This class is deprecated", "en"),
    /**
     * To specify the components of the delivery address for the  object
     */
    Address: new LitVocabTerm(_NS$1("Address"), dataModel, getLocalStore(), false)
        .addLabel("Address", "en")
        .addComment("To specify the components of the delivery address for the  object", "en"),
    /**
     * To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.
     */
    Email: new LitVocabTerm(_NS$1("Email"), dataModel, getLocalStore(), false)
        .addLabel("Email", "en")
        .addComment("To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.", "en"),
    /**
     * Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.
     */
    Group: new LitVocabTerm(_NS$1("Group"), dataModel, getLocalStore(), false)
        .addLabel("Group", "en")
        .addComment("Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.", "en"),
    /**
     * The parent class for all objects
     */
    Kind: new LitVocabTerm(_NS$1("Kind"), dataModel, getLocalStore(), false)
        .addLabel("Kind", "en")
        .addComment("The parent class for all objects", "en"),
    /**
     * An object representing a single person or entity
     */
    Individual: new LitVocabTerm(_NS$1("Individual"), dataModel, getLocalStore(), false)
        .addLabel("Individual", "en")
        .addComment("An object representing a single person or entity", "en"),
    /**
     * An object representing a named geographical place
     */
    Location: new LitVocabTerm(_NS$1("Location"), dataModel, getLocalStore(), false)
        .addLabel("Location", "en")
        .addComment("An object representing a named geographical place", "en"),
    /**
     * An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.
  
     */
    Organization: new LitVocabTerm(_NS$1("Organization"), dataModel, getLocalStore(), false)
        .addLabel("Organization", "en")
        .addComment("An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.\n", "en"),
    /**
     * To specify the components of the name of the object
     */
    Name: new LitVocabTerm(_NS$1("Name"), dataModel, getLocalStore(), false)
        .addLabel("Name", "en")
        .addComment("To specify the components of the name of the object", "en"),
    /**
     * The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)
     */
    VCard: new LitVocabTerm(_NS$1("VCard"), dataModel, getLocalStore(), false)
        .addLabel("VCard", "en")
        .addComment("The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * This object property has been mapped
     */
    adr: new LitVocabTerm(_NS$1("adr"), dataModel, getLocalStore(), false)
        .addLabel("address", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify the components of the delivery address for the object
     */
    hasAddress: new LitVocabTerm(_NS$1("hasAddress"), dataModel, getLocalStore(), false)
        .addLabel("has address", "en")
        .addComment("To specify the components of the delivery address for the object", "en"),
    /**
     * This object property has been deprecated
     */
    agent: new LitVocabTerm(_NS$1("agent"), dataModel, getLocalStore(), false)
        .addLabel("agent", "en")
        .addComment("This object property has been deprecated", "en"),
    /**
     * The date of marriage, or equivalent, of the object
     */
    anniversary: new LitVocabTerm(_NS$1("anniversary"), dataModel, getLocalStore(), false)
        .addLabel("anniversary", "en")
        .addComment("The date of marriage, or equivalent, of the object", "en"),
    /**
     * To specify the birth date of the object
     */
    bday: new LitVocabTerm(_NS$1("bday"), dataModel, getLocalStore(), false)
        .addLabel("birth date", "en")
        .addComment("To specify the birth date of the object", "en"),
    /**
     * The category information about the object, also known as tags
     */
    category: new LitVocabTerm(_NS$1("category"), dataModel, getLocalStore(), false)
        .addLabel("category", "en")
        .addComment("The category information about the object, also known as tags", "en"),
    /**
     * This data property has been deprecated
     */
    class_: new LitVocabTerm(_NS$1("class"), dataModel, getLocalStore(), false)
        .addLabel("class", "en")
        .addComment("This data property has been deprecated", "en"),
    /**
     * This object property has been mapped
     */
    email: new LitVocabTerm(_NS$1("email"), dataModel, getLocalStore(), false)
        .addLabel("email", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify the electronic mail address for communication with the object
     */
    hasEmail: new LitVocabTerm(_NS$1("hasEmail"), dataModel, getLocalStore(), false)
        .addLabel("has email", "en")
        .addComment("To specify the electronic mail address for communication with the object", "en"),
    /**
     * This data property has been deprecated
     */
    extended_address: new LitVocabTerm(_NS$1("extended-address"), dataModel, getLocalStore(), false)
        .addLabel("extended address", "en")
        .addComment("This data property has been deprecated", "en"),
    /**
     * This object property has been mapped
     */
    geo: new LitVocabTerm(_NS$1("geo"), dataModel, getLocalStore(), false)
        .addLabel("geo", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify information related to the global positioning of the object. May also be used as a property parameter.
     */
    hasGeo: new LitVocabTerm(_NS$1("hasGeo"), dataModel, getLocalStore(), false)
        .addLabel("has geo", "en")
        .addComment("To specify information related to the global positioning of the object. May also be used as a property parameter.", "en"),
    /**
     * Used to support property parameters for the additional name data property
     */
    hasAdditionalName: new LitVocabTerm(_NS$1("hasAdditionalName"), dataModel, getLocalStore(), false)
        .addLabel("has additional name", "en")
        .addComment("Used to support property parameters for the additional name data property", "en"),
    /**
     * To specify the busy time associated with the object. (Was called FBURL in RFC6350)
     */
    hasCalendarBusy: new LitVocabTerm(_NS$1("hasCalendarBusy"), dataModel, getLocalStore(), false)
        .addLabel("has calendar busy", "en")
        .addComment("To specify the busy time associated with the object. (Was called FBURL in RFC6350)", "en"),
    /**
     * To specify the calendar associated with the object. (Was called CALURI in RFC6350)
     */
    hasCalendarLink: new LitVocabTerm(_NS$1("hasCalendarLink"), dataModel, getLocalStore(), false)
        .addLabel("has calendar link", "en")
        .addComment("To specify the calendar associated with the object. (Was called CALURI in RFC6350)", "en"),
    /**
     * To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)
     */
    hasCalendarRequest: new LitVocabTerm(_NS$1("hasCalendarRequest"), dataModel, getLocalStore(), false)
        .addLabel("has calendar request", "en")
        .addComment("To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)", "en"),
    /**
     * Used to support property parameters for the category data property
     */
    hasCategory: new LitVocabTerm(_NS$1("hasCategory"), dataModel, getLocalStore(), false)
        .addLabel("has category", "en")
        .addComment("Used to support property parameters for the category data property", "en"),
    /**
     * Used to support property parameters for the country name data property
     */
    hasCountryName: new LitVocabTerm(_NS$1("hasCountryName"), dataModel, getLocalStore(), false)
        .addLabel("has country name", "en")
        .addComment("Used to support property parameters for the country name data property", "en"),
    /**
     * Used to support property parameters for the formatted name data property
     */
    hasFN: new LitVocabTerm(_NS$1("hasFN"), dataModel, getLocalStore(), false)
        .addLabel("has formatted name", "en")
        .addComment("Used to support property parameters for the formatted name data property", "en"),
    /**
     * Used to support property parameters for the family name data property
     */
    hasFamilyName: new LitVocabTerm(_NS$1("hasFamilyName"), dataModel, getLocalStore(), false)
        .addLabel("has family name", "en")
        .addComment("Used to support property parameters for the family name data property", "en"),
    /**
     * To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.
     */
    hasGender: new LitVocabTerm(_NS$1("hasGender"), dataModel, getLocalStore(), false)
        .addLabel("has gender", "en")
        .addComment("To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.", "en"),
    /**
     * Used to support property parameters for the given name data property
     */
    hasGivenName: new LitVocabTerm(_NS$1("hasGivenName"), dataModel, getLocalStore(), false)
        .addLabel("has given name", "en")
        .addComment("Used to support property parameters for the given name data property", "en"),
    /**
     * Used to support property parameters for the honorific prefix data property
     */
    hasHonorificPrefix: new LitVocabTerm(_NS$1("hasHonorificPrefix"), dataModel, getLocalStore(), false)
        .addLabel("has honorific prefix", "en")
        .addComment("Used to support property parameters for the honorific prefix data property", "en"),
    /**
     * Used to support property parameters for the honorific suffix data property
     */
    hasHonorificSuffix: new LitVocabTerm(_NS$1("hasHonorificSuffix"), dataModel, getLocalStore(), false)
        .addLabel("has honorific suffix", "en")
        .addComment("Used to support property parameters for the honorific suffix data property", "en"),
    /**
     * To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)
     */
    hasInstantMessage: new LitVocabTerm(_NS$1("hasInstantMessage"), dataModel, getLocalStore(), false)
        .addLabel("has messaging", "en")
        .addComment("To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)", "en"),
    /**
     * Used to support property parameters for the language data property
     */
    hasLanguage: new LitVocabTerm(_NS$1("hasLanguage"), dataModel, getLocalStore(), false)
        .addLabel("has language", "en")
        .addComment("Used to support property parameters for the language data property", "en"),
    /**
     * Used to support property parameters for the locality data property
     */
    hasLocality: new LitVocabTerm(_NS$1("hasLocality"), dataModel, getLocalStore(), false)
        .addLabel("has locality", "en")
        .addComment("Used to support property parameters for the locality data property", "en"),
    /**
     * Used to support property parameters for the nickname data property
     */
    hasNickname: new LitVocabTerm(_NS$1("hasNickname"), dataModel, getLocalStore(), false)
        .addLabel("has nickname", "en")
        .addComment("Used to support property parameters for the nickname data property", "en"),
    /**
     * The nick name associated with the object
     */
    nickname: new LitVocabTerm(_NS$1("nickname"), dataModel, getLocalStore(), false)
        .addLabel("nickname", "en")
        .addComment("The nick name associated with the object", "en"),
    /**
     * Used to support property parameters for the note data property
     */
    hasNote: new LitVocabTerm(_NS$1("hasNote"), dataModel, getLocalStore(), false)
        .addLabel("has note", "en")
        .addComment("Used to support property parameters for the note data property", "en"),
    /**
     * Used to support property parameters for the organization name data property
     */
    hasOrganizationName: new LitVocabTerm(_NS$1("hasOrganizationName"), dataModel, getLocalStore(), false)
        .addLabel("has organization name", "en")
        .addComment("Used to support property parameters for the organization name data property", "en"),
    /**
     * Used to support property parameters for the organization unit name data property
     */
    hasOrganizationUnit: new LitVocabTerm(_NS$1("hasOrganizationUnit"), dataModel, getLocalStore(), false)
        .addLabel("has organization unit name", "en")
        .addComment("Used to support property parameters for the organization unit name data property", "en"),
    /**
     * Used to support property parameters for the postal code data property
     */
    hasPostalCode: new LitVocabTerm(_NS$1("hasPostalCode"), dataModel, getLocalStore(), false)
        .addLabel("has postal code", "en")
        .addComment("Used to support property parameters for the postal code data property", "en"),
    /**
     * Used to support property parameters for the region data property
     */
    hasRegion: new LitVocabTerm(_NS$1("hasRegion"), dataModel, getLocalStore(), false)
        .addLabel("has region", "en")
        .addComment("Used to support property parameters for the region data property", "en"),
    /**
     * To specify a relationship between another entity and the entity represented by this object
     */
    hasRelated: new LitVocabTerm(_NS$1("hasRelated"), dataModel, getLocalStore(), false)
        .addLabel("has related", "en")
        .addComment("To specify a relationship between another entity and the entity represented by this object", "en"),
    /**
     * Used to support property parameters for the role data property
     */
    hasRole: new LitVocabTerm(_NS$1("hasRole"), dataModel, getLocalStore(), false)
        .addLabel("has role", "en")
        .addComment("Used to support property parameters for the role data property", "en"),
    /**
     * To identify the source of directory information of the object
     */
    hasSource: new LitVocabTerm(_NS$1("hasSource"), dataModel, getLocalStore(), false)
        .addLabel("has source", "en")
        .addComment("To identify the source of directory information of the object", "en"),
    /**
     * Used to support property parameters for the street address data property
     */
    hasStreetAddress: new LitVocabTerm(_NS$1("hasStreetAddress"), dataModel, getLocalStore(), false)
        .addLabel("has street address", "en")
        .addComment("Used to support property parameters for the street address data property", "en"),
    /**
     * Used to support property parameters for the title data property
     */
    hasTitle: new LitVocabTerm(_NS$1("hasTitle"), dataModel, getLocalStore(), false)
        .addLabel("has title", "en")
        .addComment("Used to support property parameters for the title data property", "en"),
    /**
     * To specify a value that represents a globally unique identifier corresponding to the object
     */
    hasUID: new LitVocabTerm(_NS$1("hasUID"), dataModel, getLocalStore(), false)
        .addLabel("has uid", "en")
        .addComment("To specify a value that represents a globally unique identifier corresponding to the object", "en"),
    /**
     * Used to indicate the resource value of an object property that requires property parameters
     */
    hasValue: new LitVocabTerm(_NS$1("hasValue"), dataModel, getLocalStore(), false)
        .addLabel("has value", "en")
        .addComment("Used to indicate the resource value of an object property that requires property parameters", "en"),
    /**
     * This data property has been deprecated
     */
    label: new LitVocabTerm(_NS$1("label"), dataModel, getLocalStore(), false)
        .addLabel("label", "en")
        .addComment("This data property has been deprecated", "en"),
    /**
     * To specify the language that may be used for contacting the object. May also be used as a property parameter.
     */
    language: new LitVocabTerm(_NS$1("language"), dataModel, getLocalStore(), false)
        .addLabel("language", "en")
        .addComment("To specify the language that may be used for contacting the object. May also be used as a property parameter.", "en"),
    /**
     * This data property has been deprecated. See hasGeo
     */
    latitude: new LitVocabTerm(_NS$1("latitude"), dataModel, getLocalStore(), false)
        .addLabel("latitude", "en")
        .addComment("This data property has been deprecated. See hasGeo", "en"),
    /**
     * This data property has been deprecated. See hasGeo
     */
    longitude: new LitVocabTerm(_NS$1("longitude"), dataModel, getLocalStore(), false)
        .addLabel("longitude", "en")
        .addComment("This data property has been deprecated. See hasGeo", "en"),
    /**
     * This data property has been deprecated
     */
    mailer: new LitVocabTerm(_NS$1("mailer"), dataModel, getLocalStore(), false)
        .addLabel("mailer", "en")
        .addComment("This data property has been deprecated", "en"),
    /**
     * A note associated with the object
     */
    note: new LitVocabTerm(_NS$1("note"), dataModel, getLocalStore(), false)
        .addLabel("note", "en")
        .addComment("A note associated with the object", "en"),
    /**
     * This object property has been mapped. Use the organization-name data property.
     */
    org: new LitVocabTerm(_NS$1("org"), dataModel, getLocalStore(), false)
        .addLabel("organization", "en")
        .addComment("This object property has been mapped. Use the organization-name data property.", "en"),
    /**
     * To specify the organizational name associated with the object
     */
    organization_name: new LitVocabTerm(_NS$1("organization-name"), dataModel, getLocalStore(), false)
        .addLabel("organization name", "en")
        .addComment("To specify the organizational name associated with the object", "en"),
    /**
     * To specify the organizational unit name associated with the object
     */
    organization_unit: new LitVocabTerm(_NS$1("organization-unit"), dataModel, getLocalStore(), false)
        .addLabel("organizational unit name", "en")
        .addComment("To specify the organizational unit name associated with the object", "en"),
    /**
     * This data property has been deprecated
     */
    post_office_box: new LitVocabTerm(_NS$1("post-office-box"), dataModel, getLocalStore(), false)
        .addLabel("post office box", "en")
        .addComment("This data property has been deprecated", "en"),
    /**
     * To specify the identifier for the product that created the object
     */
    prodid: new LitVocabTerm(_NS$1("prodid"), dataModel, getLocalStore(), false)
        .addLabel("product id", "en")
        .addComment("To specify the identifier for the product that created the object", "en"),
    /**
     * To specify revision information about the object
     */
    rev: new LitVocabTerm(_NS$1("rev"), dataModel, getLocalStore(), false)
        .addLabel("revision", "en")
        .addComment("To specify revision information about the object", "en"),
    /**
     * To specify the function or part played in a particular situation by the object
     */
    role: new LitVocabTerm(_NS$1("role"), dataModel, getLocalStore(), false)
        .addLabel("role", "en")
        .addComment("To specify the function or part played in a particular situation by the object", "en"),
    /**
     * To specify the string to be used for national-language-specific sorting. Used as a property parameter only.
     */
    sort_string: new LitVocabTerm(_NS$1("sort-string"), dataModel, getLocalStore(), false)
        .addLabel("sort as", "en")
        .addComment("To specify the string to be used for national-language-specific sorting. Used as a property parameter only.", "en"),
    /**
     * To specify the position or job of the object
     */
    title: new LitVocabTerm(_NS$1("title"), dataModel, getLocalStore(), false)
        .addLabel("title", "en")
        .addComment("To specify the position or job of the object", "en"),
    /**
     * To indicate time zone information that is specific to the object. May also be used as a property parameter.
     */
    tz: new LitVocabTerm(_NS$1("tz"), dataModel, getLocalStore(), false)
        .addLabel("time zone", "en")
        .addComment("To indicate time zone information that is specific to the object. May also be used as a property parameter.", "en"),
    /**
     * Used to indicate the literal value of a data property that requires property parameters
     */
    value: new LitVocabTerm(_NS$1("value"), dataModel, getLocalStore(), false)
        .addLabel("value", "en")
        .addComment("Used to indicate the literal value of a data property that requires property parameters", "en"),
    /**
     * The country name associated with the address of the object
     */
    country_name: new LitVocabTerm(_NS$1("country-name"), dataModel, getLocalStore(), false)
        .addLabel("country name", "en")
        .addComment("The country name associated with the address of the object", "en"),
    /**
     * The locality (e.g. city or town) associated with the address of the object
     */
    locality: new LitVocabTerm(_NS$1("locality"), dataModel, getLocalStore(), false)
        .addLabel("locality", "en")
        .addComment("The locality (e.g. city or town) associated with the address of the object", "en"),
    /**
     * The postal code associated with the address of the object
     */
    postal_code: new LitVocabTerm(_NS$1("postal-code"), dataModel, getLocalStore(), false)
        .addLabel("postal code", "en")
        .addComment("The postal code associated with the address of the object", "en"),
    /**
     * The region (e.g. state or province) associated with the address of the object
     */
    region: new LitVocabTerm(_NS$1("region"), dataModel, getLocalStore(), false)
        .addLabel("region", "en")
        .addComment("The region (e.g. state or province) associated with the address of the object", "en"),
    /**
     * The street address associated with the address of the object
     */
    street_address: new LitVocabTerm(_NS$1("street-address"), dataModel, getLocalStore(), false)
        .addLabel("street address", "en")
        .addComment("The street address associated with the address of the object", "en"),
    /**
     * To include a member in the group this object represents. (This property can only be used by Group individuals)
     */
    hasMember: new LitVocabTerm(_NS$1("hasMember"), dataModel, getLocalStore(), false)
        .addLabel("has member", "en")
        .addComment("To include a member in the group this object represents. (This property can only be used by Group individuals)", "en"),
    /**
     * The additional name associated with the object
     */
    additional_name: new LitVocabTerm(_NS$1("additional-name"), dataModel, getLocalStore(), false)
        .addLabel("additional name", "en")
        .addComment("The additional name associated with the object", "en"),
    /**
     * The family name associated with the object
     */
    family_name: new LitVocabTerm(_NS$1("family-name"), dataModel, getLocalStore(), false)
        .addLabel("family name", "en")
        .addComment("The family name associated with the object", "en"),
    /**
     * The given name associated with the object
     */
    given_name: new LitVocabTerm(_NS$1("given-name"), dataModel, getLocalStore(), false)
        .addLabel("given name", "en")
        .addComment("The given name associated with the object", "en"),
    /**
     * The honorific prefix of the name associated with the object
     */
    honorific_prefix: new LitVocabTerm(_NS$1("honorific-prefix"), dataModel, getLocalStore(), false)
        .addLabel("honorific prefix", "en")
        .addComment("The honorific prefix of the name associated with the object", "en"),
    /**
     * The honorific suffix of the name associated with the object
     */
    honorific_suffix: new LitVocabTerm(_NS$1("honorific-suffix"), dataModel, getLocalStore(), false)
        .addLabel("honorific suffix", "en")
        .addComment("The honorific suffix of the name associated with the object", "en"),
    /**
     * The formatted text corresponding to the name of the object
     */
    fn: new LitVocabTerm(_NS$1("fn"), dataModel, getLocalStore(), false)
        .addLabel("formatted name", "en")
        .addComment("The formatted text corresponding to the name of the object", "en"),
    /**
     * To specify a public key or authentication certificate associated with the object
     */
    hasKey: new LitVocabTerm(_NS$1("hasKey"), dataModel, getLocalStore(), false)
        .addLabel("has key", "en")
        .addComment("To specify a public key or authentication certificate associated with the object", "en"),
    /**
     * This object property has been mapped
     */
    key: new LitVocabTerm(_NS$1("key"), dataModel, getLocalStore(), false)
        .addLabel("key", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify a graphic image of a logo associated with the object
     */
    hasLogo: new LitVocabTerm(_NS$1("hasLogo"), dataModel, getLocalStore(), false)
        .addLabel("has logo", "en")
        .addComment("To specify a graphic image of a logo associated with the object ", "en"),
    /**
     * This object property has been mapped
     */
    logo: new LitVocabTerm(_NS$1("logo"), dataModel, getLocalStore(), false)
        .addLabel("logo", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify the components of the name of the object
     */
    hasName: new LitVocabTerm(_NS$1("hasName"), dataModel, getLocalStore(), false)
        .addLabel("has name", "en")
        .addComment("To specify the components of the name of the object", "en"),
    /**
     * This object property has been mapped
     */
    n: new LitVocabTerm(_NS$1("n"), dataModel, getLocalStore(), false)
        .addLabel("name", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify an image or photograph information that annotates some aspect of the object
     */
    hasPhoto: new LitVocabTerm(_NS$1("hasPhoto"), dataModel, getLocalStore(), false)
        .addLabel("has photo", "en")
        .addComment("To specify an image or photograph information that annotates some aspect of the object", "en"),
    /**
     * This object property has been mapped
     */
    photo: new LitVocabTerm(_NS$1("photo"), dataModel, getLocalStore(), false)
        .addLabel("photo", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify a digital sound content information that annotates some aspect of the object
     */
    hasSound: new LitVocabTerm(_NS$1("hasSound"), dataModel, getLocalStore(), false)
        .addLabel("has sound", "en")
        .addComment("To specify a digital sound content information that annotates some aspect of the object", "en"),
    /**
     * This object property has been mapped
     */
    sound: new LitVocabTerm(_NS$1("sound"), dataModel, getLocalStore(), false)
        .addLabel("sound", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify the telephone number for telephony communication with the object
     */
    hasTelephone: new LitVocabTerm(_NS$1("hasTelephone"), dataModel, getLocalStore(), false)
        .addLabel("has telephone", "en")
        .addComment("To specify the telephone number for telephony communication with the object", "en"),
    /**
     * This object property has been mapped
     */
    tel: new LitVocabTerm(_NS$1("tel"), dataModel, getLocalStore(), false)
        .addLabel("telephone", "en")
        .addComment("This object property has been mapped", "en"),
    /**
     * To specify a uniform resource locator associated with the object
     */
    hasURL: new LitVocabTerm(_NS$1("hasURL"), dataModel, getLocalStore(), false)
        .addLabel("has url", "en")
        .addComment("To specify a uniform resource locator associated with the object", "en"),
    /**
     * This object property has been mapped
     */
    url: new LitVocabTerm(_NS$1("url"), dataModel, getLocalStore(), false)
        .addLabel("url", "en")
        .addComment("This object property has been mapped", "en"),
};

var namedNode$3 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$2(localName) {
    return namedNode$3("http://www.w3.org/2006/vcard/ns#" + localName);
}
var VCARD_INRUPT_EXT = {
    PREFIX: "vcard-inrupt-ext",
    NAMESPACE: "http://www.w3.org/2006/vcard/ns#",
    PREFIX_AND_NAMESPACE: { "vcard-inrupt-ext": "http://www.w3.org/2006/vcard/ns#" },
    NS: _NS$2,
    // *******************
    // All the Properties.
    // *******************
    /**
     * To specify the components of the delivery address for the object
     */
    hasAddress: new LitVocabTerm(_NS$2("hasAddress"), dataModel, getLocalStore(), false)
        .addLabel("Address", "en")
        .addLabel("Direcci\u00F3n", "es")
        .addComment("To specify the components of the delivery address for the object", "en"),
    /**
     * To specify the electronic mail address for communication with the object
     */
    hasEmail: new LitVocabTerm(_NS$2("hasEmail"), dataModel, getLocalStore(), false)
        .addLabel("EMail", "en")
        .addLabel("Correo electr\u00F3nico", "es")
        .addComment("To specify the electronic mail address for communication with the object", "en"),
    /**
     * To specify the telephone number for telephony communication with the object
     */
    hasTelephone: new LitVocabTerm(_NS$2("hasTelephone"), dataModel, getLocalStore(), false)
        .addLabel("Telephone", "en")
        .addLabel("Tel\u00E9fono", "es")
        .addComment("To specify the telephone number for telephony communication with the object", "en"),
    /**
     * The formatted text corresponding to the name of the object
     */
    fn: new LitVocabTerm(_NS$2("fn"), dataModel, getLocalStore(), false)
        .addLabel("Name", "en")
        .addLabel("Nombre", "es")
        .addComment("The formatted text corresponding to the name of the object", "en"),
    /**
     * To specify the function or part played in a particular situation by the object
     */
    role: new LitVocabTerm(_NS$2("role"), dataModel, getLocalStore(), false)
        .addLabel("Role", "en")
        .addLabel("Rol", "es")
        .addComment("To specify the function or part played in a particular situation by the object", "en"),
    /**
     * To specify the organizational name associated with the object
     */
    organization_name: new LitVocabTerm(_NS$2("organization-name"), dataModel, getLocalStore(), false)
        .addLabel("Company", "en")
        .addLabel("Compa\u00F1\u00EDa", "es")
        .addComment("To specify the organizational name associated with the object", "en"),
    /**
     * The street address associated with the address of the object
     */
    street_address: new LitVocabTerm(_NS$2("street-address"), dataModel, getLocalStore(), false)
        .addLabel("Direcci\u00F3n", "es")
        .addLabel("Street Address", "en")
        .addComment("The street address associated with the address of the object", "en"),
    /**
     * The locality (e.g. city or town) associated with the address of the object
     */
    locality: new LitVocabTerm(_NS$2("locality"), dataModel, getLocalStore(), false)
        .addLabel("Locality", "en")
        .addLabel("Localidad", "es")
        .addComment("The locality (e.g. city or town) associated with the address of the object", "en"),
    /**
     * The postal code associated with the address of the object
     */
    postal_code: new LitVocabTerm(_NS$2("postal-code"), dataModel, getLocalStore(), false)
        .addLabel("Postal Code", "en")
        .addLabel("C\u00F3digo Postal", "es")
        .addComment("The postal code associated with the address of the object", "en"),
    /**
     * The region (e.g. state or province) associated with the address of the object
     */
    region: new LitVocabTerm(_NS$2("region"), dataModel, getLocalStore(), false)
        .addLabel("Region", "en")
        .addLabel("Regi\u00F3n", "es")
        .addComment("The region (e.g. state or province) associated with the address of the object", "en"),
    /**
     * The country name associated with the address of the object
     */
    country_name: new LitVocabTerm(_NS$2("country-name"), dataModel, getLocalStore(), false)
        .addLabel("Country", "en")
        .addLabel("Pais", "es")
        .addComment("The country name associated with the address of the object", "en"),
};

var namedNode$4 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$3(localName) {
    return namedNode$4("http://www.w3.org/1999/02/22-rdf-syntax-ns#" + localName);
}
var RDF = {
    PREFIX: "rdf",
    NAMESPACE: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    PREFIX_AND_NAMESPACE: { "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#" },
    NS: _NS$3,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The datatype of RDF literals storing fragments of HTML content
     */
    HTML: new LitVocabTerm(_NS$3("HTML"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("HTML")
        .addCommentNoLanguage("The datatype of RDF literals storing fragments of HTML content"),
    /**
     * The datatype of language-tagged string values
     */
    langString: new LitVocabTerm(_NS$3("langString"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("langString")
        .addCommentNoLanguage("The datatype of language-tagged string values"),
    /**
     * The class of plain (i.e. untyped) literal values, as used in RIF and OWL 2
     */
    PlainLiteral: new LitVocabTerm(_NS$3("PlainLiteral"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("PlainLiteral")
        .addCommentNoLanguage("The class of plain (i.e. untyped) literal values, as used in RIF and OWL 2"),
    /**
     * The class of RDF properties.
     */
    Property: new LitVocabTerm(_NS$3("Property"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Property")
        .addCommentNoLanguage("The class of RDF properties."),
    /**
     * The class of RDF statements.
     */
    Statement: new LitVocabTerm(_NS$3("Statement"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Statement")
        .addCommentNoLanguage("The class of RDF statements."),
    /**
     * The class of unordered containers.
     */
    Bag: new LitVocabTerm(_NS$3("Bag"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Bag")
        .addCommentNoLanguage("The class of unordered containers."),
    /**
     * The class of ordered containers.
     */
    Seq: new LitVocabTerm(_NS$3("Seq"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Seq")
        .addCommentNoLanguage("The class of ordered containers."),
    /**
     * The class of containers of alternatives.
     */
    Alt: new LitVocabTerm(_NS$3("Alt"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Alt")
        .addCommentNoLanguage("The class of containers of alternatives."),
    /**
     * The class of RDF Lists.
     */
    List: new LitVocabTerm(_NS$3("List"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("List")
        .addCommentNoLanguage("The class of RDF Lists."),
    /**
     * The datatype of XML literal values.
     */
    XMLLiteral: new LitVocabTerm(_NS$3("XMLLiteral"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("XMLLiteral")
        .addCommentNoLanguage("The datatype of XML literal values."),
    /**
     * The datatype of RDF literals storing JSON content.
     */
    JSON: new LitVocabTerm(_NS$3("JSON"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("JSON")
        .addCommentNoLanguage("The datatype of RDF literals storing JSON content."),
    /**
     * A class representing a compound literal.
     */
    CompoundLiteral: new LitVocabTerm(_NS$3("CompoundLiteral"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("CompoundLiteral")
        .addCommentNoLanguage("A class representing a compound literal."),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The subject is an instance of a class.
     */
    type: new LitVocabTerm(_NS$3("type"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("type")
        .addCommentNoLanguage("The subject is an instance of a class."),
    /**
     * The subject of the subject RDF statement.
     */
    subject: new LitVocabTerm(_NS$3("subject"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("subject")
        .addCommentNoLanguage("The subject of the subject RDF statement."),
    /**
     * The predicate of the subject RDF statement.
     */
    predicate: new LitVocabTerm(_NS$3("predicate"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("predicate")
        .addCommentNoLanguage("The predicate of the subject RDF statement."),
    /**
     * The object of the subject RDF statement.
     */
    object: new LitVocabTerm(_NS$3("object"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("object")
        .addCommentNoLanguage("The object of the subject RDF statement."),
    /**
     * Idiomatic property used for structured values.
     */
    value: new LitVocabTerm(_NS$3("value"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("value")
        .addCommentNoLanguage("Idiomatic property used for structured values."),
    /**
     * The first item in the subject RDF list.
     */
    first: new LitVocabTerm(_NS$3("first"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("first")
        .addCommentNoLanguage("The first item in the subject RDF list."),
    /**
     * The rest of the subject RDF list after the first item.
     */
    rest: new LitVocabTerm(_NS$3("rest"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("rest")
        .addCommentNoLanguage("The rest of the subject RDF list after the first item."),
    /**
     * The language component of a CompoundLiteral.
     */
    language: new LitVocabTerm(_NS$3("language"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("language")
        .addCommentNoLanguage("The language component of a CompoundLiteral."),
    /**
     * The base direction component of a CompoundLiteral.
     */
    direction: new LitVocabTerm(_NS$3("direction"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("direction")
        .addCommentNoLanguage("The base direction component of a CompoundLiteral."),
};

var namedNode$5 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$4(localName) {
    return namedNode$5("http://www.w3.org/1999/02/22-rdf-syntax-ns#" + localName);
}
var RDF_INRUPT_EXT = {
    PREFIX: "rdf-inrupt-ext",
    NAMESPACE: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    PREFIX_AND_NAMESPACE: { "rdf-inrupt-ext": "http://www.w3.org/1999/02/22-rdf-syntax-ns#" },
    NS: _NS$4,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The subject is an instance of a class.
     */
    type: new LitVocabTerm(_NS$4("type"), dataModel, getLocalStore(), false)
        .addLabel("Tipo", "es")
        .addLabelNoLanguage("type")
        .addCommentNoLanguage("The subject is an instance of a class."),
};

var namedNode$6 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$5(localName) {
    return namedNode$6("http://www.w3.org/2000/01/rdf-schema#" + localName);
}
var RDFS = {
    PREFIX: "rdfs",
    NAMESPACE: "http://www.w3.org/2000/01/rdf-schema#",
    PREFIX_AND_NAMESPACE: { "rdfs": "http://www.w3.org/2000/01/rdf-schema#" },
    NS: _NS$5,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class resource, everything.
     */
    Resource: new LitVocabTerm(_NS$5("Resource"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Resource")
        .addCommentNoLanguage("The class resource, everything."),
    /**
     * The class of classes.
     */
    Class: new LitVocabTerm(_NS$5("Class"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Class")
        .addCommentNoLanguage("The class of classes."),
    /**
     * The class of literal values, eg. textual strings and integers.
     */
    Literal: new LitVocabTerm(_NS$5("Literal"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Literal")
        .addCommentNoLanguage("The class of literal values, eg. textual strings and integers."),
    /**
     * The class of RDF containers.
     */
    Container: new LitVocabTerm(_NS$5("Container"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Container")
        .addCommentNoLanguage("The class of RDF containers."),
    /**
     * The class of container membership properties, rdf:_1, rdf:_2, ...,
                      all of which are sub-properties of 'member'.
     */
    ContainerMembershipProperty: new LitVocabTerm(_NS$5("ContainerMembershipProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("ContainerMembershipProperty")
        .addCommentNoLanguage("The class of container membership properties, rdf:_1, rdf:_2, ...,\n                    all of which are sub-properties of 'member'."),
    /**
     * The class of RDF datatypes.
     */
    Datatype: new LitVocabTerm(_NS$5("Datatype"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Datatype")
        .addCommentNoLanguage("The class of RDF datatypes."),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The defininition of the subject resource.
     */
    isDefinedBy: new LitVocabTerm(_NS$5("isDefinedBy"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("isDefinedBy")
        .addCommentNoLanguage("The defininition of the subject resource."),
    /**
     * A human-readable name for the subject.
     */
    label: new LitVocabTerm(_NS$5("label"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("label")
        .addCommentNoLanguage("A human-readable name for the subject."),
    /**
     * A description of the subject resource.
     */
    comment: new LitVocabTerm(_NS$5("comment"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("comment")
        .addCommentNoLanguage("A description of the subject resource."),
    /**
     * The subject is a subclass of a class.
     */
    subClassOf: new LitVocabTerm(_NS$5("subClassOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("subClassOf")
        .addCommentNoLanguage("The subject is a subclass of a class."),
    /**
     * A range of the subject property.
     */
    range: new LitVocabTerm(_NS$5("range"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("range")
        .addCommentNoLanguage("A range of the subject property."),
    /**
     * A domain of the subject property.
     */
    domain: new LitVocabTerm(_NS$5("domain"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("domain")
        .addCommentNoLanguage("A domain of the subject property."),
    /**
     * The subject is a subproperty of a property.
     */
    subPropertyOf: new LitVocabTerm(_NS$5("subPropertyOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("subPropertyOf")
        .addCommentNoLanguage("The subject is a subproperty of a property."),
    /**
     * Further information about the subject resource.
     */
    seeAlso: new LitVocabTerm(_NS$5("seeAlso"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("seeAlso")
        .addCommentNoLanguage("Further information about the subject resource."),
    /**
     * A member of the subject resource.
     */
    member: new LitVocabTerm(_NS$5("member"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("member")
        .addCommentNoLanguage("A member of the subject resource."),
};

var namedNode$7 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  A vocabulary for describing XML Schema datatypes.
 */
function _NS$6(localName) {
    return namedNode$7("http://www.w3.org/2001/XMLSchema#" + localName);
}
var XSD = {
    PREFIX: "xsd",
    NAMESPACE: "http://www.w3.org/2001/XMLSchema#",
    PREFIX_AND_NAMESPACE: { "xsd": "http://www.w3.org/2001/XMLSchema#" },
    NS: _NS$6,
    // *******************
    // All the Properties.
    // *******************
    /**
     * .
     */
    changes: new LitVocabTerm(_NS$6("changes"), dataModel, getLocalStore(), false)
        .addLabel("Changes", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    string: new LitVocabTerm(_NS$6("string"), dataModel, getLocalStore(), false)
        .addLabel("String", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    boolean_: new LitVocabTerm(_NS$6("boolean"), dataModel, getLocalStore(), false)
        .addLabel("Boolean", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    float_: new LitVocabTerm(_NS$6("float"), dataModel, getLocalStore(), false)
        .addLabel("Float", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    double_: new LitVocabTerm(_NS$6("double"), dataModel, getLocalStore(), false)
        .addLabel("Double", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    decimal: new LitVocabTerm(_NS$6("decimal"), dataModel, getLocalStore(), false)
        .addLabel("Decimal", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    dateTime: new LitVocabTerm(_NS$6("dateTime"), dataModel, getLocalStore(), false)
        .addLabel("Date and time", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    duration: new LitVocabTerm(_NS$6("duration"), dataModel, getLocalStore(), false)
        .addLabel("Duration", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    hexBinary: new LitVocabTerm(_NS$6("hexBinary"), dataModel, getLocalStore(), false)
        .addLabel("Hexadecimal binary", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    base64Binary: new LitVocabTerm(_NS$6("base64Binary"), dataModel, getLocalStore(), false)
        .addLabel("Base64 binary", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    anyURI: new LitVocabTerm(_NS$6("anyURI"), dataModel, getLocalStore(), false)
        .addLabel("URI", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    ID: new LitVocabTerm(_NS$6("ID"), dataModel, getLocalStore(), false)
        .addLabel("ID", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    IDREF: new LitVocabTerm(_NS$6("IDREF"), dataModel, getLocalStore(), false)
        .addLabel("ID reference", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    ENTITY: new LitVocabTerm(_NS$6("ENTITY"), dataModel, getLocalStore(), false)
        .addLabel("ENTITY", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    NOTATION: new LitVocabTerm(_NS$6("NOTATION"), dataModel, getLocalStore(), false)
        .addLabel("NOTATION", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    normalizedString: new LitVocabTerm(_NS$6("normalizedString"), dataModel, getLocalStore(), false)
        .addLabel("Normalized string", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    token: new LitVocabTerm(_NS$6("token"), dataModel, getLocalStore(), false)
        .addLabel("Token", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    language: new LitVocabTerm(_NS$6("language"), dataModel, getLocalStore(), false)
        .addLabel("Language", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    IDREFS: new LitVocabTerm(_NS$6("IDREFS"), dataModel, getLocalStore(), false)
        .addLabel("IDREFS", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    ENTITIES: new LitVocabTerm(_NS$6("ENTITIES"), dataModel, getLocalStore(), false)
        .addLabel("ENTITIES", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    NMTOKEN: new LitVocabTerm(_NS$6("NMTOKEN"), dataModel, getLocalStore(), false)
        .addLabel("NMTOKEN", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    NMTOKENS: new LitVocabTerm(_NS$6("NMTOKENS"), dataModel, getLocalStore(), false)
        .addLabel("NMTOKENS", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    Name: new LitVocabTerm(_NS$6("Name"), dataModel, getLocalStore(), false)
        .addLabel("Name", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    QName: new LitVocabTerm(_NS$6("QName"), dataModel, getLocalStore(), false)
        .addLabel("QName", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    NCName: new LitVocabTerm(_NS$6("NCName"), dataModel, getLocalStore(), false)
        .addLabel("NCName", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    integer: new LitVocabTerm(_NS$6("integer"), dataModel, getLocalStore(), false)
        .addLabel("Integer", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    nonNegativeInteger: new LitVocabTerm(_NS$6("nonNegativeInteger"), dataModel, getLocalStore(), false)
        .addLabel("Non-negative integer", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    positiveInteger: new LitVocabTerm(_NS$6("positiveInteger"), dataModel, getLocalStore(), false)
        .addLabel("Positive integer", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    nonPositiveInteger: new LitVocabTerm(_NS$6("nonPositiveInteger"), dataModel, getLocalStore(), false)
        .addLabel("Non-positive integer", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    negativeInteger: new LitVocabTerm(_NS$6("negativeInteger"), dataModel, getLocalStore(), false)
        .addLabel("Negative integer", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    byte_: new LitVocabTerm(_NS$6("byte"), dataModel, getLocalStore(), false)
        .addLabel("Byte", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    int_: new LitVocabTerm(_NS$6("int"), dataModel, getLocalStore(), false)
        .addLabel("Int", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    long_: new LitVocabTerm(_NS$6("long"), dataModel, getLocalStore(), false)
        .addLabel("Long", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    short_: new LitVocabTerm(_NS$6("short"), dataModel, getLocalStore(), false)
        .addLabel("Short", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    unsignedByte: new LitVocabTerm(_NS$6("unsignedByte"), dataModel, getLocalStore(), false)
        .addLabel("Unsigned byte", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    unsignedInt: new LitVocabTerm(_NS$6("unsignedInt"), dataModel, getLocalStore(), false)
        .addLabel("Unsigned int", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    unsignedLong: new LitVocabTerm(_NS$6("unsignedLong"), dataModel, getLocalStore(), false)
        .addLabel("Unsigned long", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    unsignedShort: new LitVocabTerm(_NS$6("unsignedShort"), dataModel, getLocalStore(), false)
        .addLabel("Unsigned short", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    date: new LitVocabTerm(_NS$6("date"), dataModel, getLocalStore(), false)
        .addLabel("Date", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    time: new LitVocabTerm(_NS$6("time"), dataModel, getLocalStore(), false)
        .addLabel("Time", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    gYearMonth: new LitVocabTerm(_NS$6("gYearMonth"), dataModel, getLocalStore(), false)
        .addLabel("Year month", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    gYear: new LitVocabTerm(_NS$6("gYear"), dataModel, getLocalStore(), false)
        .addLabel("Year", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    gMonthDay: new LitVocabTerm(_NS$6("gMonthDay"), dataModel, getLocalStore(), false)
        .addLabel("Month day", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    gDay: new LitVocabTerm(_NS$6("gDay"), dataModel, getLocalStore(), false)
        .addLabel("Day", "en")
        .addComment(".", "en"),
    /**
     * .
     */
    gMonth: new LitVocabTerm(_NS$6("gMonth"), dataModel, getLocalStore(), false)
        .addLabel("Month", "en")
        .addComment(".", "en"),
};

var namedNode$8 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$7(localName) {
    return namedNode$8("http://www.w3.org/2002/07/owl#" + localName);
}
var OWL = {
    PREFIX: "owl",
    NAMESPACE: "http://www.w3.org/2002/07/owl#",
    PREFIX_AND_NAMESPACE: { "owl": "http://www.w3.org/2002/07/owl#" },
    NS: _NS$7,
    // *****************
    // All the Classes.
    // *****************
    /**
     * The class of ontologies.
     */
    Ontology: new LitVocabTerm(_NS$7("Ontology"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Ontology")
        .addCommentNoLanguage("The class of ontologies."),
    /**
     * The class of collections of pairwise different individuals.
     */
    AllDifferent: new LitVocabTerm(_NS$7("AllDifferent"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("AllDifferent")
        .addCommentNoLanguage("The class of collections of pairwise different individuals."),
    /**
     * The class of collections of pairwise disjoint classes.
     */
    AllDisjointClasses: new LitVocabTerm(_NS$7("AllDisjointClasses"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("AllDisjointClasses")
        .addCommentNoLanguage("The class of collections of pairwise disjoint classes."),
    /**
     * The class of collections of pairwise disjoint properties.
     */
    AllDisjointProperties: new LitVocabTerm(_NS$7("AllDisjointProperties"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("AllDisjointProperties")
        .addCommentNoLanguage("The class of collections of pairwise disjoint properties."),
    /**
     * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
     */
    Annotation: new LitVocabTerm(_NS$7("Annotation"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Annotation")
        .addCommentNoLanguage("The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object."),
    /**
     * The class of annotation properties.
     */
    AnnotationProperty: new LitVocabTerm(_NS$7("AnnotationProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("AnnotationProperty")
        .addCommentNoLanguage("The class of annotation properties."),
    /**
     * The class of asymmetric properties.
     */
    AsymmetricProperty: new LitVocabTerm(_NS$7("AsymmetricProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("AsymmetricProperty")
        .addCommentNoLanguage("The class of asymmetric properties."),
    /**
     * The class of object properties.
     */
    ObjectProperty: new LitVocabTerm(_NS$7("ObjectProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("ObjectProperty")
        .addCommentNoLanguage("The class of object properties."),
    /**
     * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
     */
    Axiom: new LitVocabTerm(_NS$7("Axiom"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Axiom")
        .addCommentNoLanguage("The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object."),
    /**
     * The class of OWL classes.
     */
    Class: new LitVocabTerm(_NS$7("Class"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Class")
        .addCommentNoLanguage("The class of OWL classes."),
    /**
     * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
     */
    DataRange: new LitVocabTerm(_NS$7("DataRange"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("DataRange")
        .addCommentNoLanguage("The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead."),
    /**
     * The class of data properties.
     */
    DatatypeProperty: new LitVocabTerm(_NS$7("DatatypeProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("DatatypeProperty")
        .addCommentNoLanguage("The class of data properties."),
    /**
     * The class of deprecated classes.
     */
    DeprecatedClass: new LitVocabTerm(_NS$7("DeprecatedClass"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("DeprecatedClass")
        .addCommentNoLanguage("The class of deprecated classes."),
    /**
     * The class of deprecated properties.
     */
    DeprecatedProperty: new LitVocabTerm(_NS$7("DeprecatedProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("DeprecatedProperty")
        .addCommentNoLanguage("The class of deprecated properties."),
    /**
     * The class of functional properties.
     */
    FunctionalProperty: new LitVocabTerm(_NS$7("FunctionalProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("FunctionalProperty")
        .addCommentNoLanguage("The class of functional properties."),
    /**
     * The class of inverse-functional properties.
     */
    InverseFunctionalProperty: new LitVocabTerm(_NS$7("InverseFunctionalProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("InverseFunctionalProperty")
        .addCommentNoLanguage("The class of inverse-functional properties."),
    /**
     * The class of irreflexive properties.
     */
    IrreflexiveProperty: new LitVocabTerm(_NS$7("IrreflexiveProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("IrreflexiveProperty")
        .addCommentNoLanguage("The class of irreflexive properties."),
    /**
     * The class of named individuals.
     */
    NamedIndividual: new LitVocabTerm(_NS$7("NamedIndividual"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("NamedIndividual")
        .addCommentNoLanguage("The class of named individuals."),
    /**
     * The class of OWL individuals.
     */
    Thing: new LitVocabTerm(_NS$7("Thing"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Thing")
        .addCommentNoLanguage("The class of OWL individuals."),
    /**
     * The class of negative property assertions.
     */
    NegativePropertyAssertion: new LitVocabTerm(_NS$7("NegativePropertyAssertion"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("NegativePropertyAssertion")
        .addCommentNoLanguage("The class of negative property assertions."),
    /**
     * This is the empty class.
     */
    Nothing: new LitVocabTerm(_NS$7("Nothing"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Nothing")
        .addCommentNoLanguage("This is the empty class."),
    /**
     * The class of ontology properties.
     */
    OntologyProperty: new LitVocabTerm(_NS$7("OntologyProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("OntologyProperty")
        .addCommentNoLanguage("The class of ontology properties."),
    /**
     * The class of reflexive properties.
     */
    ReflexiveProperty: new LitVocabTerm(_NS$7("ReflexiveProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("ReflexiveProperty")
        .addCommentNoLanguage("The class of reflexive properties."),
    /**
     * The class of property restrictions.
     */
    Restriction: new LitVocabTerm(_NS$7("Restriction"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Restriction")
        .addCommentNoLanguage("The class of property restrictions."),
    /**
     * The class of symmetric properties.
     */
    SymmetricProperty: new LitVocabTerm(_NS$7("SymmetricProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("SymmetricProperty")
        .addCommentNoLanguage("The class of symmetric properties."),
    /**
     * The class of transitive properties.
     */
    TransitiveProperty: new LitVocabTerm(_NS$7("TransitiveProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("TransitiveProperty")
        .addCommentNoLanguage("The class of transitive properties."),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The annotation property that provides version information for an ontology or another OWL construct.
     */
    versionInfo: new LitVocabTerm(_NS$7("versionInfo"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("versionInfo")
        .addCommentNoLanguage("The annotation property that provides version information for an ontology or another OWL construct."),
    /**
     * The property that determines the class that a universal property restriction refers to.
     */
    allValuesFrom: new LitVocabTerm(_NS$7("allValuesFrom"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("allValuesFrom")
        .addCommentNoLanguage("The property that determines the class that a universal property restriction refers to."),
    /**
     * The property that determines the predicate of an annotated axiom or annotated annotation.
     */
    annotatedProperty: new LitVocabTerm(_NS$7("annotatedProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("annotatedProperty")
        .addCommentNoLanguage("The property that determines the predicate of an annotated axiom or annotated annotation."),
    /**
     * The property that determines the subject of an annotated axiom or annotated annotation.
     */
    annotatedSource: new LitVocabTerm(_NS$7("annotatedSource"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("annotatedSource")
        .addCommentNoLanguage("The property that determines the subject of an annotated axiom or annotated annotation."),
    /**
     * The property that determines the object of an annotated axiom or annotated annotation.
     */
    annotatedTarget: new LitVocabTerm(_NS$7("annotatedTarget"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("annotatedTarget")
        .addCommentNoLanguage("The property that determines the object of an annotated axiom or annotated annotation."),
    /**
     * The property that determines the predicate of a negative property assertion.
     */
    assertionProperty: new LitVocabTerm(_NS$7("assertionProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("assertionProperty")
        .addCommentNoLanguage("The property that determines the predicate of a negative property assertion."),
    /**
     * The annotation property that indicates that a given ontology is backward compatible with another ontology.
     */
    backwardCompatibleWith: new LitVocabTerm(_NS$7("backwardCompatibleWith"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("backwardCompatibleWith")
        .addCommentNoLanguage("The annotation property that indicates that a given ontology is backward compatible with another ontology."),
    /**
     * The data property that does not relate any individual to any data value.
     */
    bottomDataProperty: new LitVocabTerm(_NS$7("bottomDataProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("bottomDataProperty")
        .addCommentNoLanguage("The data property that does not relate any individual to any data value."),
    /**
     * The object property that does not relate any two individuals.
     */
    bottomObjectProperty: new LitVocabTerm(_NS$7("bottomObjectProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("bottomObjectProperty")
        .addCommentNoLanguage("The object property that does not relate any two individuals."),
    /**
     * The property that determines the cardinality of an exact cardinality restriction.
     */
    cardinality: new LitVocabTerm(_NS$7("cardinality"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("cardinality")
        .addCommentNoLanguage("The property that determines the cardinality of an exact cardinality restriction."),
    /**
     * The property that determines that a given class is the complement of another class.
     */
    complementOf: new LitVocabTerm(_NS$7("complementOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("complementOf")
        .addCommentNoLanguage("The property that determines that a given class is the complement of another class."),
    /**
     * The property that determines that a given data range is the complement of another data range with respect to the data domain.
     */
    datatypeComplementOf: new LitVocabTerm(_NS$7("datatypeComplementOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("datatypeComplementOf")
        .addCommentNoLanguage("The property that determines that a given data range is the complement of another data range with respect to the data domain."),
    /**
     * The annotation property that indicates that a given entity has been deprecated.
     */
    deprecated: new LitVocabTerm(_NS$7("deprecated"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("deprecated")
        .addCommentNoLanguage("The annotation property that indicates that a given entity has been deprecated."),
    /**
     * The property that determines that two given individuals are different.
     */
    differentFrom: new LitVocabTerm(_NS$7("differentFrom"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("differentFrom")
        .addCommentNoLanguage("The property that determines that two given individuals are different."),
    /**
     * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
     */
    disjointUnionOf: new LitVocabTerm(_NS$7("disjointUnionOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("disjointUnionOf")
        .addCommentNoLanguage("The property that determines that a given class is equivalent to the disjoint union of a collection of other classes."),
    /**
     * The property that determines that two given classes are disjoint.
     */
    disjointWith: new LitVocabTerm(_NS$7("disjointWith"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("disjointWith")
        .addCommentNoLanguage("The property that determines that two given classes are disjoint."),
    /**
     * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
     */
    distinctMembers: new LitVocabTerm(_NS$7("distinctMembers"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("distinctMembers")
        .addCommentNoLanguage("The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom."),
    /**
     * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
     */
    equivalentClass: new LitVocabTerm(_NS$7("equivalentClass"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("equivalentClass")
        .addCommentNoLanguage("The property that determines that two given classes are equivalent, and that is used to specify datatype definitions."),
    /**
     * The property that determines that two given properties are equivalent.
     */
    equivalentProperty: new LitVocabTerm(_NS$7("equivalentProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("equivalentProperty")
        .addCommentNoLanguage("The property that determines that two given properties are equivalent."),
    /**
     * The property that determines the collection of properties that jointly build a key.
     */
    hasKey: new LitVocabTerm(_NS$7("hasKey"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("hasKey")
        .addCommentNoLanguage("The property that determines the collection of properties that jointly build a key."),
    /**
     * The property that determines the property that a self restriction refers to.
     */
    hasSelf: new LitVocabTerm(_NS$7("hasSelf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("hasSelf")
        .addCommentNoLanguage("The property that determines the property that a self restriction refers to."),
    /**
     * The property that determines the individual that a has-value restriction refers to.
     */
    hasValue: new LitVocabTerm(_NS$7("hasValue"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("hasValue")
        .addCommentNoLanguage("The property that determines the individual that a has-value restriction refers to."),
    /**
     * The annotation property that indicates that a given ontology is incompatible with another ontology.
     */
    incompatibleWith: new LitVocabTerm(_NS$7("incompatibleWith"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("incompatibleWith")
        .addCommentNoLanguage("The annotation property that indicates that a given ontology is incompatible with another ontology."),
    /**
     * The property that determines the collection of classes or data ranges that build an intersection.
     */
    intersectionOf: new LitVocabTerm(_NS$7("intersectionOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("intersectionOf")
        .addCommentNoLanguage("The property that determines the collection of classes or data ranges that build an intersection."),
    /**
     * The property that determines that two given properties are inverse.
     */
    inverseOf: new LitVocabTerm(_NS$7("inverseOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("inverseOf")
        .addCommentNoLanguage("The property that determines that two given properties are inverse."),
    /**
     * The property that determines the cardinality of a maximum cardinality restriction.
     */
    maxCardinality: new LitVocabTerm(_NS$7("maxCardinality"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("maxCardinality")
        .addCommentNoLanguage("The property that determines the cardinality of a maximum cardinality restriction."),
    /**
     * The property that determines the cardinality of a maximum qualified cardinality restriction.
     */
    maxQualifiedCardinality: new LitVocabTerm(_NS$7("maxQualifiedCardinality"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("maxQualifiedCardinality")
        .addCommentNoLanguage("The property that determines the cardinality of a maximum qualified cardinality restriction."),
    /**
     * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
     */
    members: new LitVocabTerm(_NS$7("members"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("members")
        .addCommentNoLanguage("The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom."),
    /**
     * The property that determines the cardinality of a minimum cardinality restriction.
     */
    minCardinality: new LitVocabTerm(_NS$7("minCardinality"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("minCardinality")
        .addCommentNoLanguage("The property that determines the cardinality of a minimum cardinality restriction."),
    /**
     * The property that determines the cardinality of a minimum qualified cardinality restriction.
     */
    minQualifiedCardinality: new LitVocabTerm(_NS$7("minQualifiedCardinality"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("minQualifiedCardinality")
        .addCommentNoLanguage("The property that determines the cardinality of a minimum qualified cardinality restriction."),
    /**
     * The property that determines the class that a qualified object cardinality restriction refers to.
     */
    onClass: new LitVocabTerm(_NS$7("onClass"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("onClass")
        .addCommentNoLanguage("The property that determines the class that a qualified object cardinality restriction refers to."),
    /**
     * The property that determines the data range that a qualified data cardinality restriction refers to.
     */
    onDataRange: new LitVocabTerm(_NS$7("onDataRange"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("onDataRange")
        .addCommentNoLanguage("The property that determines the data range that a qualified data cardinality restriction refers to."),
    /**
     * The property that determines the datatype that a datatype restriction refers to.
     */
    onDatatype: new LitVocabTerm(_NS$7("onDatatype"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("onDatatype")
        .addCommentNoLanguage("The property that determines the datatype that a datatype restriction refers to."),
    /**
     * The property that determines the collection of individuals or data values that build an enumeration.
     */
    oneOf: new LitVocabTerm(_NS$7("oneOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("oneOf")
        .addCommentNoLanguage("The property that determines the collection of individuals or data values that build an enumeration."),
    /**
     * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
     */
    onProperties: new LitVocabTerm(_NS$7("onProperties"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("onProperties")
        .addCommentNoLanguage("The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to."),
    /**
     * The property that determines the property that a property restriction refers to.
     */
    onProperty: new LitVocabTerm(_NS$7("onProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("onProperty")
        .addCommentNoLanguage("The property that determines the property that a property restriction refers to."),
    /**
     * The annotation property that indicates the predecessor ontology of a given ontology.
     */
    priorVersion: new LitVocabTerm(_NS$7("priorVersion"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("priorVersion")
        .addCommentNoLanguage("The annotation property that indicates the predecessor ontology of a given ontology."),
    /**
     * The property that determines the n-tuple of properties that build a sub property chain of a given property.
     */
    propertyChainAxiom: new LitVocabTerm(_NS$7("propertyChainAxiom"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("propertyChainAxiom")
        .addCommentNoLanguage("The property that determines the n-tuple of properties that build a sub property chain of a given property."),
    /**
     * The property that determines that two given properties are disjoint.
     */
    propertyDisjointWith: new LitVocabTerm(_NS$7("propertyDisjointWith"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("propertyDisjointWith")
        .addCommentNoLanguage("The property that determines that two given properties are disjoint."),
    /**
     * The property that determines the cardinality of an exact qualified cardinality restriction.
     */
    qualifiedCardinality: new LitVocabTerm(_NS$7("qualifiedCardinality"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("qualifiedCardinality")
        .addCommentNoLanguage("The property that determines the cardinality of an exact qualified cardinality restriction."),
    /**
     * The property that determines that two given individuals are equal.
     */
    sameAs: new LitVocabTerm(_NS$7("sameAs"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("sameAs")
        .addCommentNoLanguage("The property that determines that two given individuals are equal."),
    /**
     * The property that determines the class that an existential property restriction refers to.
     */
    someValuesFrom: new LitVocabTerm(_NS$7("someValuesFrom"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("someValuesFrom")
        .addCommentNoLanguage("The property that determines the class that an existential property restriction refers to."),
    /**
     * The property that determines the subject of a negative property assertion.
     */
    sourceIndividual: new LitVocabTerm(_NS$7("sourceIndividual"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("sourceIndividual")
        .addCommentNoLanguage("The property that determines the subject of a negative property assertion."),
    /**
     * The property that determines the object of a negative object property assertion.
     */
    targetIndividual: new LitVocabTerm(_NS$7("targetIndividual"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("targetIndividual")
        .addCommentNoLanguage("The property that determines the object of a negative object property assertion."),
    /**
     * The property that determines the value of a negative data property assertion.
     */
    targetValue: new LitVocabTerm(_NS$7("targetValue"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("targetValue")
        .addCommentNoLanguage("The property that determines the value of a negative data property assertion."),
    /**
     * The data property that relates every individual to every data value.
     */
    topDataProperty: new LitVocabTerm(_NS$7("topDataProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("topDataProperty")
        .addCommentNoLanguage("The data property that relates every individual to every data value."),
    /**
     * The object property that relates every two individuals.
     */
    topObjectProperty: new LitVocabTerm(_NS$7("topObjectProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("topObjectProperty")
        .addCommentNoLanguage("The object property that relates every two individuals."),
    /**
     * The property that determines the collection of classes or data ranges that build a union.
     */
    unionOf: new LitVocabTerm(_NS$7("unionOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("unionOf")
        .addCommentNoLanguage("The property that determines the collection of classes or data ranges that build a union."),
    /**
     * The property that determines the collection of facet-value pairs that define a datatype restriction.
     */
    withRestrictions: new LitVocabTerm(_NS$7("withRestrictions"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("withRestrictions")
        .addCommentNoLanguage("The property that determines the collection of facet-value pairs that define a datatype restriction."),
};

var namedNode$9 = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */
function _NS$8(localName) {
    return namedNode$9("http://www.w3.org/ns/ldp#" + localName);
}
var LDP = {
    PREFIX: "ldp",
    NAMESPACE: "http://www.w3.org/ns/ldp#",
    PREFIX_AND_NAMESPACE: { "ldp": "http://www.w3.org/ns/ldp#" },
    NS: _NS$8,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
     */
    Resource: new LitVocabTerm(_NS$8("Resource"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Resource")
        .addCommentNoLanguage("A HTTP-addressable resource whose lifecycle is managed by a LDP server."),
    /**
     * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
     */
    RDFSource: new LitVocabTerm(_NS$8("RDFSource"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("RDFSource")
        .addCommentNoLanguage("A Linked Data Platform Resource (LDPR) whose state is represented as RDF."),
    /**
     * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
     */
    NonRDFSource: new LitVocabTerm(_NS$8("NonRDFSource"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("NonRDFSource")
        .addCommentNoLanguage("A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF."),
    /**
     * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
     */
    Container: new LitVocabTerm(_NS$8("Container"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Container")
        .addCommentNoLanguage("A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it."),
    /**
     * An LDPC that uses a predefined predicate to simply link to its contained resources.
     */
    BasicContainer: new LitVocabTerm(_NS$8("BasicContainer"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("BasicContainer")
        .addCommentNoLanguage("An LDPC that uses a predefined predicate to simply link to its contained resources."),
    /**
     * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
     */
    DirectContainer: new LitVocabTerm(_NS$8("DirectContainer"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("DirectContainer")
        .addCommentNoLanguage("An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created."),
    /**
     * An LDPC that has the flexibility of choosing what form the membership triples take.
     */
    IndirectContainer: new LitVocabTerm(_NS$8("IndirectContainer"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("IndirectContainer")
        .addCommentNoLanguage("An LDPC that has the flexibility of choosing what form the membership triples take."),
    /**
     * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
     */
    Page: new LitVocabTerm(_NS$8("Page"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Page")
        .addCommentNoLanguage("URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers."),
    /**
     * Element in the list of sorting criteria used by the server to assign container members to pages.
     */
    PageSortCriterion: new LitVocabTerm(_NS$8("PageSortCriterion"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("PageSortCriterion")
        .addCommentNoLanguage("Element in the list of sorting criteria used by the server to assign container members to pages."),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
     */
    hasMemberRelation: new LitVocabTerm(_NS$8("hasMemberRelation"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("hasMemberRelation")
        .addCommentNoLanguage("Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >."),
    /**
     * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
     */
    isMemberOfRelation: new LitVocabTerm(_NS$8("isMemberOfRelation"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("isMemmberOfRelation")
        .addCommentNoLanguage("Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >."),
    /**
     * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
     */
    membershipResource: new LitVocabTerm(_NS$8("membershipResource"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("membershipResource")
        .addCommentNoLanguage("Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples."),
    /**
     * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
     */
    insertedContentRelation: new LitVocabTerm(_NS$8("insertedContentRelation"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("insertedContentRelation")
        .addCommentNoLanguage("Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful."),
    /**
     * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
     */
    member: new LitVocabTerm(_NS$8("member"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("member")
        .addCommentNoLanguage("LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use."),
    /**
     * Links a container with resources created through the container.
     */
    contains: new LitVocabTerm(_NS$8("contains"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("contains")
        .addCommentNoLanguage("Links a container with resources created through the container."),
    /**
     * Links a resource with constraints that the server requires requests like creation and update to conform to.
     */
    constrainedBy: new LitVocabTerm(_NS$8("constrainedBy"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("constrainedBy")
        .addCommentNoLanguage("Links a resource with constraints that the server requires requests like creation and update to conform to."),
    /**
     * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
     */
    pageSortCriteria: new LitVocabTerm(_NS$8("pageSortCriteria"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("pageSortCriteria")
        .addCommentNoLanguage("Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter."),
    /**
     * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
     */
    pageSortPredicate: new LitVocabTerm(_NS$8("pageSortPredicate"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("pageSortPredicate")
        .addCommentNoLanguage("Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page."),
    /**
     * The ascending/descending/etc order used to order the members across pages in a page sequence.
     */
    pageSortOrder: new LitVocabTerm(_NS$8("pageSortOrder"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("pageSortOrder")
        .addCommentNoLanguage("The ascending/descending/etc order used to order the members across pages in a page sequence."),
    /**
     * The collation used to order the members across pages in a page sequence when comparing strings.
     */
    pageSortCollation: new LitVocabTerm(_NS$8("pageSortCollation"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("pageSortCollation")
        .addCommentNoLanguage("The collation used to order the members across pages in a page sequence when comparing strings."),
    /**
     * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
     */
    pageSequence: new LitVocabTerm(_NS$8("pageSequence"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Page")
        .addCommentNoLanguage("Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages."),
    /**
     * Links a resource to a container where notifications for the resource can be created and discovered.
     */
    inbox: new LitVocabTerm(_NS$8("inbox"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("inbox")
        .addCommentNoLanguage("Links a resource to a container where notifications for the resource can be created and discovered."),
};

var namedNode$a = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$9(localName) {
    return namedNode$a("http://www.w3.org/2011/http#" + localName);
}
var HTTP = {
    PREFIX: "http",
    NAMESPACE: "http://www.w3.org/2011/http#",
    PREFIX_AND_NAMESPACE: { "http": "http://www.w3.org/2011/http#" },
    NS: _NS$9,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A connection used for HTTP transfer.
     */
    Connection: new LitVocabTerm(_NS$9("Connection"), dataModel, getLocalStore(), false)
        .addLabel("Connection", "en")
        .addComment("A connection used for HTTP transfer.", "en"),
    /**
     * An entity header in an HTTP message.
     */
    EntityHeader: new LitVocabTerm(_NS$9("EntityHeader"), dataModel, getLocalStore(), false)
        .addLabel("Entity Header", "en")
        .addComment("An entity header in an HTTP message.", "en"),
    /**
     * A header in an HTTP message.
     */
    MessageHeader: new LitVocabTerm(_NS$9("MessageHeader"), dataModel, getLocalStore(), false)
        .addLabel("Message Header", "en")
        .addComment("A header in an HTTP message.", "en"),
    /**
     * A general header in an HTTP message.
     */
    GeneralHeader: new LitVocabTerm(_NS$9("GeneralHeader"), dataModel, getLocalStore(), false)
        .addLabel("General Header", "en")
        .addComment("A general header in an HTTP message.", "en"),
    /**
     * A part of a deconstructed header value.
     */
    HeaderElement: new LitVocabTerm(_NS$9("HeaderElement"), dataModel, getLocalStore(), false)
        .addLabel("Header Element", "en")
        .addComment("A part of a deconstructed header value.", "en"),
    /**
     * A header name.
     */
    HeaderName: new LitVocabTerm(_NS$9("HeaderName"), dataModel, getLocalStore(), false)
        .addLabel("Header Name", "en")
        .addComment("A header name.", "en"),
    /**
     * An HTTP message.
     */
    Message: new LitVocabTerm(_NS$9("Message"), dataModel, getLocalStore(), false)
        .addLabel("Message", "en")
        .addComment("An HTTP message.", "en"),
    /**
     * The HTTP method used for the request.
     */
    Method: new LitVocabTerm(_NS$9("Method"), dataModel, getLocalStore(), false)
        .addLabel("Method", "en")
        .addComment("The HTTP method used for the request.", "en"),
    /**
     * A parameter for a part of a header value.
     */
    Parameter: new LitVocabTerm(_NS$9("Parameter"), dataModel, getLocalStore(), false)
        .addLabel("Parameter", "en")
        .addComment("A parameter for a part of a header value.", "en"),
    /**
     * An HTTP request.
     */
    Request: new LitVocabTerm(_NS$9("Request"), dataModel, getLocalStore(), false)
        .addLabel("Request", "en")
        .addComment("An HTTP request.", "en"),
    /**
     * A header in an HTTP request message.
     */
    RequestHeader: new LitVocabTerm(_NS$9("RequestHeader"), dataModel, getLocalStore(), false)
        .addLabel("Request Header", "en")
        .addComment("A header in an HTTP request message.", "en"),
    /**
     * An HTTP response.
     */
    Response: new LitVocabTerm(_NS$9("Response"), dataModel, getLocalStore(), false)
        .addLabel("Response", "en")
        .addComment("An HTTP response.", "en"),
    /**
     * A header in an HTTP response message.
     */
    ResponseHeader: new LitVocabTerm(_NS$9("ResponseHeader"), dataModel, getLocalStore(), false)
        .addLabel("Response Header", "en")
        .addComment("A header in an HTTP response message.", "en"),
    /**
     * The status code of an HTTP response.
     */
    StatusCode: new LitVocabTerm(_NS$9("StatusCode"), dataModel, getLocalStore(), false)
        .addLabel("Status code", "en")
        .addComment("The status code of an HTTP response.", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The absolute request URI.
     */
    absoluteURI: new LitVocabTerm(_NS$9("absoluteURI"), dataModel, getLocalStore(), false)
        .addLabel("Absolute URI", "en")
        .addComment("The absolute request URI.", "en"),
    /**
     * The request URI of an HTTP request.
     */
    requestURI: new LitVocabTerm(_NS$9("requestURI"), dataModel, getLocalStore(), false)
        .addLabel("Request URI", "en")
        .addComment("The request URI of an HTTP request.", "en"),
    /**
     * The absolute path sort of request URI.
     */
    absolutePath: new LitVocabTerm(_NS$9("absolutePath"), dataModel, getLocalStore(), false)
        .addLabel("Absolute path", "en")
        .addComment("The absolute path sort of request URI.", "en"),
    /**
     * The authority sort of request URI.
     */
    authority: new LitVocabTerm(_NS$9("authority"), dataModel, getLocalStore(), false)
        .addLabel("Authority", "en")
        .addComment("The authority sort of request URI.", "en"),
    /**
     * The entity body of an HTTP message.
     */
    body: new LitVocabTerm(_NS$9("body"), dataModel, getLocalStore(), false)
        .addLabel("Entity Body", "en")
        .addComment("The entity body of an HTTP message.", "en"),
    /**
     * The authority of a connection used for the HTTP transfer.
     */
    connectionAuthority: new LitVocabTerm(_NS$9("connectionAuthority"), dataModel, getLocalStore(), false)
        .addLabel("Connection authority", "en")
        .addComment("The authority of a connection used for the HTTP transfer.", "en"),
    /**
     * The name of a header element.
     */
    elementName: new LitVocabTerm(_NS$9("elementName"), dataModel, getLocalStore(), false)
        .addLabel("Header element name", "en")
        .addComment("The name of a header element.", "en"),
    /**
     * The value of a header element.
     */
    elementValue: new LitVocabTerm(_NS$9("elementValue"), dataModel, getLocalStore(), false)
        .addLabel("Header element value", "en")
        .addComment("The value of a header element.", "en"),
    /**
     * The name of an HTTP header field.
     */
    fieldName: new LitVocabTerm(_NS$9("fieldName"), dataModel, getLocalStore(), false)
        .addLabel("Field name", "en")
        .addComment("The name of an HTTP header field.", "en"),
    /**
     * The value of an HTTP header field.
     */
    fieldValue: new LitVocabTerm(_NS$9("fieldValue"), dataModel, getLocalStore(), false)
        .addLabel("Field value", "en")
        .addComment("The value of an HTTP header field.", "en"),
    /**
     * The deconstructed parts of an HTTP header value.
     */
    headerElements: new LitVocabTerm(_NS$9("headerElements"), dataModel, getLocalStore(), false)
        .addLabel("Header elements", "en")
        .addComment("The deconstructed parts of an HTTP header value.", "en"),
    /**
     * The name of an HTTP header.
     */
    hdrName: new LitVocabTerm(_NS$9("hdrName"), dataModel, getLocalStore(), false)
        .addLabel("Header name", "en")
        .addComment("The name of an HTTP header.", "en"),
    /**
     * The headers in an HTTP message.
     */
    headers: new LitVocabTerm(_NS$9("headers"), dataModel, getLocalStore(), false)
        .addLabel("Headers", "en")
        .addComment("The headers in an HTTP message.", "en"),
    /**
     * The HTTP version of an HTTP message.
     */
    httpVersion: new LitVocabTerm(_NS$9("httpVersion"), dataModel, getLocalStore(), false)
        .addLabel("HTTP version", "en")
        .addComment("The HTTP version of an HTTP message.", "en"),
    /**
     * The HTTP method used for the HTTP request.
     */
    mthd: new LitVocabTerm(_NS$9("mthd"), dataModel, getLocalStore(), false)
        .addLabel("Method", "en")
        .addComment("The HTTP method used for the HTTP request.", "en"),
    /**
     * The HTTP method name used for the HTTP request.
     */
    methodName: new LitVocabTerm(_NS$9("methodName"), dataModel, getLocalStore(), false)
        .addLabel("Method name", "en")
        .addComment("The HTTP method name used for the HTTP request.", "en"),
    /**
     * The name of a parameter in a part of a deconstructed HTTP header value.
     */
    paramName: new LitVocabTerm(_NS$9("paramName"), dataModel, getLocalStore(), false)
        .addLabel("Parameter name", "en")
        .addComment("The name of a parameter in a part of a deconstructed HTTP header value.", "en"),
    /**
     * The parameters in a part of a deconstructed HTTP header value.
     */
    params: new LitVocabTerm(_NS$9("params"), dataModel, getLocalStore(), false)
        .addLabel("Header parameters", "en")
        .addComment("The parameters in a part of a deconstructed HTTP header value.", "en"),
    /**
     * The value of a parameter in a part of a deconstructed HTTP header value.
     */
    paramValue: new LitVocabTerm(_NS$9("paramValue"), dataModel, getLocalStore(), false)
        .addLabel("Parameter value", "en")
        .addComment("The value of a parameter in a part of a deconstructed HTTP header value.", "en"),
    /**
     * The reason phrase (status text) of an HTTP response.
     */
    reasonPhrase: new LitVocabTerm(_NS$9("reasonPhrase"), dataModel, getLocalStore(), false)
        .addLabel("Reason phrase", "en")
        .addComment("The reason phrase (status text) of an HTTP response.", "en"),
    /**
     * The HTTP requests made via a connection.
     */
    requests: new LitVocabTerm(_NS$9("requests"), dataModel, getLocalStore(), false)
        .addLabel("Requests", "en")
        .addComment("The HTTP requests made via a connection.", "en"),
    /**
     * The HTTP response sent in answer to an HTTP request.
     */
    resp: new LitVocabTerm(_NS$9("resp"), dataModel, getLocalStore(), false)
        .addLabel("Response", "en")
        .addComment("The HTTP response sent in answer to an HTTP request.", "en"),
    /**
     * The status code of an HTTP response.
     */
    sc: new LitVocabTerm(_NS$9("sc"), dataModel, getLocalStore(), false)
        .addLabel("Status code", "en")
        .addComment("The status code of an HTTP response.", "en"),
    /**
     * The status code number.
     */
    statusCodeNumber: new LitVocabTerm(_NS$9("statusCodeNumber"), dataModel, getLocalStore(), false)
        .addLabel("Status code", "en")
        .addComment("The status code number.", "en"),
    /**
     * The status code value of an HTTP response.
     */
    statusCodeValue: new LitVocabTerm(_NS$9("statusCodeValue"), dataModel, getLocalStore(), false)
        .addLabel("Status code", "en")
        .addComment("The status code value of an HTTP response.", "en"),
};

var namedNode$b = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$a(localName) {
    return namedNode$b("http://www.w3.org/2007/ont/httph#" + localName);
}
var HTTPH = {
    PREFIX: "httph",
    NAMESPACE: "http://www.w3.org/2007/ont/httph#",
    PREFIX_AND_NAMESPACE: { "httph": "http://www.w3.org/2007/ont/httph#" },
    NS: _NS$a,
    // *******************
    // All the Properties.
    // *******************
    /**
     * See the HTTP specification
     */
    content_type: new LitVocabTerm(_NS$a("content-type"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("content type")
        .addCommentNoLanguage("See the HTTP specification"),
    /**
     * See the HTTP specification
     */
    accept: new LitVocabTerm(_NS$a("accept"), dataModel, getLocalStore(), false)
        .addLabel("Accept", "en")
        .addComment("See the HTTP specification", "en"),
    /**
     * See the HTTP specification
     */
    accept_language: new LitVocabTerm(_NS$a("accept-language"), dataModel, getLocalStore(), false)
        .addLabel("Accept-Language", "en")
        .addComment("See the HTTP specification", "en"),
};

var namedNode$c = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$b(localName) {
    return namedNode$c("http://purl.org/ontology/olo/core#" + localName);
}
var OLO = {
    PREFIX: "olo",
    NAMESPACE: "http://purl.org/ontology/olo/core#",
    PREFIX_AND_NAMESPACE: { "olo": "http://purl.org/ontology/olo/core#" },
    NS: _NS$b,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An ordered list with a given length an indexed items.
     */
    OrderedList: new LitVocabTerm(_NS$b("OrderedList"), dataModel, getLocalStore(), false)
        .addLabel("Ordered List", "en")
        .addComment("An ordered list with a given length an indexed items.", "en"),
    /**
     * A slot in an ordered list with a fixed index.
     */
    Slot: new LitVocabTerm(_NS$b("Slot"), dataModel, getLocalStore(), false)
        .addLabel("Slot", "en")
        .addComment("A slot in an ordered list with a fixed index.", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The length of an ordered list.
     */
    length: new LitVocabTerm(_NS$b("length"), dataModel, getLocalStore(), false)
        .addLabel("has length", "en")
        .addComment("The length of an ordered list.", "en"),
    /**
     * Associates the next slot in an ordered list.
     */
    next: new LitVocabTerm(_NS$b("next"), dataModel, getLocalStore(), false)
        .addLabel("has next", "en")
        .addComment("Associates the next slot in an ordered list.", "en"),
    /**
     * An index of a slot in an ordered list.
     */
    index: new LitVocabTerm(_NS$b("index"), dataModel, getLocalStore(), false)
        .addLabel("has index", "en")
        .addComment("An index of a slot in an ordered list.", "en"),
    /**
     * An ordered list of an slot.
     */
    ordered_list: new LitVocabTerm(_NS$b("ordered_list"), dataModel, getLocalStore(), false)
        .addLabel("has ordered list", "en")
        .addComment("An ordered list of an slot.", "en"),
    /**
     * Associates the previous slot in an ordered list
     */
    previous: new LitVocabTerm(_NS$b("previous"), dataModel, getLocalStore(), false)
        .addLabel("has previous", "en")
        .addComment("Associates the previous slot in an ordered list", "en"),
    /**
     * An item of a slot in an ordered list.
     */
    item: new LitVocabTerm(_NS$b("item"), dataModel, getLocalStore(), false)
        .addLabel("has item", "en")
        .addComment("An item of a slot in an ordered list.", "en"),
    /**
     * A slot in an ordered list.
     */
    slot: new LitVocabTerm(_NS$b("slot"), dataModel, getLocalStore(), false)
        .addLabel("has slot", "en")
        .addComment("A slot in an ordered list.", "en"),
};

var namedNode$d = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */
function _NS$c(localName) {
    return namedNode$d("http://www.w3.org/2004/02/skos/core#" + localName);
}
var SKOS = {
    PREFIX: "skos",
    NAMESPACE: "http://www.w3.org/2004/02/skos/core#",
    PREFIX_AND_NAMESPACE: { "skos": "http://www.w3.org/2004/02/skos/core#" },
    NS: _NS$c,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An idea or notion; a unit of thought.
     */
    Concept: new LitVocabTerm(_NS$c("Concept"), dataModel, getLocalStore(), false)
        .addLabel("Concept", "en"),
    /**
     * A set of concepts, optionally including statements about semantic relationships between those concepts.
     */
    ConceptScheme: new LitVocabTerm(_NS$c("ConceptScheme"), dataModel, getLocalStore(), false)
        .addLabel("Concept Scheme", "en"),
    /**
     * A meaningful collection of concepts.
     */
    Collection: new LitVocabTerm(_NS$c("Collection"), dataModel, getLocalStore(), false)
        .addLabel("Collection", "en"),
    /**
     * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
     */
    OrderedCollection: new LitVocabTerm(_NS$c("OrderedCollection"), dataModel, getLocalStore(), false)
        .addLabel("Ordered Collection", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * A statement or formal explanation of the meaning of a concept.
     */
    definition: new LitVocabTerm(_NS$c("definition"), dataModel, getLocalStore(), false)
        .addLabel("definition", "en"),
    /**
     * A note that helps to clarify the meaning and/or the use of a concept.
     */
    scopeNote: new LitVocabTerm(_NS$c("scopeNote"), dataModel, getLocalStore(), false)
        .addLabel("scope note", "en"),
    /**
     * An example of the use of a concept.
     */
    example: new LitVocabTerm(_NS$c("example"), dataModel, getLocalStore(), false)
        .addLabel("example", "en"),
    /**
     * Relates a resource (for example a concept) to a concept scheme in which it is included.
     */
    inScheme: new LitVocabTerm(_NS$c("inScheme"), dataModel, getLocalStore(), false)
        .addLabel("is in scheme", "en"),
    /**
     * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
     */
    hasTopConcept: new LitVocabTerm(_NS$c("hasTopConcept"), dataModel, getLocalStore(), false)
        .addLabel("has top concept", "en"),
    /**
     * Relates a concept to the concept scheme that it is a top level concept of.
     */
    topConceptOf: new LitVocabTerm(_NS$c("topConceptOf"), dataModel, getLocalStore(), false)
        .addLabel("is top concept in scheme", "en"),
    /**
     * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
     */
    prefLabel: new LitVocabTerm(_NS$c("prefLabel"), dataModel, getLocalStore(), false)
        .addLabel("preferred label", "en")
        .addComment("A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.", "en"),
    /**
     * The range of skos:altLabel is the class of RDF plain literals.
     */
    altLabel: new LitVocabTerm(_NS$c("altLabel"), dataModel, getLocalStore(), false)
        .addLabel("alternative label", "en")
        .addComment("The range of skos:altLabel is the class of RDF plain literals.", "en"),
    /**
     * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.
     */
    hiddenLabel: new LitVocabTerm(_NS$c("hiddenLabel"), dataModel, getLocalStore(), false)
        .addLabel("hidden label", "en")
        .addComment("skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.", "en"),
    /**
     * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
     */
    notation: new LitVocabTerm(_NS$c("notation"), dataModel, getLocalStore(), false)
        .addLabel("notation", "en"),
    /**
     * A general note, for any purpose.
     */
    note: new LitVocabTerm(_NS$c("note"), dataModel, getLocalStore(), false)
        .addLabel("note", "en"),
    /**
     * A note about a modification to a concept.
     */
    changeNote: new LitVocabTerm(_NS$c("changeNote"), dataModel, getLocalStore(), false)
        .addLabel("change note", "en"),
    /**
     * A note for an editor, translator or maintainer of the vocabulary.
     */
    editorialNote: new LitVocabTerm(_NS$c("editorialNote"), dataModel, getLocalStore(), false)
        .addLabel("editorial note", "en"),
    /**
     * A note about the past state/use/meaning of a concept.
     */
    historyNote: new LitVocabTerm(_NS$c("historyNote"), dataModel, getLocalStore(), false)
        .addLabel("history note", "en"),
    /**
     * Links a concept to a concept related by meaning.
     */
    semanticRelation: new LitVocabTerm(_NS$c("semanticRelation"), dataModel, getLocalStore(), false)
        .addLabel("is in semantic relation with", "en"),
    /**
     * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
     */
    broader: new LitVocabTerm(_NS$c("broader"), dataModel, getLocalStore(), false)
        .addLabel("has broader", "en")
        .addComment("Broader concepts are typically rendered as parents in a concept hierarchy (tree).", "en"),
    /**
     * skos:broaderTransitive is a transitive superproperty of skos:broader.
     */
    broaderTransitive: new LitVocabTerm(_NS$c("broaderTransitive"), dataModel, getLocalStore(), false)
        .addLabel("has broader transitive", "en"),
    /**
     * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
     */
    narrower: new LitVocabTerm(_NS$c("narrower"), dataModel, getLocalStore(), false)
        .addLabel("has narrower", "en")
        .addComment("Narrower concepts are typically rendered as children in a concept hierarchy (tree).", "en"),
    /**
     * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
     */
    narrowerTransitive: new LitVocabTerm(_NS$c("narrowerTransitive"), dataModel, getLocalStore(), false)
        .addLabel("has narrower transitive", "en"),
    /**
     * skos:related is disjoint with skos:broaderTransitive
     */
    related: new LitVocabTerm(_NS$c("related"), dataModel, getLocalStore(), false)
        .addLabel("has related", "en")
        .addComment("skos:related is disjoint with skos:broaderTransitive", "en"),
    /**
     * Relates a collection to one of its members.
     */
    member: new LitVocabTerm(_NS$c("member"), dataModel, getLocalStore(), false)
        .addLabel("has member", "en"),
    /**
     * For any resource, every item in the list given as the value of the
        skos:memberList property is also a value of the skos:member property.
     */
    memberList: new LitVocabTerm(_NS$c("memberList"), dataModel, getLocalStore(), false)
        .addLabel("has member list", "en")
        .addComment("For any resource, every item in the list given as the value of the\n      skos:memberList property is also a value of the skos:member property.", "en"),
    /**
     * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
     */
    mappingRelation: new LitVocabTerm(_NS$c("mappingRelation"), dataModel, getLocalStore(), false)
        .addLabel("is in mapping relation with", "en")
        .addComment("These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.", "en"),
    /**
     * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     */
    broadMatch: new LitVocabTerm(_NS$c("broadMatch"), dataModel, getLocalStore(), false)
        .addLabel("has broader match", "en"),
    /**
     * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     */
    narrowMatch: new LitVocabTerm(_NS$c("narrowMatch"), dataModel, getLocalStore(), false)
        .addLabel("has narrower match", "en"),
    /**
     * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
     */
    relatedMatch: new LitVocabTerm(_NS$c("relatedMatch"), dataModel, getLocalStore(), false)
        .addLabel("has related match", "en"),
    /**
     * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
     */
    exactMatch: new LitVocabTerm(_NS$c("exactMatch"), dataModel, getLocalStore(), false)
        .addLabel("has exact match", "en")
        .addComment("skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.", "en"),
    /**
     * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
     */
    closeMatch: new LitVocabTerm(_NS$c("closeMatch"), dataModel, getLocalStore(), false)
        .addLabel("has close match", "en"),
};

var namedNode$e = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  Extension to UI terms providing multilingual alternative names and translations for comments (e.g. for use directly as labels or tool-tips in user interfaces or error messages)
 */
function _NS$d(localName) {
    return namedNode$e("http://www.w3.org/ns/ui#" + localName);
}
var UI = {
    PREFIX: "ui",
    NAMESPACE: "http://www.w3.org/ns/ui#",
    PREFIX_AND_NAMESPACE: { "ui": "http://www.w3.org/ns/ui#" },
    NS: _NS$d,
    // *****************
    // All the Classes.
    // *****************
    /**
     *
     */
    BooleanField: new LitVocabTerm(_NS$d("BooleanField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    NumericField: new LitVocabTerm(_NS$d("NumericField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    ValueField: new LitVocabTerm(_NS$d("ValueField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    Group: new LitVocabTerm(_NS$d("Group"), dataModel, getLocalStore(), false),
    /**
     * A form can be any type of single field, or typically a Group of several fields,
      including interspersed headings and comments.
     */
    Form: new LitVocabTerm(_NS$d("Form"), dataModel, getLocalStore(), false)
        .addCommentNoLanguage("A form can be any type of single field, or typically a Group of several fields,\n    including interspersed headings and comments.  "),
    /**
     *
     */
    Single: new LitVocabTerm(_NS$d("Single"), dataModel, getLocalStore(), false),
    /**
     *
     */
    Choice: new LitVocabTerm(_NS$d("Choice"), dataModel, getLocalStore(), false),
    /**
     * A classifier allows the user to select the type of an object.
      The possible types must be subclasses of some overall class, the "category".
      (Ideally, the superclass is also set up as the disjoint union of the subclasses,
      if they are disjoint.)
  
      The form normally stores the resulting classes using an rdf:type triple,
      but a different predicate can be used if required, so the classifier field
      needs is 'property' defined too.
  
      If the subclass selected itself is has subclasses defined, the user can
      recursively select from them in turn, as many levels as needed.
     */
    Classifier: new LitVocabTerm(_NS$d("Classifier"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("classifier")
        .addCommentNoLanguage("A classifier allows the user to select the type of an object.\n    The possible types must be subclasses of some overall class, the \"category\".\n    (Ideally, the superclass is also set up as the disjoint union of the subclasses,\n    if they are disjoint.)\n\n    The form normally stores the resulting classes using an rdf:type triple,\n    but a different predicate can be used if required, so the classifier field\n    needs is 'property' defined too.\n\n    If the subclass selected itself is has subclasses defined, the user can\n    recursively select from them in turn, as many levels as needed."),
    /**
     *
     */
    ColorField: new LitVocabTerm(_NS$d("ColorField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    Comment: new LitVocabTerm(_NS$d("Comment"), dataModel, getLocalStore(), false),
    /**
     *
     */
    DateField: new LitVocabTerm(_NS$d("DateField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    DateTimeField: new LitVocabTerm(_NS$d("DateTimeField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    DecimalField: new LitVocabTerm(_NS$d("DecimalField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    EmailField: new LitVocabTerm(_NS$d("EmailField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    Heading: new LitVocabTerm(_NS$d("Heading"), dataModel, getLocalStore(), false),
    /**
     *
     */
    SingleLineTextField: new LitVocabTerm(_NS$d("SingleLineTextField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    TextField: new LitVocabTerm(_NS$d("TextField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    Options: new LitVocabTerm(_NS$d("Options"), dataModel, getLocalStore(), false),
    /**
     *
     */
    IntegerField: new LitVocabTerm(_NS$d("IntegerField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    FloatField: new LitVocabTerm(_NS$d("FloatField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    PhoneField: new LitVocabTerm(_NS$d("PhoneField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    Multiple: new LitVocabTerm(_NS$d("Multiple"), dataModel, getLocalStore(), false),
    /**
     *
     */
    MultiLineTextField: new LitVocabTerm(_NS$d("MultiLineTextField"), dataModel, getLocalStore(), false),
    /**
     *
     */
    TriStateField: new LitVocabTerm(_NS$d("TriStateField"), dataModel, getLocalStore(), false),
    // *******************
    // All the Properties.
    // *******************
    /**
     * parts
     */
    parts: new LitVocabTerm(_NS$d("parts"), dataModel, getLocalStore(), false)
        .addLabel("parts", "en"),
    /**
     * from
     */
    from: new LitVocabTerm(_NS$d("from"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("from"),
    /**
     * Label
     */
    label: new LitVocabTerm(_NS$d("label"), dataModel, getLocalStore(), false)
        .addLabel("Label", "en")
        .addLabel("Etiqueta", "es"),
    /**
     * Many fields prompt for information about a given property of the subject.
      When field is filled in, this gives which property is written into the data.
     */
    property: new LitVocabTerm(_NS$d("property"), dataModel, getLocalStore(), false)
        .addLabel("property to be stored", "en")
        .addCommentNoLanguage("Many fields prompt for information about a given property of the subject.\n    When field is filled in, this gives which property is written into the data."),
    /**
     * The value for which this case is selected.
     */
    for_: new LitVocabTerm(_NS$d("for"), dataModel, getLocalStore(), false)
        .addLabel("for", "en")
        .addCommentNoLanguage("The value for which this case is selected."),
    /**
     * A string for the UI to use if the user needs a longer
          prompts than just a field name, the rdfs:label.
     */
    prompt: new LitVocabTerm(_NS$d("prompt"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("user prompt")
        .addCommentNoLanguage("A string for the UI to use if the user needs a longer\n        prompts than just a field name, the rdfs:label. "),
    /**
     *
     */
    use: new LitVocabTerm(_NS$d("use"), dataModel, getLocalStore(), false),
    /**
     * A form which may be used to collect information about a
      hitherto locally undocumented instance instance of this class.
     */
    creationForm: new LitVocabTerm(_NS$d("creationForm"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("creation form")
        .addCommentNoLanguage("A form which may be used to collect information about a\n    hitherto locally undocumented instance instance of this class."),
    /**
     * Contents
     */
    contents: new LitVocabTerm(_NS$d("contents"), dataModel, getLocalStore(), false)
        .addLabel("Contents", "en")
        .addLabel("Contenido", "es"),
    /**
     * size of field
     */
    size: new LitVocabTerm(_NS$d("size"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("size of field"),
    /**
     * Must be a valid CSS style string such as one could put in
          an HTML style attribute.  Depending on the user interface system, this can
          by given to individuals, classes or properties. It is up to a user interface
          which wants to draw on them to pick how it uses styles from which parts
          of the data it has.  For example, the style of a class may be picked
          to distinguish information about things in that class.
     */
    style: new LitVocabTerm(_NS$d("style"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("style")
        .addCommentNoLanguage("Must be a valid CSS style string such as one could put in\n        an HTML style attribute.  Depending on the user interface system, this can\n        by given to individuals, classes or properties. It is up to a user interface\n        which wants to draw on them to pick how it uses styles from which parts\n        of the data it has.  For example, the style of a class may be picked\n        to distinguish information about things in that class."),
    /**
     * The superclass subclasses of which will be selected.
     */
    category: new LitVocabTerm(_NS$d("category"), dataModel, getLocalStore(), false)
        .addLabel("overall superclass", "en")
        .addCommentNoLanguage("The superclass subclasses of which will be selected."),
    /**
     * Many fields prompt for information about a given property of the subject
     */
    dependingOn: new LitVocabTerm(_NS$d("dependingOn"), dataModel, getLocalStore(), false)
        .addLabel("depending on", "en")
        .addCommentNoLanguage("Many fields prompt for information about a given property of the subject"),
    /**
     * max length of value
     */
    maxLength: new LitVocabTerm(_NS$d("maxLength"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("max length of value"),
    /**
     * part
     */
    part: new LitVocabTerm(_NS$d("part"), dataModel, getLocalStore(), false)
        .addLabel("part", "en"),
    /**
     * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
  
     */
    annotationForm: new LitVocabTerm(_NS$d("annotationForm"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("annotation form")
        .addCommentNoLanguage("A form which may be used to add more infromation to an\ninstance of this class which we know something about.  Anything from\nadding just add one more fact, to adding a whole lot of information about a specific\nfacet of the thing.\n"),
    /**
     * Must be a valid CSS color string such as one could put in
          an HTML style attribute.  This should be in the #xxxxxx form,
          (with 6 digits of hex)  so that it
          can work with Graphviz.
     */
    backgroundColor: new LitVocabTerm(_NS$d("backgroundColor"), dataModel, getLocalStore(), false)
        .addLabel("background color", "en")
        .addCommentNoLanguage("Must be a valid CSS color string such as one could put in\n        an HTML style attribute.  This should be in the #xxxxxx form,\n        (with 6 digits of hex)  so that it\n        can work with Graphviz."),
    /**
     * URI or base64 representation of an image
     */
    backgroundImage: new LitVocabTerm(_NS$d("backgroundImage"), dataModel, getLocalStore(), false)
        .addLabel("background image", "en")
        .addCommentNoLanguage("URI or base64 representation of an image"),
    /**
     * Must be a valid CSS color string such as one could put in
          an HTML style attribute.  This should be in the #xxxxxx form,
          (with 6 digits of hex)  so that it
          can work with Graphviz.
     */
    color: new LitVocabTerm(_NS$d("color"), dataModel, getLocalStore(), false)
        .addLabel("color", "en")
        .addCommentNoLanguage("Must be a valid CSS color string such as one could put in\n        an HTML style attribute.  This should be in the #xxxxxx form,\n        (with 6 digits of hex)  so that it\n        can work with Graphviz."),
    /**
     * A really simple way of enabling user interfaces to
              create new information about a class of things is to make a define of properties
              to be specified when a information about a new item
              ("New item" here means an item which the system
              does not have prvious information about yet,
              not an items which has just been created,
              like new friend as opposed to new baby)
     */
    initialProperties: new LitVocabTerm(_NS$d("initialProperties"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("initial properties")
        .addCommentNoLanguage("A really simple way of enabling user interfaces to\n            create new information about a class of things is to make a define of properties\n            to be specified when a information about a new item\n            (\"New item\" here means an item which the system\n            does not have prvious information about yet,\n            not an items which has just been created,\n            like new friend as opposed to new baby)"),
    /**
     * max
     */
    maxValue: new LitVocabTerm(_NS$d("maxValue"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("max"),
    /**
     * min
     */
    minValue: new LitVocabTerm(_NS$d("minValue"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("min"),
    /**
     * The sequence in which this item is arranged with repect to other parts.
     */
    seqeunce: new LitVocabTerm(_NS$d("seqeunce"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("sequence number")
        .addCommentNoLanguage("The sequence in which this item is arranged with repect to other parts."),
    /**
     * A property which typically is used to sort
          members of a given class.
     */
    sortBy: new LitVocabTerm(_NS$d("sortBy"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("sort by")
        .addCommentNoLanguage("A property which typically is used to sort\n        members of a given class."),
    /**
     * When individuals or classes must be sorted, then
          if they are given different values of sortPriority a user agent can
          use this as a hint to how to present information.
     */
    sortPriority: new LitVocabTerm(_NS$d("sortPriority"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("sort priority")
        .addCommentNoLanguage("When individuals or classes must be sorted, then\n        if they are given different values of sortPriority a user agent can\n        use this as a hint to how to present information."),
    /**
     * This  is a crude way of specifying a table-based
              view for objects of this class.
     */
    tableProperties: new LitVocabTerm(_NS$d("tableProperties"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("table properties")
        .addCommentNoLanguage("This  is a crude way of specifying a table-based\n            view for objects of this class."),
    /**
     * Pattern
     */
    pattern: new LitVocabTerm(_NS$d("pattern"), dataModel, getLocalStore(), false)
        .addLabel("Pattern", "en")
        .addLabel("Modelo", "es"),
    /**
     * Value
     */
    value: new LitVocabTerm(_NS$d("value"), dataModel, getLocalStore(), false)
        .addLabel("Value", "en")
        .addLabel("Valor", "es"),
    /**
     * Values
     */
    values: new LitVocabTerm(_NS$d("values"), dataModel, getLocalStore(), false)
        .addLabel("Values", "en")
        .addLabel("Valores", "es"),
    /**
     * Minimum date offset
     */
    minDateOffset: new LitVocabTerm(_NS$d("minDateOffset"), dataModel, getLocalStore(), false)
        .addLabel("Minimum date offset", "en")
        .addLabel("Fecha m\u00EDnima compensada", "es"),
    /**
     * Maximum date offset
     */
    maxDateOffset: new LitVocabTerm(_NS$d("maxDateOffset"), dataModel, getLocalStore(), false)
        .addLabel("Maximum date offset", "en")
        .addLabel("Fecha m\u00E1xima de desplazamiento", "es"),
    /**
     * Minimum datetime offset
     */
    minDatetimeOffset: new LitVocabTerm(_NS$d("minDatetimeOffset"), dataModel, getLocalStore(), false)
        .addLabel("Minimum datetime offset", "en")
        .addLabel("Desplazamiento m\u00EDnimo de fecha y hora", "es"),
    /**
     * Maximum datetime offset
     */
    maxDatetimeOffset: new LitVocabTerm(_NS$d("maxDatetimeOffset"), dataModel, getLocalStore(), false)
        .addLabel("Maximum datetime offset", "en")
        .addLabel("Desplazamiento m\u00E1ximo de fecha y hora", "es"),
    /**
     * Name
     */
    name: new LitVocabTerm(_NS$d("name"), dataModel, getLocalStore(), false)
        .addLabel("Name", "en")
        .addLabel("Nombre", "es"),
    /**
     * Time field
     */
    TimeField: new LitVocabTerm(_NS$d("TimeField"), dataModel, getLocalStore(), false)
        .addLabel("Time field", "en")
        .addLabel("Campo de tiempo", "es"),
};

var namedNode$f = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  A vocabulary for annotating vocabulary descriptions (VANN).
 */
function _NS$e(localName) {
    return namedNode$f("http://purl.org/vocab/vann/" + localName);
}
var VANN = {
    PREFIX: "vann",
    NAMESPACE: "http://purl.org/vocab/vann/",
    PREFIX_AND_NAMESPACE: { "vann": "http://purl.org/vocab/vann/" },
    NS: _NS$e,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The preferred namespace prefix to ue when using terms from this vocabulary in an XML document.
     */
    preferredNamespacePrefix: new LitVocabTerm(_NS$e("preferredNamespacePrefix"), dataModel, getLocalStore(), false)
        .addLabel("Preferred namespace prefix", "en")
        .addComment("The preferred namespace prefix to ue when using terms from this vocabulary in an XML document.", "en"),
    /**
     * The preferred namespace URI to use when using terms from this vocabulary in an XML document.
     */
    preferredNamespaceUri: new LitVocabTerm(_NS$e("preferredNamespaceUri"), dataModel, getLocalStore(), false)
        .addLabel("Preferred namespace URI", "en")
        .addComment("The preferred namespace URI to use when using terms from this vocabulary in an XML document.", "en"),
    /**
     * A reference to a resource that describes changes between this version of a vocabulary and the previous.
     */
    changes: new LitVocabTerm(_NS$e("changes"), dataModel, getLocalStore(), false)
        .addLabel("changes", "en")
        .addComment("A reference to a resource that describes changes between this version of a vocabulary and the previous.", "en"),
    /**
     * A reference to a resource that provides an example of how this resource can be used.
     */
    example: new LitVocabTerm(_NS$e("example"), dataModel, getLocalStore(), false)
        .addLabel("Example", "en")
        .addComment("A reference to a resource that provides an example of how this resource can be used.", "en"),
    /**
     * A group of related terms in a vocabulary.
     */
    termGroup: new LitVocabTerm(_NS$e("termGroup"), dataModel, getLocalStore(), false)
        .addLabel("Term group", "en")
        .addComment("A group of related terms in a vocabulary.", "en"),
    /**
     * A reference to a resource that provides information on how this resource is to be used.
     */
    usageNote: new LitVocabTerm(_NS$e("usageNote"), dataModel, getLocalStore(), false)
        .addLabel("Usage note", "en")
        .addComment("A reference to a resource that provides information on how this resource is to be used.", "en"),
};

var namedNode$g = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$f(localName) {
    return namedNode$g("http://purl.org/dc/terms/" + localName);
}
var DCTERMS = {
    PREFIX: "dcterms",
    NAMESPACE: "http://purl.org/dc/terms/",
    PREFIX_AND_NAMESPACE: { "dcterms": "http://purl.org/dc/terms/" },
    NS: _NS$f,
    // *****************
    // All the Classes.
    // *****************
    /**
     * A resource that acts or has the power to act.
     */
    Agent: new LitVocabTerm(_NS$f("Agent"), dataModel, getLocalStore(), false)
        .addLabel("Agent", "en")
        .addComment("A resource that acts or has the power to act.", "en"),
    /**
     * A group of agents.
     */
    AgentClass: new LitVocabTerm(_NS$f("AgentClass"), dataModel, getLocalStore(), false)
        .addLabel("Agent Class", "en")
        .addComment("A group of agents.", "en"),
    /**
     * A book, article, or other documentary resource.
     */
    BibliographicResource: new LitVocabTerm(_NS$f("BibliographicResource"), dataModel, getLocalStore(), false)
        .addLabel("Bibliographic Resource", "en")
        .addComment("A book, article, or other documentary resource.", "en"),
    /**
     * A digital resource format.
     */
    FileFormat: new LitVocabTerm(_NS$f("FileFormat"), dataModel, getLocalStore(), false)
        .addLabel("File Format", "en")
        .addComment("A digital resource format.", "en"),
    /**
     * A file format or physical medium.
     */
    MediaType: new LitVocabTerm(_NS$f("MediaType"), dataModel, getLocalStore(), false)
        .addLabel("Media Type", "en")
        .addComment("A file format or physical medium.", "en"),
    /**
     * A rate at which something recurs.
     */
    Frequency: new LitVocabTerm(_NS$f("Frequency"), dataModel, getLocalStore(), false)
        .addLabel("Frequency", "en")
        .addComment("A rate at which something recurs.", "en"),
    /**
     * The extent or range of judicial, law enforcement, or other authority.
     */
    Jurisdiction: new LitVocabTerm(_NS$f("Jurisdiction"), dataModel, getLocalStore(), false)
        .addLabel("Jurisdiction", "en")
        .addComment("The extent or range of judicial, law enforcement, or other authority.", "en"),
    /**
     * A location, period of time, or jurisdiction.
     */
    LocationPeriodOrJurisdiction: new LitVocabTerm(_NS$f("LocationPeriodOrJurisdiction"), dataModel, getLocalStore(), false)
        .addLabel("Location, Period, or Jurisdiction", "en")
        .addComment("A location, period of time, or jurisdiction.", "en"),
    /**
     * A legal document giving official permission to do something with a resource.
     */
    LicenseDocument: new LitVocabTerm(_NS$f("LicenseDocument"), dataModel, getLocalStore(), false)
        .addLabel("License Document", "en")
        .addComment("A legal document giving official permission to do something with a resource.", "en"),
    /**
     * A statement about the intellectual property rights (IPR) held in or over a resource, a legal document giving official permission to do something with a resource, or a statement about access rights.
     */
    RightsStatement: new LitVocabTerm(_NS$f("RightsStatement"), dataModel, getLocalStore(), false)
        .addLabel("Rights Statement", "en")
        .addComment("A statement about the intellectual property rights (IPR) held in or over a resource, a legal document giving official permission to do something with a resource, or a statement about access rights.", "en"),
    /**
     * A system of signs, symbols, sounds, gestures, or rules used in communication.
     */
    LinguisticSystem: new LitVocabTerm(_NS$f("LinguisticSystem"), dataModel, getLocalStore(), false)
        .addLabel("Linguistic System", "en")
        .addComment("A system of signs, symbols, sounds, gestures, or rules used in communication.", "en"),
    /**
     * A spatial region or named place.
     */
    Location: new LitVocabTerm(_NS$f("Location"), dataModel, getLocalStore(), false)
        .addLabel("Location", "en")
        .addComment("A spatial region or named place.", "en"),
    /**
     * A media type or extent.
     */
    MediaTypeOrExtent: new LitVocabTerm(_NS$f("MediaTypeOrExtent"), dataModel, getLocalStore(), false)
        .addLabel("Media Type or Extent", "en")
        .addComment("A media type or extent.", "en"),
    /**
     * A method by which resources are added to a collection.
     */
    MethodOfAccrual: new LitVocabTerm(_NS$f("MethodOfAccrual"), dataModel, getLocalStore(), false)
        .addLabel("Method of Accrual", "en")
        .addComment("A method by which resources are added to a collection.", "en"),
    /**
     * A process that is used to engender knowledge, attitudes, and skills.
     */
    MethodOfInstruction: new LitVocabTerm(_NS$f("MethodOfInstruction"), dataModel, getLocalStore(), false)
        .addLabel("Method of Instruction", "en")
        .addComment("A process that is used to engender knowledge, attitudes, and skills.", "en"),
    /**
     * An interval of time that is named or defined by its start and end dates.
     */
    PeriodOfTime: new LitVocabTerm(_NS$f("PeriodOfTime"), dataModel, getLocalStore(), false)
        .addLabel("Period of Time", "en")
        .addComment("An interval of time that is named or defined by its start and end dates.", "en"),
    /**
     * A physical material or carrier.
     */
    PhysicalMedium: new LitVocabTerm(_NS$f("PhysicalMedium"), dataModel, getLocalStore(), false)
        .addLabel("Physical Medium", "en")
        .addComment("A physical material or carrier.", "en"),
    /**
     * A material thing.
     */
    PhysicalResource: new LitVocabTerm(_NS$f("PhysicalResource"), dataModel, getLocalStore(), false)
        .addLabel("Physical Resource", "en")
        .addComment("A material thing.", "en"),
    /**
     * A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.
     */
    Policy: new LitVocabTerm(_NS$f("Policy"), dataModel, getLocalStore(), false)
        .addLabel("Policy", "en")
        .addComment("A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.", "en"),
    /**
     * Any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.
     */
    ProvenanceStatement: new LitVocabTerm(_NS$f("ProvenanceStatement"), dataModel, getLocalStore(), false)
        .addLabel("Provenance Statement", "en")
        .addComment("Any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.", "en"),
    /**
     * A dimension or extent, or a time taken to play or execute.
     */
    SizeOrDuration: new LitVocabTerm(_NS$f("SizeOrDuration"), dataModel, getLocalStore(), false)
        .addLabel("Size or Duration", "en")
        .addComment("A dimension or extent, or a time taken to play or execute.", "en"),
    /**
     * A reference point against which other things can be evaluated or compared.
     */
    Standard: new LitVocabTerm(_NS$f("Standard"), dataModel, getLocalStore(), false)
        .addLabel("Standard", "en")
        .addComment("A reference point against which other things can be evaluated or compared.", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Date on which the resource was changed.
     */
    modified: new LitVocabTerm(_NS$f("modified"), dataModel, getLocalStore(), false)
        .addLabel("Date Modified", "en")
        .addComment("Date on which the resource was changed.", "en"),
    /**
     * An entity responsible for making the resource available.
     */
    publisher: new LitVocabTerm(_NS$f("publisher"), dataModel, getLocalStore(), false)
        .addLabel("Publisher", "en")
        .addComment("An entity responsible for making the resource available.", "en"),
    /**
     * A name given to the resource.
     */
    title: new LitVocabTerm(_NS$f("title"), dataModel, getLocalStore(), false)
        .addLabel("Title", "en")
        .addComment("A name given to the resource.", "en"),
    /**
     * Date of formal issuance of the resource.
     */
    issued: new LitVocabTerm(_NS$f("issued"), dataModel, getLocalStore(), false)
        .addLabel("Date Issued", "en")
        .addComment("Date of formal issuance of the resource.", "en"),
    /**
     * The set of regions in space defined by their geographic coordinates according to the DCMI Box Encoding Scheme.
     */
    Box: new LitVocabTerm(_NS$f("Box"), dataModel, getLocalStore(), false)
        .addLabel("DCMI Box", "en")
        .addComment("The set of regions in space defined by their geographic coordinates according to the DCMI Box Encoding Scheme.", "en"),
    /**
     * The set of codes listed in ISO 3166-1 for the representation of names of countries.
     */
    ISO3166: new LitVocabTerm(_NS$f("ISO3166"), dataModel, getLocalStore(), false)
        .addLabel("ISO 3166", "en")
        .addComment("The set of codes listed in ISO 3166-1 for the representation of names of countries.", "en"),
    /**
     * The three-letter alphabetic codes listed in ISO639-2 for the representation of names of languages.
     */
    ISO639_2: new LitVocabTerm(_NS$f("ISO639-2"), dataModel, getLocalStore(), false)
        .addLabel("ISO 639-2", "en")
        .addComment("The three-letter alphabetic codes listed in ISO639-2 for the representation of names of languages.", "en"),
    /**
     * The set of three-letter codes listed in ISO 639-3 for the representation of names of languages.
     */
    ISO639_3: new LitVocabTerm(_NS$f("ISO639-3"), dataModel, getLocalStore(), false)
        .addLabel("ISO 639-3", "en")
        .addComment("The set of three-letter codes listed in ISO 639-3 for the representation of names of languages.", "en"),
    /**
     * An account of the resource.
     */
    description: new LitVocabTerm(_NS$f("description"), dataModel, getLocalStore(), false)
        .addLabel("Description", "en")
        .addComment("An account of the resource.", "en"),
    /**
     * The set of time intervals defined by their limits according to the DCMI Period Encoding Scheme.
     */
    Period: new LitVocabTerm(_NS$f("Period"), dataModel, getLocalStore(), false)
        .addLabel("DCMI Period", "en")
        .addComment("The set of time intervals defined by their limits according to the DCMI Period Encoding Scheme.", "en"),
    /**
     * The set of points in space defined by their geographic coordinates according to the DCMI Point Encoding Scheme.
     */
    Point: new LitVocabTerm(_NS$f("Point"), dataModel, getLocalStore(), false)
        .addLabel("DCMI Point", "en")
        .addComment("The set of points in space defined by their geographic coordinates according to the DCMI Point Encoding Scheme.", "en"),
    /**
     * The set of tags, constructed according to RFC 1766, for the identification of languages.
     */
    RFC1766: new LitVocabTerm(_NS$f("RFC1766"), dataModel, getLocalStore(), false)
        .addLabel("RFC 1766", "en")
        .addComment("The set of tags, constructed according to RFC 1766, for the identification of languages.", "en"),
    /**
     * The set of tags constructed according to RFC 3066 for the identification of languages.
     */
    RFC3066: new LitVocabTerm(_NS$f("RFC3066"), dataModel, getLocalStore(), false)
        .addLabel("RFC 3066", "en")
        .addComment("The set of tags constructed according to RFC 3066 for the identification of languages.", "en"),
    /**
     * The set of tags constructed according to RFC 4646 for the identification of languages.
     */
    RFC4646: new LitVocabTerm(_NS$f("RFC4646"), dataModel, getLocalStore(), false)
        .addLabel("RFC 4646", "en")
        .addComment("The set of tags constructed according to RFC 4646 for the identification of languages.", "en"),
    /**
     * The set of tags constructed according to RFC 5646 for the identification of languages.
     */
    RFC5646: new LitVocabTerm(_NS$f("RFC5646"), dataModel, getLocalStore(), false)
        .addLabel("RFC 5646", "en")
        .addComment("The set of tags constructed according to RFC 5646 for the identification of languages.", "en"),
    /**
     * The set of identifiers constructed according to the generic syntax for Uniform Resource Identifiers as specified by the Internet Engineering Task Force.
     */
    URI: new LitVocabTerm(_NS$f("URI"), dataModel, getLocalStore(), false)
        .addLabel("URI", "en")
        .addComment("The set of identifiers constructed according to the generic syntax for Uniform Resource Identifiers as specified by the Internet Engineering Task Force.", "en"),
    /**
     * The set of dates and times constructed according to the W3C Date and Time Formats Specification.
     */
    W3CDTF: new LitVocabTerm(_NS$f("W3CDTF"), dataModel, getLocalStore(), false)
        .addLabel("W3C-DTF", "en")
        .addComment("The set of dates and times constructed according to the W3C Date and Time Formats Specification.", "en"),
    /**
     * A summary of the resource.
     */
    abstract_: new LitVocabTerm(_NS$f("abstract"), dataModel, getLocalStore(), false)
        .addLabel("Abstract", "en")
        .addComment("A summary of the resource.", "en"),
    /**
     * Information about who access the resource or an indication of its security status.
     */
    accessRights: new LitVocabTerm(_NS$f("accessRights"), dataModel, getLocalStore(), false)
        .addLabel("Access Rights", "en")
        .addComment("Information about who access the resource or an indication of its security status.", "en"),
    /**
     * The method by which items are added to a collection.
     */
    accrualMethod: new LitVocabTerm(_NS$f("accrualMethod"), dataModel, getLocalStore(), false)
        .addLabel("Accrual Method", "en")
        .addComment("The method by which items are added to a collection.", "en"),
    /**
     * The frequency with which items are added to a collection.
     */
    accrualPeriodicity: new LitVocabTerm(_NS$f("accrualPeriodicity"), dataModel, getLocalStore(), false)
        .addLabel("Accrual Periodicity", "en")
        .addComment("The frequency with which items are added to a collection.", "en"),
    /**
     * The policy governing the addition of items to a collection.
     */
    accrualPolicy: new LitVocabTerm(_NS$f("accrualPolicy"), dataModel, getLocalStore(), false)
        .addLabel("Accrual Policy", "en")
        .addComment("The policy governing the addition of items to a collection.", "en"),
    /**
     * An alternative name for the resource.
     */
    alternative: new LitVocabTerm(_NS$f("alternative"), dataModel, getLocalStore(), false)
        .addLabel("Alternative Title", "en")
        .addComment("An alternative name for the resource.", "en"),
    /**
     * A class of agents for whom the resource is intended or useful.
     */
    audience: new LitVocabTerm(_NS$f("audience"), dataModel, getLocalStore(), false)
        .addLabel("Audience", "en")
        .addComment("A class of agents for whom the resource is intended or useful.", "en"),
    /**
     * Date that the resource became or will become available.
     */
    available: new LitVocabTerm(_NS$f("available"), dataModel, getLocalStore(), false)
        .addLabel("Date Available", "en")
        .addComment("Date that the resource became or will become available.", "en"),
    /**
     * A bibliographic reference for the resource.
     */
    bibliographicCitation: new LitVocabTerm(_NS$f("bibliographicCitation"), dataModel, getLocalStore(), false)
        .addLabel("Bibliographic Citation", "en")
        .addComment("A bibliographic reference for the resource.", "en"),
    /**
     * An established standard to which the described resource conforms.
     */
    conformsTo: new LitVocabTerm(_NS$f("conformsTo"), dataModel, getLocalStore(), false)
        .addLabel("Conforms To", "en")
        .addComment("An established standard to which the described resource conforms.", "en"),
    /**
     * An entity responsible for making contributions to the resource.
     */
    contributor: new LitVocabTerm(_NS$f("contributor"), dataModel, getLocalStore(), false)
        .addLabel("Contributor", "en")
        .addComment("An entity responsible for making contributions to the resource.", "en"),
    /**
     * The spatial or temporal topic of the resource, spatial applicability of the resource, or jurisdiction under which the resource is relevant.
     */
    coverage: new LitVocabTerm(_NS$f("coverage"), dataModel, getLocalStore(), false)
        .addLabel("Coverage", "en")
        .addComment("The spatial or temporal topic of the resource, spatial applicability of the resource, or jurisdiction under which the resource is relevant.", "en"),
    /**
     * Date of creation of the resource.
     */
    created: new LitVocabTerm(_NS$f("created"), dataModel, getLocalStore(), false)
        .addLabel("Date Created", "en")
        .addComment("Date of creation of the resource.", "en"),
    /**
     * An entity responsible for making the resource.
     */
    creator: new LitVocabTerm(_NS$f("creator"), dataModel, getLocalStore(), false)
        .addLabel("Creator", "en")
        .addComment("An entity responsible for making the resource.", "en"),
    /**
     * A point or period of time associated with an event in the lifecycle of the resource.
     */
    date: new LitVocabTerm(_NS$f("date"), dataModel, getLocalStore(), false)
        .addLabel("Date", "en")
        .addComment("A point or period of time associated with an event in the lifecycle of the resource.", "en"),
    /**
     * Date of acceptance of the resource.
     */
    dateAccepted: new LitVocabTerm(_NS$f("dateAccepted"), dataModel, getLocalStore(), false)
        .addLabel("Date Accepted", "en")
        .addComment("Date of acceptance of the resource.", "en"),
    /**
     * Date of copyright of the resource.
     */
    dateCopyrighted: new LitVocabTerm(_NS$f("dateCopyrighted"), dataModel, getLocalStore(), false)
        .addLabel("Date Copyrighted", "en")
        .addComment("Date of copyright of the resource.", "en"),
    /**
     * Date of submission of the resource.
     */
    dateSubmitted: new LitVocabTerm(_NS$f("dateSubmitted"), dataModel, getLocalStore(), false)
        .addLabel("Date Submitted", "en")
        .addComment("Date of submission of the resource.", "en"),
    /**
     * A class of agents, defined in terms of progression through an educational or training context, for which the described resource is intended.
     */
    educationLevel: new LitVocabTerm(_NS$f("educationLevel"), dataModel, getLocalStore(), false)
        .addLabel("Audience Education Level", "en")
        .addComment("A class of agents, defined in terms of progression through an educational or training context, for which the described resource is intended.", "en"),
    /**
     * The size or duration of the resource.
     */
    extent: new LitVocabTerm(_NS$f("extent"), dataModel, getLocalStore(), false)
        .addLabel("Extent", "en")
        .addComment("The size or duration of the resource.", "en"),
    /**
     * The file format, physical medium, or dimensions of the resource.
     */
    format: new LitVocabTerm(_NS$f("format"), dataModel, getLocalStore(), false)
        .addLabel("Format", "en")
        .addComment("The file format, physical medium, or dimensions of the resource.", "en"),
    /**
     * A related resource that is substantially the same as the pre-existing described resource, but in another format.
     */
    hasFormat: new LitVocabTerm(_NS$f("hasFormat"), dataModel, getLocalStore(), false)
        .addLabel("Has Format", "en")
        .addComment("A related resource that is substantially the same as the pre-existing described resource, but in another format.", "en"),
    /**
     * A related resource that is included either physically or logically in the described resource.
     */
    hasPart: new LitVocabTerm(_NS$f("hasPart"), dataModel, getLocalStore(), false)
        .addLabel("Has Part", "en")
        .addComment("A related resource that is included either physically or logically in the described resource.", "en"),
    /**
     * A related resource that is a version, edition, or adaptation of the described resource.
     */
    hasVersion: new LitVocabTerm(_NS$f("hasVersion"), dataModel, getLocalStore(), false)
        .addLabel("Has Version", "en")
        .addComment("A related resource that is a version, edition, or adaptation of the described resource.", "en"),
    /**
     * An unambiguous reference to the resource within a given context.
     */
    identifier: new LitVocabTerm(_NS$f("identifier"), dataModel, getLocalStore(), false)
        .addLabel("Identifier", "en")
        .addComment("An unambiguous reference to the resource within a given context.", "en"),
    /**
     * A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.
     */
    instructionalMethod: new LitVocabTerm(_NS$f("instructionalMethod"), dataModel, getLocalStore(), false)
        .addLabel("Instructional Method", "en")
        .addComment("A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.", "en"),
    /**
     * A pre-existing related resource that is substantially the same as the described resource, but in another format.
     */
    isFormatOf: new LitVocabTerm(_NS$f("isFormatOf"), dataModel, getLocalStore(), false)
        .addLabel("Is Format Of", "en")
        .addComment("A pre-existing related resource that is substantially the same as the described resource, but in another format.", "en"),
    /**
     * A related resource in which the described resource is physically or logically included.
     */
    isPartOf: new LitVocabTerm(_NS$f("isPartOf"), dataModel, getLocalStore(), false)
        .addLabel("Is Part Of", "en")
        .addComment("A related resource in which the described resource is physically or logically included.", "en"),
    /**
     * A related resource that references, cites, or otherwise points to the described resource.
     */
    isReferencedBy: new LitVocabTerm(_NS$f("isReferencedBy"), dataModel, getLocalStore(), false)
        .addLabel("Is Referenced By", "en")
        .addComment("A related resource that references, cites, or otherwise points to the described resource.", "en"),
    /**
     * A related resource that supplants, displaces, or supersedes the described resource.
     */
    isReplacedBy: new LitVocabTerm(_NS$f("isReplacedBy"), dataModel, getLocalStore(), false)
        .addLabel("Is Replaced By", "en")
        .addComment("A related resource that supplants, displaces, or supersedes the described resource.", "en"),
    /**
     * A related resource that requires the described resource to support its function, delivery, or coherence.
     */
    isRequiredBy: new LitVocabTerm(_NS$f("isRequiredBy"), dataModel, getLocalStore(), false)
        .addLabel("Is Required By", "en")
        .addComment("A related resource that requires the described resource to support its function, delivery, or coherence.", "en"),
    /**
     * A related resource of which the described resource is a version, edition, or adaptation.
     */
    isVersionOf: new LitVocabTerm(_NS$f("isVersionOf"), dataModel, getLocalStore(), false)
        .addLabel("Is Version Of", "en")
        .addComment("A related resource of which the described resource is a version, edition, or adaptation.", "en"),
    /**
     * A language of the resource.
     */
    language: new LitVocabTerm(_NS$f("language"), dataModel, getLocalStore(), false)
        .addLabel("Language", "en")
        .addComment("A language of the resource.", "en"),
    /**
     * A legal document giving official permission to do something with the resource.
     */
    license: new LitVocabTerm(_NS$f("license"), dataModel, getLocalStore(), false)
        .addLabel("License", "en")
        .addComment("A legal document giving official permission to do something with the resource.", "en"),
    /**
     * An entity that mediates access to the resource.
     */
    mediator: new LitVocabTerm(_NS$f("mediator"), dataModel, getLocalStore(), false)
        .addLabel("Mediator", "en")
        .addComment("An entity that mediates access to the resource.", "en"),
    /**
     * The material or physical carrier of the resource.
     */
    medium: new LitVocabTerm(_NS$f("medium"), dataModel, getLocalStore(), false)
        .addLabel("Medium", "en")
        .addComment("The material or physical carrier of the resource.", "en"),
    /**
     * A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.
     */
    provenance: new LitVocabTerm(_NS$f("provenance"), dataModel, getLocalStore(), false)
        .addLabel("Provenance", "en")
        .addComment("A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.", "en"),
    /**
     * A related resource that is referenced, cited, or otherwise pointed to by the described resource.
     */
    references: new LitVocabTerm(_NS$f("references"), dataModel, getLocalStore(), false)
        .addLabel("References", "en")
        .addComment("A related resource that is referenced, cited, or otherwise pointed to by the described resource.", "en"),
    /**
     * A related resource.
     */
    relation: new LitVocabTerm(_NS$f("relation"), dataModel, getLocalStore(), false)
        .addLabel("Relation", "en")
        .addComment("A related resource.", "en"),
    /**
     * A related resource that is supplanted, displaced, or superseded by the described resource.
     */
    replaces: new LitVocabTerm(_NS$f("replaces"), dataModel, getLocalStore(), false)
        .addLabel("Replaces", "en")
        .addComment("A related resource that is supplanted, displaced, or superseded by the described resource.", "en"),
    /**
     * A related resource that is required by the described resource to support its function, delivery, or coherence.
     */
    requires: new LitVocabTerm(_NS$f("requires"), dataModel, getLocalStore(), false)
        .addLabel("Requires", "en")
        .addComment("A related resource that is required by the described resource to support its function, delivery, or coherence.", "en"),
    /**
     * Information about rights held in and over the resource.
     */
    rights: new LitVocabTerm(_NS$f("rights"), dataModel, getLocalStore(), false)
        .addLabel("Rights", "en")
        .addComment("Information about rights held in and over the resource.", "en"),
    /**
     * A person or organization owning or managing rights over the resource.
     */
    rightsHolder: new LitVocabTerm(_NS$f("rightsHolder"), dataModel, getLocalStore(), false)
        .addLabel("Rights Holder", "en")
        .addComment("A person or organization owning or managing rights over the resource.", "en"),
    /**
     * A related resource from which the described resource is derived.
     */
    source: new LitVocabTerm(_NS$f("source"), dataModel, getLocalStore(), false)
        .addLabel("Source", "en")
        .addComment("A related resource from which the described resource is derived.", "en"),
    /**
     * Spatial characteristics of the resource.
     */
    spatial: new LitVocabTerm(_NS$f("spatial"), dataModel, getLocalStore(), false)
        .addLabel("Spatial Coverage", "en")
        .addComment("Spatial characteristics of the resource.", "en"),
    /**
     * A topic of the resource.
     */
    subject: new LitVocabTerm(_NS$f("subject"), dataModel, getLocalStore(), false)
        .addLabel("Subject", "en")
        .addComment("A topic of the resource.", "en"),
    /**
     * A list of subunits of the resource.
     */
    tableOfContents: new LitVocabTerm(_NS$f("tableOfContents"), dataModel, getLocalStore(), false)
        .addLabel("Table Of Contents", "en")
        .addComment("A list of subunits of the resource.", "en"),
    /**
     * Temporal characteristics of the resource.
     */
    temporal: new LitVocabTerm(_NS$f("temporal"), dataModel, getLocalStore(), false)
        .addLabel("Temporal Coverage", "en")
        .addComment("Temporal characteristics of the resource.", "en"),
    /**
     * The nature or genre of the resource.
     */
    type: new LitVocabTerm(_NS$f("type"), dataModel, getLocalStore(), false)
        .addLabel("Type", "en")
        .addComment("The nature or genre of the resource.", "en"),
    /**
     * Date (often a range) of validity of a resource.
     */
    valid: new LitVocabTerm(_NS$f("valid"), dataModel, getLocalStore(), false)
        .addLabel("Date Valid", "en")
        .addComment("Date (often a range) of validity of a resource.", "en"),
};

var namedNode$h = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$g(localName) {
    return namedNode$h("https://www.w3.org/ns/activitystreams#" + localName);
}
var AS = {
    PREFIX: "as",
    NAMESPACE: "https://www.w3.org/ns/activitystreams#",
    PREFIX_AND_NAMESPACE: { "as": "https://www.w3.org/ns/activitystreams#" },
    NS: _NS$g,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An Object representing some form of Action that has been taken
     */
    Activity: new LitVocabTerm(_NS$g("Activity"), dataModel, getLocalStore(), false)
        .addLabel("Activity", "en")
        .addComment("An Object representing some form of Action that has been taken", "en"),
    /**
     * Object
     */
    Object: new LitVocabTerm(_NS$g("Object"), dataModel, getLocalStore(), false)
        .addLabel("Object", "en"),
    /**
     * Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model
     */
    Link: new LitVocabTerm(_NS$g("Link"), dataModel, getLocalStore(), false)
        .addLabel("Link", "en")
        .addComment("Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model", "en"),
    /**
     * An ordered or unordered collection of Objects or Links
     */
    Collection: new LitVocabTerm(_NS$g("Collection"), dataModel, getLocalStore(), false)
        .addLabel("Collection", "en")
        .addComment("An ordered or unordered collection of Objects or Links", "en"),
    /**
     * A subset of items from a Collection
     */
    CollectionPage: new LitVocabTerm(_NS$g("CollectionPage"), dataModel, getLocalStore(), false)
        .addLabel("CollectionPage", "en")
        .addComment("A subset of items from a Collection", "en"),
    /**
     * An Image file
     */
    Image: new LitVocabTerm(_NS$g("Image"), dataModel, getLocalStore(), false)
        .addLabel("Image", "en")
        .addComment("An Image file", "en"),
    /**
     * A rdf:List variant for Objects and Links
     */
    OrderedItems: new LitVocabTerm(_NS$g("OrderedItems"), dataModel, getLocalStore(), false)
        .addLabel("OrderedItems", "en")
        .addComment("A rdf:List variant for Objects and Links", "en"),
    /**
     * Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)
     */
    Relationship: new LitVocabTerm(_NS$g("Relationship"), dataModel, getLocalStore(), false)
        .addLabel("Relationship", "en")
        .addComment("Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)", "en"),
    /**
     * A question of any sort.
     */
    Question: new LitVocabTerm(_NS$g("Question"), dataModel, getLocalStore(), false)
        .addLabel("Question", "en")
        .addComment("A question of any sort.", "en"),
    /**
     * A Profile Document
     */
    Profile: new LitVocabTerm(_NS$g("Profile"), dataModel, getLocalStore(), false)
        .addLabel("Profile", "en")
        .addComment("A Profile Document", "en"),
    /**
     * A placeholder for a deleted object
     */
    Tombstone: new LitVocabTerm(_NS$g("Tombstone"), dataModel, getLocalStore(), false)
        .addLabel("Tombstone", "en")
        .addComment("A placeholder for a deleted object", "en"),
    /**
     * A physical or logical location
     */
    Place: new LitVocabTerm(_NS$g("Place"), dataModel, getLocalStore(), false)
        .addLabel("Place", "en")
        .addComment("A physical or logical location", "en"),
    /**
     * An ordered subset of items from an OrderedCollection
     */
    OrderedCollectionPage: new LitVocabTerm(_NS$g("OrderedCollectionPage"), dataModel, getLocalStore(), false)
        .addLabel("OrderedCollectionPage", "en")
        .addComment("An ordered subset of items from an OrderedCollection", "en"),
    /**
     * Actor accepts the Object
     */
    Accept: new LitVocabTerm(_NS$g("Accept"), dataModel, getLocalStore(), false)
        .addLabel("Accept", "en")
        .addComment("Actor accepts the Object", "en"),
    /**
     * Block
     */
    Block: new LitVocabTerm(_NS$g("Block"), dataModel, getLocalStore(), false)
        .addLabel("Block", "en"),
    /**
     * Actor is ignoring the Object
     */
    Ignore: new LitVocabTerm(_NS$g("Ignore"), dataModel, getLocalStore(), false)
        .addLabel("Ignore", "en")
        .addComment("Actor is ignoring the Object", "en"),
    /**
     * An Activity that has no direct object
     */
    IntransitiveActivity: new LitVocabTerm(_NS$g("IntransitiveActivity"), dataModel, getLocalStore(), false)
        .addLabel("IntransitiveActivity", "en")
        .addComment("An Activity that has no direct object", "en"),
    /**
     * To Add an Object or Link to Something
     */
    Add: new LitVocabTerm(_NS$g("Add"), dataModel, getLocalStore(), false)
        .addLabel("Add", "en")
        .addComment("To Add an Object or Link to Something", "en"),
    /**
     * Actor announces the object to the target
     */
    Announce: new LitVocabTerm(_NS$g("Announce"), dataModel, getLocalStore(), false)
        .addLabel("Announce", "en")
        .addComment("Actor announces the object to the target", "en"),
    /**
     * Represents a software application of any sort
     */
    Application: new LitVocabTerm(_NS$g("Application"), dataModel, getLocalStore(), false)
        .addLabel("Application", "en")
        .addComment("Represents a software application of any sort", "en"),
    /**
     * To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a "check-in")
     */
    Arrive: new LitVocabTerm(_NS$g("Arrive"), dataModel, getLocalStore(), false)
        .addLabel("Arrive", "en")
        .addComment("To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a \"check-in\")", "en"),
    /**
     * A written work. Typically several paragraphs long. For example, a blog post or a news article.
     */
    Article: new LitVocabTerm(_NS$g("Article"), dataModel, getLocalStore(), false)
        .addLabel("Article", "en")
        .addComment("A written work. Typically several paragraphs long. For example, a blog post or a news article.", "en"),
    /**
     * An audio file
     */
    Audio: new LitVocabTerm(_NS$g("Audio"), dataModel, getLocalStore(), false)
        .addLabel("Audio", "en")
        .addComment("An audio file", "en"),
    /**
     * Represents a digital document/file of any sort
     */
    Document: new LitVocabTerm(_NS$g("Document"), dataModel, getLocalStore(), false)
        .addLabel("Document", "en")
        .addComment("Represents a digital document/file of any sort", "en"),
    /**
     * A variation of Collection in which items are strictly ordered
     */
    OrderedCollection: new LitVocabTerm(_NS$g("OrderedCollection"), dataModel, getLocalStore(), false)
        .addLabel("OrderedCollection", "en")
        .addComment("A variation of Collection in which items are strictly ordered", "en"),
    /**
     * To Create Something
     */
    Create: new LitVocabTerm(_NS$g("Create"), dataModel, getLocalStore(), false)
        .addLabel("Create", "en")
        .addComment("To Create Something", "en"),
    /**
     * To Delete Something
     */
    Delete: new LitVocabTerm(_NS$g("Delete"), dataModel, getLocalStore(), false)
        .addLabel("Delete", "en")
        .addComment("To Delete Something", "en"),
    /**
     * The actor dislikes the object
     */
    Dislike: new LitVocabTerm(_NS$g("Dislike"), dataModel, getLocalStore(), false)
        .addLabel("Dislike", "en")
        .addComment("The actor dislikes the object", "en"),
    /**
     * An Event of any kind
     */
    Event: new LitVocabTerm(_NS$g("Event"), dataModel, getLocalStore(), false)
        .addLabel("Event", "en")
        .addComment("An Event of any kind", "en"),
    /**
     * To flag something (e.g. flag as inappropriate, flag as spam, etc)
     */
    Flag: new LitVocabTerm(_NS$g("Flag"), dataModel, getLocalStore(), false)
        .addLabel("Flag", "en")
        .addComment("To flag something (e.g. flag as inappropriate, flag as spam, etc)", "en"),
    /**
     * To Express Interest in Something
     */
    Follow: new LitVocabTerm(_NS$g("Follow"), dataModel, getLocalStore(), false)
        .addLabel("Follow", "en")
        .addComment("To Express Interest in Something", "en"),
    /**
     * A Group of any kind.
     */
    Group: new LitVocabTerm(_NS$g("Group"), dataModel, getLocalStore(), false)
        .addLabel("Group", "en")
        .addComment("A Group of any kind.", "en"),
    /**
     * To invite someone or something to something
     */
    Invite: new LitVocabTerm(_NS$g("Invite"), dataModel, getLocalStore(), false)
        .addLabel("Invite", "en")
        .addComment("To invite someone or something to something", "en"),
    /**
     * To Offer something to someone or something
     */
    Offer: new LitVocabTerm(_NS$g("Offer"), dataModel, getLocalStore(), false)
        .addLabel("Offer", "en")
        .addComment("To Offer something to someone or something", "en"),
    /**
     * To Join Something
     */
    Join: new LitVocabTerm(_NS$g("Join"), dataModel, getLocalStore(), false)
        .addLabel("Join", "en")
        .addComment("To Join Something", "en"),
    /**
     * To Leave Something
     */
    Leave: new LitVocabTerm(_NS$g("Leave"), dataModel, getLocalStore(), false)
        .addLabel("Leave", "en")
        .addComment("To Leave Something", "en"),
    /**
     * To Like Something
     */
    Like: new LitVocabTerm(_NS$g("Like"), dataModel, getLocalStore(), false)
        .addLabel("Like", "en")
        .addComment("To Like Something", "en"),
    /**
     * The actor viewed the object
     */
    View: new LitVocabTerm(_NS$g("View"), dataModel, getLocalStore(), false)
        .addLabel("View", "en")
        .addComment("The actor viewed the object", "en"),
    /**
     * The actor listened to the object
     */
    Listen: new LitVocabTerm(_NS$g("Listen"), dataModel, getLocalStore(), false)
        .addLabel("Listen", "en")
        .addComment("The actor listened to the object", "en"),
    /**
     * The actor read the object
     */
    Read: new LitVocabTerm(_NS$g("Read"), dataModel, getLocalStore(), false)
        .addLabel("Read", "en")
        .addComment("The actor read the object", "en"),
    /**
     * The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from.
     */
    Move: new LitVocabTerm(_NS$g("Move"), dataModel, getLocalStore(), false)
        .addLabel("Move", "en")
        .addCommentNoLanguage("The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from."),
    /**
     * The actor is traveling to the target. The origin specifies where the actor is traveling from.
     */
    Travel: new LitVocabTerm(_NS$g("Travel"), dataModel, getLocalStore(), false)
        .addLabel("Travel", "en")
        .addCommentNoLanguage("The actor is traveling to the target. The origin specifies where the actor is traveling from."),
    /**
     * A specialized Link that represents an @mention
     */
    Mention: new LitVocabTerm(_NS$g("Mention"), dataModel, getLocalStore(), false)
        .addLabel("Mention", "en")
        .addComment("A specialized Link that represents an @mention", "en"),
    /**
     * A Short note, typically less than a single paragraph. A "tweet" is an example, or a "status update"
     */
    Note: new LitVocabTerm(_NS$g("Note"), dataModel, getLocalStore(), false)
        .addLabel("Note", "en")
        .addComment("A Short note, typically less than a single paragraph. A \"tweet\" is an example, or a \"status update\"", "en"),
    /**
     * A Web Page
     */
    Page: new LitVocabTerm(_NS$g("Page"), dataModel, getLocalStore(), false)
        .addLabel("Page", "en")
        .addComment("A Web Page", "en"),
    /**
     * A Person
     */
    Person: new LitVocabTerm(_NS$g("Person"), dataModel, getLocalStore(), false)
        .addLabel("Person", "en")
        .addComment("A Person", "en"),
    /**
     * An Organization
     */
    Organization: new LitVocabTerm(_NS$g("Organization"), dataModel, getLocalStore(), false)
        .addLabel("Organization", "en")
        .addComment("An Organization", "en"),
    /**
     * Actor rejects the Object
     */
    Reject: new LitVocabTerm(_NS$g("Reject"), dataModel, getLocalStore(), false)
        .addLabel("Reject", "en")
        .addComment("Actor rejects the Object", "en"),
    /**
     * To Remove Something
     */
    Remove: new LitVocabTerm(_NS$g("Remove"), dataModel, getLocalStore(), false)
        .addLabel("Remove", "en")
        .addComment("To Remove Something", "en"),
    /**
     * A service provided by some entity
     */
    Service: new LitVocabTerm(_NS$g("Service"), dataModel, getLocalStore(), false)
        .addLabel("Service", "en")
        .addComment("A service provided by some entity", "en"),
    /**
     * Actor tentatively accepts the Object
     */
    TentativeAccept: new LitVocabTerm(_NS$g("TentativeAccept"), dataModel, getLocalStore(), false)
        .addLabel("TentativeAccept", "en")
        .addComment("Actor tentatively accepts the Object", "en"),
    /**
     * Actor tentatively rejects the object
     */
    TentativeReject: new LitVocabTerm(_NS$g("TentativeReject"), dataModel, getLocalStore(), false)
        .addLabel("TentativeReject", "en")
        .addComment("Actor tentatively rejects the object", "en"),
    /**
     * To Undo Something. This would typically be used to indicate that a previous Activity has been undone.
     */
    Undo: new LitVocabTerm(_NS$g("Undo"), dataModel, getLocalStore(), false)
        .addLabel("Undo", "en")
        .addComment("To Undo Something. This would typically be used to indicate that a previous Activity has been undone.", "en"),
    /**
     * To Update/Modify Something
     */
    Update: new LitVocabTerm(_NS$g("Update"), dataModel, getLocalStore(), false)
        .addLabel("Update", "en")
        .addComment("To Update/Modify Something", "en"),
    /**
     * A Video document of any kind.
     */
    Video: new LitVocabTerm(_NS$g("Video"), dataModel, getLocalStore(), false)
        .addLabel("Video", "en")
        .addComment("A Video document of any kind.", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Subproperty of as:attributedTo that identifies the primary actor
     */
    actor: new LitVocabTerm(_NS$g("actor"), dataModel, getLocalStore(), false)
        .addLabel("actor", "en")
        .addComment("Subproperty of as:attributedTo that identifies the primary actor", "en"),
    /**
     * Identifies an entity to which an object is attributed
     */
    attributedTo: new LitVocabTerm(_NS$g("attributedTo"), dataModel, getLocalStore(), false)
        .addLabel("attributedTo", "en")
        .addComment("Identifies an entity to which an object is attributed", "en"),
    /**
     * attachment
     */
    attachment: new LitVocabTerm(_NS$g("attachment"), dataModel, getLocalStore(), false)
        .addLabel("attachment", "en"),
    /**
     * attachments
     */
    attachments: new LitVocabTerm(_NS$g("attachments"), dataModel, getLocalStore(), false)
        .addLabel("attachments", "en"),
    /**
     * Identifies the author of an object. Deprecated. Use as:attributedTo instead
     */
    author: new LitVocabTerm(_NS$g("author"), dataModel, getLocalStore(), false)
        .addLabel("author", "en")
        .addComment("Identifies the author of an object. Deprecated. Use as:attributedTo instead", "en"),
    /**
     * bcc
     */
    bcc: new LitVocabTerm(_NS$g("bcc"), dataModel, getLocalStore(), false)
        .addLabel("bcc", "en"),
    /**
     * bto
     */
    bto: new LitVocabTerm(_NS$g("bto"), dataModel, getLocalStore(), false)
        .addLabel("bto", "en"),
    /**
     * cc
     */
    cc: new LitVocabTerm(_NS$g("cc"), dataModel, getLocalStore(), false)
        .addLabel("cc", "en"),
    /**
     * Specifies the context within which an object exists or an activity was performed
     */
    context: new LitVocabTerm(_NS$g("context"), dataModel, getLocalStore(), false)
        .addLabel("context", "en")
        .addComment("Specifies the context within which an object exists or an activity was performed", "en"),
    /**
     * current
     */
    current: new LitVocabTerm(_NS$g("current"), dataModel, getLocalStore(), false)
        .addLabel("current", "en"),
    /**
     * first
     */
    first: new LitVocabTerm(_NS$g("first"), dataModel, getLocalStore(), false)
        .addLabel("first", "en"),
    /**
     * generator
     */
    generator: new LitVocabTerm(_NS$g("generator"), dataModel, getLocalStore(), false)
        .addLabel("generator", "en"),
    /**
     * icon
     */
    icon: new LitVocabTerm(_NS$g("icon"), dataModel, getLocalStore(), false)
        .addLabel("icon", "en"),
    /**
     * image
     */
    image: new LitVocabTerm(_NS$g("image"), dataModel, getLocalStore(), false)
        .addLabel("image", "en"),
    /**
     * inReplyTo
     */
    inReplyTo: new LitVocabTerm(_NS$g("inReplyTo"), dataModel, getLocalStore(), false)
        .addLabel("inReplyTo", "en"),
    /**
     * items
     */
    items: new LitVocabTerm(_NS$g("items"), dataModel, getLocalStore(), false)
        .addLabel("items", "en"),
    /**
     * last
     */
    last: new LitVocabTerm(_NS$g("last"), dataModel, getLocalStore(), false)
        .addLabel("last", "en"),
    /**
     * location
     */
    location: new LitVocabTerm(_NS$g("location"), dataModel, getLocalStore(), false)
        .addLabel("location", "en"),
    /**
     * next
     */
    next: new LitVocabTerm(_NS$g("next"), dataModel, getLocalStore(), false)
        .addLabel("next", "en"),
    /**
     * object
     */
    object: new LitVocabTerm(_NS$g("object"), dataModel, getLocalStore(), false)
        .addLabel("object", "en"),
    /**
     * Describes a possible exclusive answer or option for a question.
     */
    oneOf: new LitVocabTerm(_NS$g("oneOf"), dataModel, getLocalStore(), false)
        .addLabel("oneOf", "en")
        .addComment("Describes a possible exclusive answer or option for a question.", "en"),
    /**
     * Describes a possible inclusive answer or option for a question.
     */
    anyOf: new LitVocabTerm(_NS$g("anyOf"), dataModel, getLocalStore(), false)
        .addLabel("oneOf", "en")
        .addComment("Describes a possible inclusive answer or option for a question.", "en"),
    /**
     * prev
     */
    prev: new LitVocabTerm(_NS$g("prev"), dataModel, getLocalStore(), false)
        .addLabel("prev", "en"),
    /**
     * preview
     */
    preview: new LitVocabTerm(_NS$g("preview"), dataModel, getLocalStore(), false)
        .addLabel("preview", "en"),
    /**
     * provider
     */
    provider: new LitVocabTerm(_NS$g("provider"), dataModel, getLocalStore(), false)
        .addLabel("provider", "en"),
    /**
     * replies
     */
    replies: new LitVocabTerm(_NS$g("replies"), dataModel, getLocalStore(), false)
        .addLabel("replies", "en"),
    /**
     * result
     */
    result: new LitVocabTerm(_NS$g("result"), dataModel, getLocalStore(), false)
        .addLabel("result", "en"),
    /**
     * audience
     */
    audience: new LitVocabTerm(_NS$g("audience"), dataModel, getLocalStore(), false)
        .addLabel("audience", "en"),
    /**
     * partOf
     */
    partOf: new LitVocabTerm(_NS$g("partOf"), dataModel, getLocalStore(), false)
        .addLabel("partOf", "en"),
    /**
     * tag
     */
    tag: new LitVocabTerm(_NS$g("tag"), dataModel, getLocalStore(), false)
        .addLabel("tag", "en"),
    /**
     * tags
     */
    tags: new LitVocabTerm(_NS$g("tags"), dataModel, getLocalStore(), false)
        .addLabel("tags", "en"),
    /**
     * target
     */
    target: new LitVocabTerm(_NS$g("target"), dataModel, getLocalStore(), false)
        .addLabel("target", "en"),
    /**
     * For certain activities, specifies the entity from which the action is directed.
     */
    origin: new LitVocabTerm(_NS$g("origin"), dataModel, getLocalStore(), false)
        .addLabel("origin", "en")
        .addComment("For certain activities, specifies the entity from which the action is directed.", "en"),
    /**
     * Indentifies an object used (or to be used) to complete an activity
     */
    instrument: new LitVocabTerm(_NS$g("instrument"), dataModel, getLocalStore(), false)
        .addLabel("instrument", "en")
        .addComment("Indentifies an object used (or to be used) to complete an activity", "en"),
    /**
     * to
     */
    to: new LitVocabTerm(_NS$g("to"), dataModel, getLocalStore(), false)
        .addLabel("to", "en"),
    /**
     * Specifies a link to a specific representation of the Object
     */
    url: new LitVocabTerm(_NS$g("url"), dataModel, getLocalStore(), false)
        .addLabel("url", "en")
        .addComment("Specifies a link to a specific representation of the Object", "en"),
    /**
     * On a Relationship object, identifies the subject. e.g. when saying "John is connected to Sally", 'subject' refers to 'John'
     */
    subject: new LitVocabTerm(_NS$g("subject"), dataModel, getLocalStore(), false)
        .addLabel("a", "en")
        .addComment("On a Relationship object, identifies the subject. e.g. when saying \"John is connected to Sally\", 'subject' refers to 'John'", "en"),
    /**
     * On a Relationship object, describes the type of relationship
     */
    relationship: new LitVocabTerm(_NS$g("relationship"), dataModel, getLocalStore(), false)
        .addLabel("relationship", "en")
        .addComment("On a Relationship object, describes the type of relationship", "en"),
    /**
     * On a Profile object, describes the object described by the profile
     */
    describes: new LitVocabTerm(_NS$g("describes"), dataModel, getLocalStore(), false)
        .addLabel("describes", "en")
        .addComment("On a Profile object, describes the object described by the profile", "en"),
    /**
     * On a Tombstone object, describes the former type of the deleted object
     */
    formerType: new LitVocabTerm(_NS$g("formerType"), dataModel, getLocalStore(), false)
        .addLabel("formerType", "en")
        .addComment("On a Tombstone object, describes the former type of the deleted object", "en"),
    /**
     * Specifies the accuracy around the point established by the longitude and latitude
     */
    accuracy: new LitVocabTerm(_NS$g("accuracy"), dataModel, getLocalStore(), false)
        .addLabel("accuracy", "en")
        .addComment("Specifies the accuracy around the point established by the longitude and latitude", "en"),
    /**
     * The altitude of a place
     */
    altitude: new LitVocabTerm(_NS$g("altitude"), dataModel, getLocalStore(), false)
        .addLabel("altitude", "en")
        .addComment("The altitude of a place", "en"),
    /**
     * The content of the object.
     */
    content: new LitVocabTerm(_NS$g("content"), dataModel, getLocalStore(), false)
        .addLabel("content", "en")
        .addComment("The content of the object.", "en"),
    /**
     * name
     */
    name: new LitVocabTerm(_NS$g("name"), dataModel, getLocalStore(), false)
        .addLabel("name", "en"),
    /**
     * downstreamDuplicates
     */
    downstreamDuplicates: new LitVocabTerm(_NS$g("downstreamDuplicates"), dataModel, getLocalStore(), false)
        .addLabel("downstreamDuplicates", "en"),
    /**
     * The duration of the object
     */
    duration: new LitVocabTerm(_NS$g("duration"), dataModel, getLocalStore(), false)
        .addLabel("duration", "en")
        .addComment("The duration of the object", "en"),
    /**
     * The ending time of the object
     */
    endTime: new LitVocabTerm(_NS$g("endTime"), dataModel, getLocalStore(), false)
        .addLabel("endTime", "en")
        .addComment("The ending time of the object", "en"),
    /**
     * The display height expressed as device independent pixels
     */
    height: new LitVocabTerm(_NS$g("height"), dataModel, getLocalStore(), false)
        .addLabel("height", "en")
        .addComment("The display height expressed as device independent pixels", "en"),
    /**
     * The target URI of the Link
     */
    href: new LitVocabTerm(_NS$g("href"), dataModel, getLocalStore(), false)
        .addLabel("href", "en")
        .addComment("The target URI of the Link", "en"),
    /**
     * A hint about the language of the referenced resource
     */
    hreflang: new LitVocabTerm(_NS$g("hreflang"), dataModel, getLocalStore(), false)
        .addLabel("hreflang", "en")
        .addComment("A hint about the language of the referenced resource", "en"),
    /**
     * id
     */
    id: new LitVocabTerm(_NS$g("id"), dataModel, getLocalStore(), false)
        .addLabel("id", "en"),
    /**
     * The latitude
     */
    latitude: new LitVocabTerm(_NS$g("latitude"), dataModel, getLocalStore(), false)
        .addLabel("latitude", "en")
        .addComment("The latitude", "en"),
    /**
     * The longitude
     */
    longitude: new LitVocabTerm(_NS$g("longitude"), dataModel, getLocalStore(), false)
        .addLabel("longitude", "en")
        .addComment("The longitude", "en"),
    /**
     * The MIME Media Type
     */
    mediaType: new LitVocabTerm(_NS$g("mediaType"), dataModel, getLocalStore(), false)
        .addLabel("mediaType", "en")
        .addComment("The MIME Media Type", "en"),
    /**
     * objectType
     */
    objectType: new LitVocabTerm(_NS$g("objectType"), dataModel, getLocalStore(), false)
        .addLabel("objectType", "en"),
    /**
     * Specifies the date and time the object was published
     */
    published: new LitVocabTerm(_NS$g("published"), dataModel, getLocalStore(), false)
        .addLabel("published", "en")
        .addComment("Specifies the date and time the object was published", "en"),
    /**
     * Specifies a radius around the point established by the longitude and latitude
     */
    radius: new LitVocabTerm(_NS$g("radius"), dataModel, getLocalStore(), false)
        .addLabel("radius", "en")
        .addComment("Specifies a radius around the point established by the longitude and latitude", "en"),
    /**
     * A numeric rating (>= 0.0, <= 5.0) for the object
     */
    rating: new LitVocabTerm(_NS$g("rating"), dataModel, getLocalStore(), false)
        .addLabel("rating", "en")
        .addComment("A numeric rating (>= 0.0, <= 5.0) for the object", "en"),
    /**
     * The RFC 5988 or HTML5 Link Relation associated with the Link
     */
    rel: new LitVocabTerm(_NS$g("rel"), dataModel, getLocalStore(), false)
        .addLabel("rel", "en")
        .addComment("The RFC 5988 or HTML5 Link Relation associated with the Link", "en"),
    /**
     * In a strictly ordered logical collection, specifies the index position of the first item in the items list
     */
    startIndex: new LitVocabTerm(_NS$g("startIndex"), dataModel, getLocalStore(), false)
        .addLabel("startIndex", "en")
        .addComment("In a strictly ordered logical collection, specifies the index position of the first item in the items list", "en"),
    /**
     * The starting time of the object
     */
    startTime: new LitVocabTerm(_NS$g("startTime"), dataModel, getLocalStore(), false)
        .addLabel("startTime", "en")
        .addComment("The starting time of the object", "en"),
    /**
     * A short summary of the object
     */
    summary: new LitVocabTerm(_NS$g("summary"), dataModel, getLocalStore(), false)
        .addLabel("summary", "en")
        .addComment("A short summary of the object", "en"),
    /**
     * The total number of items in a logical collection
     */
    totalItems: new LitVocabTerm(_NS$g("totalItems"), dataModel, getLocalStore(), false)
        .addLabel("totalItems", "en")
        .addComment("The total number of items in a logical collection", "en"),
    /**
     * Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.
     */
    units: new LitVocabTerm(_NS$g("units"), dataModel, getLocalStore(), false)
        .addLabel("units", "en")
        .addComment("Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.", "en"),
    /**
     * Specifies when the object was last updated
     */
    updated: new LitVocabTerm(_NS$g("updated"), dataModel, getLocalStore(), false)
        .addLabel("updated", "en")
        .addComment("Specifies when the object was last updated", "en"),
    /**
     * upstreamDuplicates
     */
    upstreamDuplicates: new LitVocabTerm(_NS$g("upstreamDuplicates"), dataModel, getLocalStore(), false)
        .addLabel("upstreamDuplicates", "en"),
    /**
     * verb
     */
    verb: new LitVocabTerm(_NS$g("verb"), dataModel, getLocalStore(), false)
        .addLabel("verb", "en"),
    /**
     * Specifies the preferred display width of the content, expressed in terms of device independent pixels.
     */
    width: new LitVocabTerm(_NS$g("width"), dataModel, getLocalStore(), false)
        .addLabel("width", "en")
        .addComment("Specifies the preferred display width of the content, expressed in terms of device independent pixels.", "en"),
    /**
     * Specifies the date and time the object was deleted
     */
    deleted: new LitVocabTerm(_NS$g("deleted"), dataModel, getLocalStore(), false)
        .addLabel("deleted", "en")
        .addComment("Specifies the date and time the object was deleted", "en"),
};

var namedNode$i = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */
function _NS$h(localName) {
    return namedNode$i("http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#" + localName);
}
var RLOG = {
    PREFIX: "rlog",
    NAMESPACE: "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#",
    PREFIX_AND_NAMESPACE: { "rlog": "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#" },
    NS: _NS$h,
    // *****************
    // All the Classes.
    // *****************
    /**
     * look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html
     */
    Level: new LitVocabTerm(_NS$h("Level"), dataModel, getLocalStore(), false)
        .addLabel("Log Level", "en")
        .addComment("look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html ", "en"),
    /**
     * An entry in a log.
     */
    Entry: new LitVocabTerm(_NS$h("Entry"), dataModel, getLocalStore(), false)
        .addLabel("Log Entry", "en")
        .addComment("An entry in a log.", "en"),
    /**
     * A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.
     */
    StatusCode: new LitVocabTerm(_NS$h("StatusCode"), dataModel, getLocalStore(), false)
        .addLabel("Status Code", "en")
        .addComment("A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * The ALL has the lowest possible rank and is intended to turn on all logging.
     */
    ALL: new LitVocabTerm(_NS$h("ALL"), dataModel, getLocalStore(), false)
        .addLabel("ALL", "en")
        .addComment("The ALL has the lowest possible rank and is intended to turn on all logging.", "en"),
    /**
     * Attention: the ids here can change, they are just used to define an order over the levels!
     */
    priority: new LitVocabTerm(_NS$h("priority"), dataModel, getLocalStore(), false)
        .addLabel("logLevel", "en")
        .addComment("Attention: the ids here can change, they are just used to define an order over the levels!", "en"),
    /**
     * The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
     */
    DEBUG: new LitVocabTerm(_NS$h("DEBUG"), dataModel, getLocalStore(), false)
        .addLabel("DEBUG", "en")
        .addComment("The DEBUG Level designates fine-grained informational events that are most useful to debug an application.", "en"),
    /**
     * The ERROR level designates error events that might still allow the application to continue running.
     */
    ERROR: new LitVocabTerm(_NS$h("ERROR"), dataModel, getLocalStore(), false)
        .addLabel("ERROR", "en")
        .addComment("The ERROR level designates error events that might still allow the application to continue running.", "en"),
    /**
     * The FATAL level designates very severe error events that will presumably lead the application to abort.
     */
    FATAL: new LitVocabTerm(_NS$h("FATAL"), dataModel, getLocalStore(), false)
        .addLabel("FATAL", "en")
        .addComment("The FATAL level designates very severe error events that will presumably lead the application to abort.", "en"),
    /**
     * The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
     */
    INFO: new LitVocabTerm(_NS$h("INFO"), dataModel, getLocalStore(), false)
        .addLabel("INFO", "en")
        .addComment("The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.", "en"),
    /**
     * The OFF has the highest possible rank and is intended to turn off logging.
     */
    OFF: new LitVocabTerm(_NS$h("OFF"), dataModel, getLocalStore(), false)
        .addLabel("OFF", "en")
        .addComment("The OFF has the highest possible rank and is intended to turn off logging.", "en"),
    /**
     * The TRACE Level designates finer-grained informational events than the DEBUG.
     */
    TRACE: new LitVocabTerm(_NS$h("TRACE"), dataModel, getLocalStore(), false)
        .addLabel("TRACE", "en")
        .addComment("The TRACE Level designates finer-grained informational events than the DEBUG.", "en"),
    /**
     * The WARN level designates potentially harmful situations.
     */
    WARN: new LitVocabTerm(_NS$h("WARN"), dataModel, getLocalStore(), false)
        .addLabel("WARN", "en")
        .addComment("The WARN level designates potentially harmful situations.", "en"),
    /**
     * Outputs the fully qualified class name of the caller issuing the logging request.
     */
    className: new LitVocabTerm(_NS$h("className"), dataModel, getLocalStore(), false)
        .addLabel("class name", "en")
        .addComment("Outputs the fully qualified class name of the caller issuing the logging request.", "en"),
    /**
     * The numerical value of the code, e.g. 200, 404 or 42.
     */
    codeId: new LitVocabTerm(_NS$h("codeId"), dataModel, getLocalStore(), false)
        .addLabel("code id", "en")
        .addComment("The numerical value of the code, e.g. 200, 404 or 42.", "en"),
    /**
     * Logging datetime (or just date)
     */
    date: new LitVocabTerm(_NS$h("date"), dataModel, getLocalStore(), false)
        .addLabel("Logging datetime (or just date)", "en"),
    /**
     * Links a log message to a status code.
     */
    hasCode: new LitVocabTerm(_NS$h("hasCode"), dataModel, getLocalStore(), false)
        .addLabel("has code", "en")
        .addComment("Links a log message to a status code.", "en"),
    /**
     * logLevel
     */
    level: new LitVocabTerm(_NS$h("level"), dataModel, getLocalStore(), false)
        .addLabel("logLevel", "en"),
    /**
     * Logging message
     */
    message: new LitVocabTerm(_NS$h("message"), dataModel, getLocalStore(), false)
        .addLabel("Logging message", "en"),
    /**
     * If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to.
     */
    resource: new LitVocabTerm(_NS$h("resource"), dataModel, getLocalStore(), false)
        .addLabel("an associated resource", "en")
        .addComment("If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to. ", "en"),
};

var namedNode$j = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$i(localName) {
    return namedNode$j("http://xmlns.com/foaf/0.1/" + localName);
}
var FOAF = {
    PREFIX: "foaf",
    NAMESPACE: "http://xmlns.com/foaf/0.1/",
    PREFIX_AND_NAMESPACE: { "foaf": "http://xmlns.com/foaf/0.1/" },
    NS: _NS$i,
    // *****************
    // All the Classes.
    // *****************
    /**
     * An agent (eg. person, group, software or physical artifact).
     */
    Agent: new LitVocabTerm(_NS$i("Agent"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Agent")
        .addCommentNoLanguage("An agent (eg. person, group, software or physical artifact)."),
    /**
     * A document.
     */
    Document: new LitVocabTerm(_NS$i("Document"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Document")
        .addCommentNoLanguage("A document."),
    /**
     * An organization.
     */
    Organization: new LitVocabTerm(_NS$i("Organization"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Organization")
        .addCommentNoLanguage("An organization."),
    /**
     * A project (a collective endeavour of some kind).
     */
    Project: new LitVocabTerm(_NS$i("Project"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Project")
        .addCommentNoLanguage("A project (a collective endeavour of some kind)."),
    /**
     * A class of Agents.
     */
    Group: new LitVocabTerm(_NS$i("Group"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Group")
        .addCommentNoLanguage("A class of Agents."),
    /**
     * An image.
     */
    Image: new LitVocabTerm(_NS$i("Image"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Image")
        .addCommentNoLanguage("An image."),
    /**
     * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
     */
    LabelProperty: new LitVocabTerm(_NS$i("LabelProperty"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Label Property")
        .addCommentNoLanguage("A foaf:LabelProperty is any RDF property with texual values that serve as labels."),
    /**
     * An online account.
     */
    OnlineAccount: new LitVocabTerm(_NS$i("OnlineAccount"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Online Account")
        .addCommentNoLanguage("An online account."),
    /**
     * An online chat account.
     */
    OnlineChatAccount: new LitVocabTerm(_NS$i("OnlineChatAccount"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Online Chat Account")
        .addCommentNoLanguage("An online chat account."),
    /**
     * An online e-commerce account.
     */
    OnlineEcommerceAccount: new LitVocabTerm(_NS$i("OnlineEcommerceAccount"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Online E-commerce Account")
        .addCommentNoLanguage("An online e-commerce account."),
    /**
     * An online gaming account.
     */
    OnlineGamingAccount: new LitVocabTerm(_NS$i("OnlineGamingAccount"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Online Gaming Account")
        .addCommentNoLanguage("An online gaming account."),
    /**
     * A person.
     */
    Person: new LitVocabTerm(_NS$i("Person"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Person")
        .addCommentNoLanguage("A person."),
    /**
     * A personal profile RDF document.
     */
    PersonalProfileDocument: new LitVocabTerm(_NS$i("PersonalProfileDocument"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("PersonalProfileDocument")
        .addCommentNoLanguage("A personal profile RDF document."),
    // *******************
    // All the Properties.
    // *******************
    /**
     * Indicates an account held by this agent.
     */
    account: new LitVocabTerm(_NS$i("account"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("account")
        .addCommentNoLanguage("Indicates an account held by this agent."),
    /**
     * Indicates the name (identifier) associated with this online account.
     */
    accountName: new LitVocabTerm(_NS$i("accountName"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("account name")
        .addCommentNoLanguage("Indicates the name (identifier) associated with this online account."),
    /**
     * Indicates a homepage of the service provide for this online account.
     */
    accountServiceHomepage: new LitVocabTerm(_NS$i("accountServiceHomepage"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("account service homepage")
        .addCommentNoLanguage("Indicates a homepage of the service provide for this online account."),
    /**
     * The age in years of some agent.
     */
    age: new LitVocabTerm(_NS$i("age"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("age")
        .addCommentNoLanguage("The age in years of some agent."),
    /**
     * An AIM chat ID
     */
    aimChatID: new LitVocabTerm(_NS$i("aimChatID"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("AIM chat ID")
        .addCommentNoLanguage("An AIM chat ID"),
    /**
     * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
     */
    nick: new LitVocabTerm(_NS$i("nick"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("nickname")
        .addCommentNoLanguage("A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames)."),
    /**
     * A location that something is based near, for some broadly human notion of near.
     */
    based_near: new LitVocabTerm(_NS$i("based_near"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("based near")
        .addCommentNoLanguage("A location that something is based near, for some broadly human notion of near."),
    /**
     * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
     */
    birthday: new LitVocabTerm(_NS$i("birthday"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("birthday")
        .addCommentNoLanguage("The birthday of this Agent, represented in mm-dd string form, eg. '12-31'."),
    /**
     * A current project this person works on.
     */
    currentProject: new LitVocabTerm(_NS$i("currentProject"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("current project")
        .addCommentNoLanguage("A current project this person works on."),
    /**
     * A depiction of some thing.
     */
    depiction: new LitVocabTerm(_NS$i("depiction"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("depiction")
        .addCommentNoLanguage("A depiction of some thing."),
    /**
     * A thing depicted in this representation.
     */
    depicts: new LitVocabTerm(_NS$i("depicts"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("depicts")
        .addCommentNoLanguage("A thing depicted in this representation."),
    /**
     * A checksum for the DNA of some thing. Joke.
     */
    dnaChecksum: new LitVocabTerm(_NS$i("dnaChecksum"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("DNA checksum")
        .addCommentNoLanguage("A checksum for the DNA of some thing. Joke."),
    /**
     * The family name of some person.
     */
    familyName: new LitVocabTerm(_NS$i("familyName"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("familyName")
        .addCommentNoLanguage("The family name of some person."),
    /**
     * The family name of some person.
     */
    family_name: new LitVocabTerm(_NS$i("family_name"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("family_name")
        .addCommentNoLanguage("The family name of some person."),
    /**
     * The first name of a person.
     */
    firstName: new LitVocabTerm(_NS$i("firstName"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("firstName")
        .addCommentNoLanguage("The first name of a person."),
    /**
     * The underlying or 'focal' entity associated with some SKOS-described concept.
     */
    focus: new LitVocabTerm(_NS$i("focus"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("focus")
        .addCommentNoLanguage("The underlying or 'focal' entity associated with some SKOS-described concept."),
    /**
     * An organization funding a project or person.
     */
    fundedBy: new LitVocabTerm(_NS$i("fundedBy"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("funded by")
        .addCommentNoLanguage("An organization funding a project or person."),
    /**
     * A textual geekcode for this person, see http://www.geekcode.com/geek.html
     */
    geekcode: new LitVocabTerm(_NS$i("geekcode"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("geekcode")
        .addCommentNoLanguage("A textual geekcode for this person, see http://www.geekcode.com/geek.html"),
    /**
     * The gender of this Agent (typically but not necessarily 'male' or 'female').
     */
    gender: new LitVocabTerm(_NS$i("gender"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("gender")
        .addCommentNoLanguage("The gender of this Agent (typically but not necessarily 'male' or 'female')."),
    /**
     * The given name of some person.
     */
    givenName: new LitVocabTerm(_NS$i("givenName"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Given name")
        .addCommentNoLanguage("The given name of some person."),
    /**
     * The given name of some person.
     */
    givenname: new LitVocabTerm(_NS$i("givenname"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Given name")
        .addCommentNoLanguage("The given name of some person."),
    /**
     * Indicates an account held by this agent.
     */
    holdsAccount: new LitVocabTerm(_NS$i("holdsAccount"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("account")
        .addCommentNoLanguage("Indicates an account held by this agent."),
    /**
     * A homepage for some thing.
     */
    homepage: new LitVocabTerm(_NS$i("homepage"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("homepage")
        .addCommentNoLanguage("A homepage for some thing."),
    /**
     * A page or document about this thing.
     */
    page: new LitVocabTerm(_NS$i("page"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("page")
        .addCommentNoLanguage("A page or document about this thing."),
    /**
     * A document that this thing is the primary topic of.
     */
    isPrimaryTopicOf: new LitVocabTerm(_NS$i("isPrimaryTopicOf"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("is primary topic of")
        .addCommentNoLanguage("A document that this thing is the primary topic of."),
    /**
     * An ICQ chat ID
     */
    icqChatID: new LitVocabTerm(_NS$i("icqChatID"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("ICQ chat ID")
        .addCommentNoLanguage("An ICQ chat ID"),
    /**
     * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
     */
    img: new LitVocabTerm(_NS$i("img"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("image")
        .addCommentNoLanguage("An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage)."),
    /**
     * A page about a topic of interest to this person.
     */
    interest: new LitVocabTerm(_NS$i("interest"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("interest")
        .addCommentNoLanguage("A page about a topic of interest to this person."),
    /**
     * The primary topic of some page or document.
     */
    primaryTopic: new LitVocabTerm(_NS$i("primaryTopic"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("primary topic")
        .addCommentNoLanguage("The primary topic of some page or document."),
    /**
     * A jabber ID for something.
     */
    jabberID: new LitVocabTerm(_NS$i("jabberID"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("jabber ID")
        .addCommentNoLanguage("A jabber ID for something."),
    /**
     * A person known by this person (indicating some level of reciprocated interaction between the parties).
     */
    knows: new LitVocabTerm(_NS$i("knows"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("knows")
        .addCommentNoLanguage("A person known by this person (indicating some level of reciprocated interaction between the parties)."),
    /**
     * The last name of a person.
     */
    lastName: new LitVocabTerm(_NS$i("lastName"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("lastName")
        .addCommentNoLanguage("The last name of a person."),
    /**
     * A logo representing some thing.
     */
    logo: new LitVocabTerm(_NS$i("logo"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("logo")
        .addCommentNoLanguage("A logo representing some thing."),
    /**
     * Something that was made by this agent.
     */
    made: new LitVocabTerm(_NS$i("made"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("made")
        .addCommentNoLanguage("Something that was made by this agent."),
    /**
     * An agent that made this thing.
     */
    maker: new LitVocabTerm(_NS$i("maker"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("maker")
        .addCommentNoLanguage("An agent that made this thing."),
    /**
     * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
     */
    mbox: new LitVocabTerm(_NS$i("mbox"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("personal mailbox")
        .addCommentNoLanguage("A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox."),
    /**
     * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
     */
    mbox_sha1sum: new LitVocabTerm(_NS$i("mbox_sha1sum"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("sha1sum of a personal mailbox URI name")
        .addCommentNoLanguage("The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox."),
    /**
     * Indicates a member of a Group
     */
    member: new LitVocabTerm(_NS$i("member"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("member")
        .addCommentNoLanguage("Indicates a member of a Group"),
    /**
     * Indicates the class of individuals that are a member of a Group
     */
    membershipClass: new LitVocabTerm(_NS$i("membershipClass"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("membershipClass")
        .addCommentNoLanguage("Indicates the class of individuals that are a member of a Group"),
    /**
     * An MSN chat ID
     */
    msnChatID: new LitVocabTerm(_NS$i("msnChatID"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("MSN chat ID")
        .addCommentNoLanguage("An MSN chat ID"),
    /**
     * A Myers Briggs (MBTI) personality classification.
     */
    myersBriggs: new LitVocabTerm(_NS$i("myersBriggs"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("myersBriggs")
        .addCommentNoLanguage("A Myers Briggs (MBTI) personality classification."),
    /**
     * A name for some thing.
     */
    name: new LitVocabTerm(_NS$i("name"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("name")
        .addCommentNoLanguage("A name for some thing."),
    /**
     * An OpenID for an Agent.
     */
    openid: new LitVocabTerm(_NS$i("openid"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("openid")
        .addCommentNoLanguage("An OpenID for an Agent."),
    /**
     * A topic of some page or document.
     */
    topic: new LitVocabTerm(_NS$i("topic"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("topic")
        .addCommentNoLanguage("A topic of some page or document."),
    /**
     * A project this person has previously worked on.
     */
    pastProject: new LitVocabTerm(_NS$i("pastProject"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("past project")
        .addCommentNoLanguage("A project this person has previously worked on."),
    /**
     * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
     */
    phone: new LitVocabTerm(_NS$i("phone"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("phone")
        .addCommentNoLanguage("A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel)."),
    /**
     * A .plan comment, in the tradition of finger and '.plan' files.
     */
    plan: new LitVocabTerm(_NS$i("plan"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("plan")
        .addCommentNoLanguage("A .plan comment, in the tradition of finger and '.plan' files."),
    /**
     * A link to the publications of this person.
     */
    publications: new LitVocabTerm(_NS$i("publications"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("publications")
        .addCommentNoLanguage("A link to the publications of this person."),
    /**
     * A homepage of a school attended by the person.
     */
    schoolHomepage: new LitVocabTerm(_NS$i("schoolHomepage"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("schoolHomepage")
        .addCommentNoLanguage("A homepage of a school attended by the person."),
    /**
     * A sha1sum hash, in hex.
     */
    sha1: new LitVocabTerm(_NS$i("sha1"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("sha1sum (hex)")
        .addCommentNoLanguage("A sha1sum hash, in hex."),
    /**
     * A Skype ID
     */
    skypeID: new LitVocabTerm(_NS$i("skypeID"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Skype ID")
        .addCommentNoLanguage("A Skype ID"),
    /**
     * A string expressing what the user is happy for the general public (normally) to know about their current activity.
     */
    status: new LitVocabTerm(_NS$i("status"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("status")
        .addCommentNoLanguage("A string expressing what the user is happy for the general public (normally) to know about their current activity."),
    /**
     * The surname of some person.
     */
    surname: new LitVocabTerm(_NS$i("surname"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Surname")
        .addCommentNoLanguage("The surname of some person."),
    /**
     * A theme.
     */
    theme: new LitVocabTerm(_NS$i("theme"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("theme")
        .addCommentNoLanguage("A theme."),
    /**
     * A derived thumbnail image.
     */
    thumbnail: new LitVocabTerm(_NS$i("thumbnail"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("thumbnail")
        .addCommentNoLanguage("A derived thumbnail image."),
    /**
     * A tipjar document for this agent, describing means for payment and reward.
     */
    tipjar: new LitVocabTerm(_NS$i("tipjar"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("tipjar")
        .addCommentNoLanguage("A tipjar document for this agent, describing means for payment and reward."),
    /**
     * Title (Mr, Mrs, Ms, Dr. etc)
     */
    title: new LitVocabTerm(_NS$i("title"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("title")
        .addCommentNoLanguage("Title (Mr, Mrs, Ms, Dr. etc)"),
    /**
     * A thing of interest to this person.
     */
    topic_interest: new LitVocabTerm(_NS$i("topic_interest"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("topic_interest")
        .addCommentNoLanguage("A thing of interest to this person."),
    /**
     * A weblog of some thing (whether person, group, company etc.).
     */
    weblog: new LitVocabTerm(_NS$i("weblog"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("weblog")
        .addCommentNoLanguage("A weblog of some thing (whether person, group, company etc.)."),
    /**
     * A work info homepage of some person; a page about their work for some organization.
     */
    workInfoHomepage: new LitVocabTerm(_NS$i("workInfoHomepage"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("work info homepage")
        .addCommentNoLanguage("A work info homepage of some person; a page about their work for some organization."),
    /**
     * A workplace homepage of some person; the homepage of an organization they work for.
     */
    workplaceHomepage: new LitVocabTerm(_NS$i("workplaceHomepage"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("workplace homepage")
        .addCommentNoLanguage("A workplace homepage of some person; the homepage of an organization they work for."),
    /**
     * A Yahoo chat ID
     */
    yahooChatID: new LitVocabTerm(_NS$i("yahooChatID"), dataModel, getLocalStore(), false)
        .addLabelNoLanguage("Yahoo chat ID")
        .addCommentNoLanguage("A Yahoo chat ID"),
};

var namedNode$k = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$j(localName) {
    return namedNode$k("http://purl.org/linked-data/cube#" + localName);
}
var QB = {
    PREFIX: "qb",
    NAMESPACE: "http://purl.org/linked-data/cube#",
    PREFIX_AND_NAMESPACE: { "qb": "http://purl.org/linked-data/cube#" },
    NS: _NS$j,
    // *****************
    // All the Classes.
    // *****************
    /**
     * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.
     */
    DataSet: new LitVocabTerm(_NS$j("DataSet"), dataModel, getLocalStore(), false)
        .addLabel("Data set", "en")
        .addComment("Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.", "en"),
    /**
     * Abstract superclass for everything that can have attributes and dimensions
     */
    Attachable: new LitVocabTerm(_NS$j("Attachable"), dataModel, getLocalStore(), false)
        .addLabel("Attachable (abstract)", "en")
        .addComment("Abstract superclass for everything that can have attributes and dimensions", "en"),
    /**
     * A single observation in the cube, may have one or more associated measured values
     */
    Observation: new LitVocabTerm(_NS$j("Observation"), dataModel, getLocalStore(), false)
        .addLabel("Observation", "en")
        .addComment("A single observation in the cube, may have one or more associated measured values", "en"),
    /**
     * A, possibly arbitrary, group of observations.
     */
    ObservationGroup: new LitVocabTerm(_NS$j("ObservationGroup"), dataModel, getLocalStore(), false)
        .addLabel("Observation Group", "en")
        .addComment("A, possibly arbitrary, group of observations.", "en"),
    /**
     * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice
     */
    Slice: new LitVocabTerm(_NS$j("Slice"), dataModel, getLocalStore(), false)
        .addLabel("Slice", "en")
        .addComment("Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice", "en"),
    /**
     * Abstract super-property of all properties representing dimensions, attributes or measures
     */
    ComponentProperty: new LitVocabTerm(_NS$j("ComponentProperty"), dataModel, getLocalStore(), false)
        .addLabel("Component property (abstract)", "en")
        .addComment("Abstract super-property of all properties representing dimensions, attributes or measures", "en"),
    /**
     * The class of components which represent the dimensions of the cube
     */
    DimensionProperty: new LitVocabTerm(_NS$j("DimensionProperty"), dataModel, getLocalStore(), false)
        .addLabel("Dimension property", "en")
        .addComment("The class of components which represent the dimensions of the cube", "en"),
    /**
     * Superclass of all coded ComponentProperties
     */
    CodedProperty: new LitVocabTerm(_NS$j("CodedProperty"), dataModel, getLocalStore(), false)
        .addLabel("Coded property", "en")
        .addComment("Superclass of all coded ComponentProperties", "en"),
    /**
     * The class of components which represent the measured value of the phenomenon being observed
     */
    MeasureProperty: new LitVocabTerm(_NS$j("MeasureProperty"), dataModel, getLocalStore(), false)
        .addLabel("Measure property", "en")
        .addComment("The class of components which represent the measured value of the phenomenon being observed", "en"),
    /**
     * The class of components which represent attributes of observations in the cube, e.g. unit of measurement
     */
    AttributeProperty: new LitVocabTerm(_NS$j("AttributeProperty"), dataModel, getLocalStore(), false)
        .addLabel("Attribute property", "en")
        .addComment("The class of components which represent attributes of observations in the cube, e.g. unit of measurement", "en"),
    /**
     * Defines the structure of a DataSet or slice
     */
    DataStructureDefinition: new LitVocabTerm(_NS$j("DataStructureDefinition"), dataModel, getLocalStore(), false)
        .addLabel("Data structure definition", "en")
        .addComment("Defines the structure of a DataSet or slice", "en"),
    /**
     * Abstract class of things which reference one or more ComponentProperties
     */
    ComponentSet: new LitVocabTerm(_NS$j("ComponentSet"), dataModel, getLocalStore(), false)
        .addLabel("Component set", "en")
        .addComment("Abstract class of things which reference one or more ComponentProperties", "en"),
    /**
     * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.
     */
    ComponentSpecification: new LitVocabTerm(_NS$j("ComponentSpecification"), dataModel, getLocalStore(), false)
        .addLabel("Component specification", "en")
        .addComment("Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.", "en"),
    /**
     * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices
     */
    SliceKey: new LitVocabTerm(_NS$j("SliceKey"), dataModel, getLocalStore(), false)
        .addLabel("Slice key", "en")
        .addComment("Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices", "en"),
    /**
     * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.
     */
    HierarchicalCodeList: new LitVocabTerm(_NS$j("HierarchicalCodeList"), dataModel, getLocalStore(), false)
        .addLabel("Hierarchical Code List", "en")
        .addComment("Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.", "en"),
    // *******************
    // All the Properties.
    // *******************
    /**
     * indicates the data set of which this observation is a part
     */
    dataSet: new LitVocabTerm(_NS$j("dataSet"), dataModel, getLocalStore(), false)
        .addLabel("data set", "en")
        .addComment("indicates the data set of which this observation is a part", "en"),
    /**
     * indicates a observation contained within this slice of the data set
     */
    observation: new LitVocabTerm(_NS$j("observation"), dataModel, getLocalStore(), false)
        .addLabel("observation", "en")
        .addComment("indicates a observation contained within this slice of the data set", "en"),
    /**
     * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet
     */
    observationGroup: new LitVocabTerm(_NS$j("observationGroup"), dataModel, getLocalStore(), false)
        .addLabel("observation group", "en")
        .addComment("Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet", "en"),
    /**
     * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values
     */
    slice: new LitVocabTerm(_NS$j("slice"), dataModel, getLocalStore(), false)
        .addLabel("slice", "en")
        .addComment("Indicates a subset of a DataSet defined by fixing a subset of the dimensional values", "en"),
    /**
     * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)
     */
    measureType: new LitVocabTerm(_NS$j("measureType"), dataModel, getLocalStore(), false)
        .addLabel("measure type", "en")
        .addComment("Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)", "en"),
    /**
     * indicates the structure to which this data set conforms
     */
    structure: new LitVocabTerm(_NS$j("structure"), dataModel, getLocalStore(), false)
        .addLabel("structure", "en")
        .addComment("indicates the structure to which this data set conforms", "en"),
    /**
     * indicates a component specification which is included in the structure of the dataset
     */
    component: new LitVocabTerm(_NS$j("component"), dataModel, getLocalStore(), false)
        .addLabel("component specification", "en")
        .addComment("indicates a component specification which is included in the structure of the dataset", "en"),
    /**
     * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey
     */
    componentProperty: new LitVocabTerm(_NS$j("componentProperty"), dataModel, getLocalStore(), false)
        .addLabel("component", "en")
        .addComment("indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey", "en"),
    /**
     * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last
     */
    order: new LitVocabTerm(_NS$j("order"), dataModel, getLocalStore(), false)
        .addLabel("order", "en")
        .addComment("indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last", "en"),
    /**
     * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
      to components correspond to an attribute. Defaults to false (optional).
     */
    componentRequired: new LitVocabTerm(_NS$j("componentRequired"), dataModel, getLocalStore(), false)
        .addLabel("component required", "en")
        .addComment("Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable\n    to components correspond to an attribute. Defaults to false (optional).", "en"),
    /**
     * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.
     */
    componentAttachment: new LitVocabTerm(_NS$j("componentAttachment"), dataModel, getLocalStore(), false)
        .addLabel("component attachment", "en")
        .addComment("Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.", "en"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a dimension
     */
    dimension: new LitVocabTerm(_NS$j("dimension"), dataModel, getLocalStore(), false)
        .addLabel("dimension", "en")
        .addComment("An alternative to qb:componentProperty which makes explicit that the component is a dimension", "en"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure
     */
    measure: new LitVocabTerm(_NS$j("measure"), dataModel, getLocalStore(), false)
        .addLabel("measure", "en")
        .addComment("An alternative to qb:componentProperty which makes explicit that the component is a measure", "en"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a attribute
     */
    attribute: new LitVocabTerm(_NS$j("attribute"), dataModel, getLocalStore(), false)
        .addLabel("attribute", "en")
        .addComment("An alternative to qb:componentProperty which makes explicit that the component is a attribute", "en"),
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension
     */
    measureDimension: new LitVocabTerm(_NS$j("measureDimension"), dataModel, getLocalStore(), false)
        .addLabel("measure dimension", "en")
        .addComment("An alternative to qb:componentProperty which makes explicit that the component is a measure dimension", "en"),
    /**
     * indicates the sub-key corresponding to this slice
     */
    sliceStructure: new LitVocabTerm(_NS$j("sliceStructure"), dataModel, getLocalStore(), false)
        .addLabel("slice structure", "en")
        .addComment("indicates the sub-key corresponding to this slice", "en"),
    /**
     * indicates a slice key which is used for slices in this dataset
     */
    sliceKey: new LitVocabTerm(_NS$j("sliceKey"), dataModel, getLocalStore(), false)
        .addLabel("slice key", "en")
        .addComment("indicates a slice key which is used for slices in this dataset", "en"),
    /**
     * gives the concept which is being measured or indicated by a ComponentProperty
     */
    concept: new LitVocabTerm(_NS$j("concept"), dataModel, getLocalStore(), false)
        .addLabel("concept", "en")
        .addComment("gives the concept which is being measured or indicated by a ComponentProperty", "en"),
    /**
     * gives the code list associated with a CodedProperty
     */
    codeList: new LitVocabTerm(_NS$j("codeList"), dataModel, getLocalStore(), false)
        .addLabel("code list", "en")
        .addComment("gives the code list associated with a CodedProperty", "en"),
    /**
     * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.
     */
    hierarchyRoot: new LitVocabTerm(_NS$j("hierarchyRoot"), dataModel, getLocalStore(), false)
        .addComment("Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.", "en"),
    /**
     * Specifies a property which relates a parent concept in the hierarchy to a child concept.
     */
    parentChildProperty: new LitVocabTerm(_NS$j("parentChildProperty"), dataModel, getLocalStore(), false)
        .addLabel("parent-child property", "en")
        .addComment("Specifies a property which relates a parent concept in the hierarchy to a child concept.", "en"),
};

var namedNode$l = dataModel.namedNode;
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
function _NS$k(localName) {
    return namedNode$l("http://purl.org/linked-data/sdmx/2009/dimension#" + localName);
}
var SDMX_DIMENSION = {
    PREFIX: "sdmx-dimension",
    NAMESPACE: "http://purl.org/linked-data/sdmx/2009/dimension#",
    PREFIX_AND_NAMESPACE: { "sdmx-dimension": "http://purl.org/linked-data/sdmx/2009/dimension#" },
    NS: _NS$k,
    // *******************
    // All the Properties.
    // *******************
    /**
     * The length of time that a person has lived or a thing has existed.
     */
    age: new LitVocabTerm(_NS$k("age"), dataModel, getLocalStore(), false)
        .addLabel("Age", "en")
        .addComment("The length of time that a person has lived or a thing has existed.", "en"),
    /**
     * Legal, conjugal status of each individual in relation to the marriage laws or customs of the country.
     */
    civilStatus: new LitVocabTerm(_NS$k("civilStatus"), dataModel, getLocalStore(), false)
        .addLabel("Civil Status", "en")
        .addComment("Legal, conjugal status of each individual in relation to the marriage laws or customs of the country.", "en"),
    /**
     * Monetary denomination of the object being measured.
     */
    currency: new LitVocabTerm(_NS$k("currency"), dataModel, getLocalStore(), false)
        .addLabel("Currency", "en")
        .addComment("Monetary denomination of the object being measured.", "en"),
    /**
     * The highest level of an educational programme the person has successfully completed.
     */
    educationLev: new LitVocabTerm(_NS$k("educationLev"), dataModel, getLocalStore(), false)
        .addLabel("Education Level", "en")
        .addComment("The highest level of an educational programme the person has successfully completed.", "en"),
    /**
     * The time interval at which observations occur over a given time period.
     */
    freq: new LitVocabTerm(_NS$k("freq"), dataModel, getLocalStore(), false)
        .addLabel("Frequency", "en")
        .addComment("The time interval at which observations occur over a given time period.", "en"),
    /**
     * Job or position held by an individual who performs a set of tasks and duties.
     */
    occupation: new LitVocabTerm(_NS$k("occupation"), dataModel, getLocalStore(), false)
        .addLabel("Occupation", "en")
        .addComment("Job or position held by an individual who performs a set of tasks and duties.", "en"),
    /**
     * The country or geographic area to which the measured statistical phenomenon relates.
     */
    refArea: new LitVocabTerm(_NS$k("refArea"), dataModel, getLocalStore(), false)
        .addLabel("Reference Area", "en")
        .addComment("The country or geographic area to which the measured statistical phenomenon relates.", "en"),
    /**
     * The period of time or point in time to which the measured observation is intended to refer.
     */
    refPeriod: new LitVocabTerm(_NS$k("refPeriod"), dataModel, getLocalStore(), false)
        .addLabel("Reference Period", "en")
        .addComment("The period of time or point in time to which the measured observation is intended to refer.", "en"),
    /**
     * The state of being male or female.
     */
    sex: new LitVocabTerm(_NS$k("sex"), dataModel, getLocalStore(), false)
        .addLabel("Sex", "en")
        .addComment("The state of being male or female.", "en"),
    /**
     * The period of time or point in time to which the measured observation refers.
     */
    timePeriod: new LitVocabTerm(_NS$k("timePeriod"), dataModel, getLocalStore(), false)
        .addLabel("Time Period", "en")
        .addComment("The period of time or point in time to which the measured observation refers.", "en"),
};

export { AS, DCTERMS, FOAF, HTTP, HTTPH, LDP, OLO, OWL, QB, RDF, RDFS, RDF_INRUPT_EXT, RLOG, SCHEMA_INRUPT_EXT, SDMX_DIMENSION, SKOS, UI, VANN, VCARD, VCARD_INRUPT_EXT, XSD };
