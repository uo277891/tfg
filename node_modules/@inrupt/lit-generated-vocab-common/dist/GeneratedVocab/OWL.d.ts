import { LitVocabTerm } from "@inrupt/lit-vocab-term";
import { NamedNode } from "rdf-js";
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
declare function _NS(localName: string): NamedNode;
declare const OWL: {
    PREFIX: string;
    NAMESPACE: string;
    PREFIX_AND_NAMESPACE: {
        owl: string;
    };
    NS: typeof _NS;
    /**
     * The class of ontologies.
     */
    Ontology: LitVocabTerm;
    /**
     * The class of collections of pairwise different individuals.
     */
    AllDifferent: LitVocabTerm;
    /**
     * The class of collections of pairwise disjoint classes.
     */
    AllDisjointClasses: LitVocabTerm;
    /**
     * The class of collections of pairwise disjoint properties.
     */
    AllDisjointProperties: LitVocabTerm;
    /**
     * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
     */
    Annotation: LitVocabTerm;
    /**
     * The class of annotation properties.
     */
    AnnotationProperty: LitVocabTerm;
    /**
     * The class of asymmetric properties.
     */
    AsymmetricProperty: LitVocabTerm;
    /**
     * The class of object properties.
     */
    ObjectProperty: LitVocabTerm;
    /**
     * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
     */
    Axiom: LitVocabTerm;
    /**
     * The class of OWL classes.
     */
    Class: LitVocabTerm;
    /**
     * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
     */
    DataRange: LitVocabTerm;
    /**
     * The class of data properties.
     */
    DatatypeProperty: LitVocabTerm;
    /**
     * The class of deprecated classes.
     */
    DeprecatedClass: LitVocabTerm;
    /**
     * The class of deprecated properties.
     */
    DeprecatedProperty: LitVocabTerm;
    /**
     * The class of functional properties.
     */
    FunctionalProperty: LitVocabTerm;
    /**
     * The class of inverse-functional properties.
     */
    InverseFunctionalProperty: LitVocabTerm;
    /**
     * The class of irreflexive properties.
     */
    IrreflexiveProperty: LitVocabTerm;
    /**
     * The class of named individuals.
     */
    NamedIndividual: LitVocabTerm;
    /**
     * The class of OWL individuals.
     */
    Thing: LitVocabTerm;
    /**
     * The class of negative property assertions.
     */
    NegativePropertyAssertion: LitVocabTerm;
    /**
     * This is the empty class.
     */
    Nothing: LitVocabTerm;
    /**
     * The class of ontology properties.
     */
    OntologyProperty: LitVocabTerm;
    /**
     * The class of reflexive properties.
     */
    ReflexiveProperty: LitVocabTerm;
    /**
     * The class of property restrictions.
     */
    Restriction: LitVocabTerm;
    /**
     * The class of symmetric properties.
     */
    SymmetricProperty: LitVocabTerm;
    /**
     * The class of transitive properties.
     */
    TransitiveProperty: LitVocabTerm;
    /**
     * The annotation property that provides version information for an ontology or another OWL construct.
     */
    versionInfo: LitVocabTerm;
    /**
     * The property that determines the class that a universal property restriction refers to.
     */
    allValuesFrom: LitVocabTerm;
    /**
     * The property that determines the predicate of an annotated axiom or annotated annotation.
     */
    annotatedProperty: LitVocabTerm;
    /**
     * The property that determines the subject of an annotated axiom or annotated annotation.
     */
    annotatedSource: LitVocabTerm;
    /**
     * The property that determines the object of an annotated axiom or annotated annotation.
     */
    annotatedTarget: LitVocabTerm;
    /**
     * The property that determines the predicate of a negative property assertion.
     */
    assertionProperty: LitVocabTerm;
    /**
     * The annotation property that indicates that a given ontology is backward compatible with another ontology.
     */
    backwardCompatibleWith: LitVocabTerm;
    /**
     * The data property that does not relate any individual to any data value.
     */
    bottomDataProperty: LitVocabTerm;
    /**
     * The object property that does not relate any two individuals.
     */
    bottomObjectProperty: LitVocabTerm;
    /**
     * The property that determines the cardinality of an exact cardinality restriction.
     */
    cardinality: LitVocabTerm;
    /**
     * The property that determines that a given class is the complement of another class.
     */
    complementOf: LitVocabTerm;
    /**
     * The property that determines that a given data range is the complement of another data range with respect to the data domain.
     */
    datatypeComplementOf: LitVocabTerm;
    /**
     * The annotation property that indicates that a given entity has been deprecated.
     */
    deprecated: LitVocabTerm;
    /**
     * The property that determines that two given individuals are different.
     */
    differentFrom: LitVocabTerm;
    /**
     * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
     */
    disjointUnionOf: LitVocabTerm;
    /**
     * The property that determines that two given classes are disjoint.
     */
    disjointWith: LitVocabTerm;
    /**
     * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
     */
    distinctMembers: LitVocabTerm;
    /**
     * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
     */
    equivalentClass: LitVocabTerm;
    /**
     * The property that determines that two given properties are equivalent.
     */
    equivalentProperty: LitVocabTerm;
    /**
     * The property that determines the collection of properties that jointly build a key.
     */
    hasKey: LitVocabTerm;
    /**
     * The property that determines the property that a self restriction refers to.
     */
    hasSelf: LitVocabTerm;
    /**
     * The property that determines the individual that a has-value restriction refers to.
     */
    hasValue: LitVocabTerm;
    /**
     * The annotation property that indicates that a given ontology is incompatible with another ontology.
     */
    incompatibleWith: LitVocabTerm;
    /**
     * The property that determines the collection of classes or data ranges that build an intersection.
     */
    intersectionOf: LitVocabTerm;
    /**
     * The property that determines that two given properties are inverse.
     */
    inverseOf: LitVocabTerm;
    /**
     * The property that determines the cardinality of a maximum cardinality restriction.
     */
    maxCardinality: LitVocabTerm;
    /**
     * The property that determines the cardinality of a maximum qualified cardinality restriction.
     */
    maxQualifiedCardinality: LitVocabTerm;
    /**
     * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
     */
    members: LitVocabTerm;
    /**
     * The property that determines the cardinality of a minimum cardinality restriction.
     */
    minCardinality: LitVocabTerm;
    /**
     * The property that determines the cardinality of a minimum qualified cardinality restriction.
     */
    minQualifiedCardinality: LitVocabTerm;
    /**
     * The property that determines the class that a qualified object cardinality restriction refers to.
     */
    onClass: LitVocabTerm;
    /**
     * The property that determines the data range that a qualified data cardinality restriction refers to.
     */
    onDataRange: LitVocabTerm;
    /**
     * The property that determines the datatype that a datatype restriction refers to.
     */
    onDatatype: LitVocabTerm;
    /**
     * The property that determines the collection of individuals or data values that build an enumeration.
     */
    oneOf: LitVocabTerm;
    /**
     * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
     */
    onProperties: LitVocabTerm;
    /**
     * The property that determines the property that a property restriction refers to.
     */
    onProperty: LitVocabTerm;
    /**
     * The annotation property that indicates the predecessor ontology of a given ontology.
     */
    priorVersion: LitVocabTerm;
    /**
     * The property that determines the n-tuple of properties that build a sub property chain of a given property.
     */
    propertyChainAxiom: LitVocabTerm;
    /**
     * The property that determines that two given properties are disjoint.
     */
    propertyDisjointWith: LitVocabTerm;
    /**
     * The property that determines the cardinality of an exact qualified cardinality restriction.
     */
    qualifiedCardinality: LitVocabTerm;
    /**
     * The property that determines that two given individuals are equal.
     */
    sameAs: LitVocabTerm;
    /**
     * The property that determines the class that an existential property restriction refers to.
     */
    someValuesFrom: LitVocabTerm;
    /**
     * The property that determines the subject of a negative property assertion.
     */
    sourceIndividual: LitVocabTerm;
    /**
     * The property that determines the object of a negative object property assertion.
     */
    targetIndividual: LitVocabTerm;
    /**
     * The property that determines the value of a negative data property assertion.
     */
    targetValue: LitVocabTerm;
    /**
     * The data property that relates every individual to every data value.
     */
    topDataProperty: LitVocabTerm;
    /**
     * The object property that relates every two individuals.
     */
    topObjectProperty: LitVocabTerm;
    /**
     * The property that determines the collection of classes or data ranges that build a union.
     */
    unionOf: LitVocabTerm;
    /**
     * The property that determines the collection of facet-value pairs that define a datatype restriction.
     */
    withRestrictions: LitVocabTerm;
};
export { OWL };
