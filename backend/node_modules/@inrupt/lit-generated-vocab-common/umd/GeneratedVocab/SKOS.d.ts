import { LitVocabTerm } from "@inrupt/lit-vocab-term";
import { NamedNode } from "rdf-js";
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */
declare function _NS(localName: string): NamedNode;
declare const SKOS: {
    PREFIX: string;
    NAMESPACE: string;
    PREFIX_AND_NAMESPACE: {
        skos: string;
    };
    NS: typeof _NS;
    /**
     * An idea or notion; a unit of thought.
     */
    Concept: LitVocabTerm;
    /**
     * A set of concepts, optionally including statements about semantic relationships between those concepts.
     */
    ConceptScheme: LitVocabTerm;
    /**
     * A meaningful collection of concepts.
     */
    Collection: LitVocabTerm;
    /**
     * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
     */
    OrderedCollection: LitVocabTerm;
    /**
     * A statement or formal explanation of the meaning of a concept.
     */
    definition: LitVocabTerm;
    /**
     * A note that helps to clarify the meaning and/or the use of a concept.
     */
    scopeNote: LitVocabTerm;
    /**
     * An example of the use of a concept.
     */
    example: LitVocabTerm;
    /**
     * Relates a resource (for example a concept) to a concept scheme in which it is included.
     */
    inScheme: LitVocabTerm;
    /**
     * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
     */
    hasTopConcept: LitVocabTerm;
    /**
     * Relates a concept to the concept scheme that it is a top level concept of.
     */
    topConceptOf: LitVocabTerm;
    /**
     * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
     */
    prefLabel: LitVocabTerm;
    /**
     * The range of skos:altLabel is the class of RDF plain literals.
     */
    altLabel: LitVocabTerm;
    /**
     * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.
     */
    hiddenLabel: LitVocabTerm;
    /**
     * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
     */
    notation: LitVocabTerm;
    /**
     * A general note, for any purpose.
     */
    note: LitVocabTerm;
    /**
     * A note about a modification to a concept.
     */
    changeNote: LitVocabTerm;
    /**
     * A note for an editor, translator or maintainer of the vocabulary.
     */
    editorialNote: LitVocabTerm;
    /**
     * A note about the past state/use/meaning of a concept.
     */
    historyNote: LitVocabTerm;
    /**
     * Links a concept to a concept related by meaning.
     */
    semanticRelation: LitVocabTerm;
    /**
     * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
     */
    broader: LitVocabTerm;
    /**
     * skos:broaderTransitive is a transitive superproperty of skos:broader.
     */
    broaderTransitive: LitVocabTerm;
    /**
     * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
     */
    narrower: LitVocabTerm;
    /**
     * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
     */
    narrowerTransitive: LitVocabTerm;
    /**
     * skos:related is disjoint with skos:broaderTransitive
     */
    related: LitVocabTerm;
    /**
     * Relates a collection to one of its members.
     */
    member: LitVocabTerm;
    /**
     * For any resource, every item in the list given as the value of the
        skos:memberList property is also a value of the skos:member property.
     */
    memberList: LitVocabTerm;
    /**
     * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
     */
    mappingRelation: LitVocabTerm;
    /**
     * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     */
    broadMatch: LitVocabTerm;
    /**
     * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
     */
    narrowMatch: LitVocabTerm;
    /**
     * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
     */
    relatedMatch: LitVocabTerm;
    /**
     * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
     */
    exactMatch: LitVocabTerm;
    /**
     * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
     */
    closeMatch: LitVocabTerm;
};
export { SKOS };
