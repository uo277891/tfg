import { LitVocabTerm, getLocalStore } from "@inrupt/lit-vocab-term";
import dataFactory from "@rdfjs/data-model";

const { namedNode } = dataFactory;
import { NamedNode } from "rdf-js";

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].

  An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */

function _NS(localName: string): NamedNode { 
  return namedNode(`http://www.w3.org/2004/02/skos/core#${localName}`);
}

const SKOS = {
  PREFIX: "skos",
  NAMESPACE: "http://www.w3.org/2004/02/skos/core#",
  PREFIX_AND_NAMESPACE: { "skos": "http://www.w3.org/2004/02/skos/core#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * An idea or notion; a unit of thought.
   */
  Concept: new LitVocabTerm(
    _NS("Concept"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Concept`, "en"),

  /**
   * A set of concepts, optionally including statements about semantic relationships between those concepts.
   */
  ConceptScheme: new LitVocabTerm(
    _NS("ConceptScheme"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Concept Scheme`, "en"),

  /**
   * A meaningful collection of concepts.
   */
  Collection: new LitVocabTerm(
    _NS("Collection"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Collection`, "en"),

  /**
   * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
   */
  OrderedCollection: new LitVocabTerm(
    _NS("OrderedCollection"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Ordered Collection`, "en"),

  // *******************
  // All the Properties.
  // *******************

  /**
   * A statement or formal explanation of the meaning of a concept.
   */
  definition: new LitVocabTerm(
    _NS("definition"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`definition`, "en"),

  /**
   * A note that helps to clarify the meaning and/or the use of a concept.
   */
  scopeNote: new LitVocabTerm(
    _NS("scopeNote"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`scope note`, "en"),

  /**
   * An example of the use of a concept.
   */
  example: new LitVocabTerm(
    _NS("example"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`example`, "en"),

  /**
   * Relates a resource (for example a concept) to a concept scheme in which it is included.
   */
  inScheme: new LitVocabTerm(
    _NS("inScheme"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`is in scheme`, "en"),

  /**
   * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
   */
  hasTopConcept: new LitVocabTerm(
    _NS("hasTopConcept"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has top concept`, "en"),

  /**
   * Relates a concept to the concept scheme that it is a top level concept of.
   */
  topConceptOf: new LitVocabTerm(
    _NS("topConceptOf"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`is top concept in scheme`, "en"),

  /**
   * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
   */
  prefLabel: new LitVocabTerm(
    _NS("prefLabel"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`preferred label`, "en")
    .addComment(`A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.`, "en"),

  /**
   * The range of skos:altLabel is the class of RDF plain literals.
   */
  altLabel: new LitVocabTerm(
    _NS("altLabel"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`alternative label`, "en")
    .addComment(`The range of skos:altLabel is the class of RDF plain literals.`, "en"),

  /**
   * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.
   */
  hiddenLabel: new LitVocabTerm(
    _NS("hiddenLabel"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`hidden label`, "en")
    .addComment(`skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.`, "en"),

  /**
   * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
   */
  notation: new LitVocabTerm(
    _NS("notation"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`notation`, "en"),

  /**
   * A general note, for any purpose.
   */
  note: new LitVocabTerm(
    _NS("note"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`note`, "en"),

  /**
   * A note about a modification to a concept.
   */
  changeNote: new LitVocabTerm(
    _NS("changeNote"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`change note`, "en"),

  /**
   * A note for an editor, translator or maintainer of the vocabulary.
   */
  editorialNote: new LitVocabTerm(
    _NS("editorialNote"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`editorial note`, "en"),

  /**
   * A note about the past state/use/meaning of a concept.
   */
  historyNote: new LitVocabTerm(
    _NS("historyNote"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`history note`, "en"),

  /**
   * Links a concept to a concept related by meaning.
   */
  semanticRelation: new LitVocabTerm(
    _NS("semanticRelation"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`is in semantic relation with`, "en"),

  /**
   * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
   */
  broader: new LitVocabTerm(
    _NS("broader"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has broader`, "en")
    .addComment(`Broader concepts are typically rendered as parents in a concept hierarchy (tree).`, "en"),

  /**
   * skos:broaderTransitive is a transitive superproperty of skos:broader.
   */
  broaderTransitive: new LitVocabTerm(
    _NS("broaderTransitive"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has broader transitive`, "en"),

  /**
   * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
   */
  narrower: new LitVocabTerm(
    _NS("narrower"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has narrower`, "en")
    .addComment(`Narrower concepts are typically rendered as children in a concept hierarchy (tree).`, "en"),

  /**
   * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
   */
  narrowerTransitive: new LitVocabTerm(
    _NS("narrowerTransitive"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has narrower transitive`, "en"),

  /**
   * skos:related is disjoint with skos:broaderTransitive
   */
  related: new LitVocabTerm(
    _NS("related"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has related`, "en")
    .addComment(`skos:related is disjoint with skos:broaderTransitive`, "en"),

  /**
   * Relates a collection to one of its members.
   */
  member: new LitVocabTerm(
    _NS("member"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has member`, "en"),

  /**
   * For any resource, every item in the list given as the value of the
      skos:memberList property is also a value of the skos:member property.
   */
  memberList: new LitVocabTerm(
    _NS("memberList"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has member list`, "en")
    .addComment(`For any resource, every item in the list given as the value of the
      skos:memberList property is also a value of the skos:member property.`, "en"),

  /**
   * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
   */
  mappingRelation: new LitVocabTerm(
    _NS("mappingRelation"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`is in mapping relation with`, "en")
    .addComment(`These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.`, "en"),

  /**
   * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
   */
  broadMatch: new LitVocabTerm(
    _NS("broadMatch"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has broader match`, "en"),

  /**
   * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
   */
  narrowMatch: new LitVocabTerm(
    _NS("narrowMatch"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has narrower match`, "en"),

  /**
   * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
   */
  relatedMatch: new LitVocabTerm(
    _NS("relatedMatch"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has related match`, "en"),

  /**
   * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
   */
  exactMatch: new LitVocabTerm(
    _NS("exactMatch"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has exact match`, "en")
    .addComment(`skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.`, "en"),

  /**
   * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
   */
  closeMatch: new LitVocabTerm(
    _NS("closeMatch"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`has close match`, "en"),

};

export { SKOS };
