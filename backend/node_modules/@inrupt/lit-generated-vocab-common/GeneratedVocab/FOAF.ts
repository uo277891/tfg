import { LitVocabTerm, getLocalStore } from "@inrupt/lit-vocab-term";
import dataFactory from "@rdfjs/data-model";

const { namedNode } = dataFactory;
import { NamedNode } from "rdf-js";

/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */

function _NS(localName: string): NamedNode { 
  return namedNode(`http://xmlns.com/foaf/0.1/${localName}`);
}

const FOAF = {
  PREFIX: "foaf",
  NAMESPACE: "http://xmlns.com/foaf/0.1/",
  PREFIX_AND_NAMESPACE: { "foaf": "http://xmlns.com/foaf/0.1/" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * An agent (eg. person, group, software or physical artifact).
   */
  Agent: new LitVocabTerm(
    _NS("Agent"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Agent`)
    .addCommentNoLanguage(`An agent (eg. person, group, software or physical artifact).`),

  /**
   * A document.
   */
  Document: new LitVocabTerm(
    _NS("Document"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Document`)
    .addCommentNoLanguage(`A document.`),

  /**
   * An organization.
   */
  Organization: new LitVocabTerm(
    _NS("Organization"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Organization`)
    .addCommentNoLanguage(`An organization.`),

  /**
   * A project (a collective endeavour of some kind).
   */
  Project: new LitVocabTerm(
    _NS("Project"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Project`)
    .addCommentNoLanguage(`A project (a collective endeavour of some kind).`),

  /**
   * A class of Agents.
   */
  Group: new LitVocabTerm(
    _NS("Group"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Group`)
    .addCommentNoLanguage(`A class of Agents.`),

  /**
   * An image.
   */
  Image: new LitVocabTerm(
    _NS("Image"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Image`)
    .addCommentNoLanguage(`An image.`),

  /**
   * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
   */
  LabelProperty: new LitVocabTerm(
    _NS("LabelProperty"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Label Property`)
    .addCommentNoLanguage(`A foaf:LabelProperty is any RDF property with texual values that serve as labels.`),

  /**
   * An online account.
   */
  OnlineAccount: new LitVocabTerm(
    _NS("OnlineAccount"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Online Account`)
    .addCommentNoLanguage(`An online account.`),

  /**
   * An online chat account.
   */
  OnlineChatAccount: new LitVocabTerm(
    _NS("OnlineChatAccount"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Online Chat Account`)
    .addCommentNoLanguage(`An online chat account.`),

  /**
   * An online e-commerce account.
   */
  OnlineEcommerceAccount: new LitVocabTerm(
    _NS("OnlineEcommerceAccount"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Online E-commerce Account`)
    .addCommentNoLanguage(`An online e-commerce account.`),

  /**
   * An online gaming account.
   */
  OnlineGamingAccount: new LitVocabTerm(
    _NS("OnlineGamingAccount"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Online Gaming Account`)
    .addCommentNoLanguage(`An online gaming account.`),

  /**
   * A person.
   */
  Person: new LitVocabTerm(
    _NS("Person"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Person`)
    .addCommentNoLanguage(`A person.`),

  /**
   * A personal profile RDF document.
   */
  PersonalProfileDocument: new LitVocabTerm(
    _NS("PersonalProfileDocument"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`PersonalProfileDocument`)
    .addCommentNoLanguage(`A personal profile RDF document.`),

  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates an account held by this agent.
   */
  account: new LitVocabTerm(
    _NS("account"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`account`)
    .addCommentNoLanguage(`Indicates an account held by this agent.`),

  /**
   * Indicates the name (identifier) associated with this online account.
   */
  accountName: new LitVocabTerm(
    _NS("accountName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`account name`)
    .addCommentNoLanguage(`Indicates the name (identifier) associated with this online account.`),

  /**
   * Indicates a homepage of the service provide for this online account.
   */
  accountServiceHomepage: new LitVocabTerm(
    _NS("accountServiceHomepage"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`account service homepage`)
    .addCommentNoLanguage(`Indicates a homepage of the service provide for this online account.`),

  /**
   * The age in years of some agent.
   */
  age: new LitVocabTerm(
    _NS("age"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`age`)
    .addCommentNoLanguage(`The age in years of some agent.`),

  /**
   * An AIM chat ID
   */
  aimChatID: new LitVocabTerm(
    _NS("aimChatID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`AIM chat ID`)
    .addCommentNoLanguage(`An AIM chat ID`),

  /**
   * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
   */
  nick: new LitVocabTerm(
    _NS("nick"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`nickname`)
    .addCommentNoLanguage(`A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).`),

  /**
   * A location that something is based near, for some broadly human notion of near.
   */
  based_near: new LitVocabTerm(
    _NS("based_near"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`based near`)
    .addCommentNoLanguage(`A location that something is based near, for some broadly human notion of near.`),

  /**
   * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
   */
  birthday: new LitVocabTerm(
    _NS("birthday"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`birthday`)
    .addCommentNoLanguage(`The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.`),

  /**
   * A current project this person works on.
   */
  currentProject: new LitVocabTerm(
    _NS("currentProject"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`current project`)
    .addCommentNoLanguage(`A current project this person works on.`),

  /**
   * A depiction of some thing.
   */
  depiction: new LitVocabTerm(
    _NS("depiction"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`depiction`)
    .addCommentNoLanguage(`A depiction of some thing.`),

  /**
   * A thing depicted in this representation.
   */
  depicts: new LitVocabTerm(
    _NS("depicts"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`depicts`)
    .addCommentNoLanguage(`A thing depicted in this representation.`),

  /**
   * A checksum for the DNA of some thing. Joke.
   */
  dnaChecksum: new LitVocabTerm(
    _NS("dnaChecksum"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`DNA checksum`)
    .addCommentNoLanguage(`A checksum for the DNA of some thing. Joke.`),

  /**
   * The family name of some person.
   */
  familyName: new LitVocabTerm(
    _NS("familyName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`familyName`)
    .addCommentNoLanguage(`The family name of some person.`),

  /**
   * The family name of some person.
   */
  family_name: new LitVocabTerm(
    _NS("family_name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`family_name`)
    .addCommentNoLanguage(`The family name of some person.`),

  /**
   * The first name of a person.
   */
  firstName: new LitVocabTerm(
    _NS("firstName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`firstName`)
    .addCommentNoLanguage(`The first name of a person.`),

  /**
   * The underlying or 'focal' entity associated with some SKOS-described concept.
   */
  focus: new LitVocabTerm(
    _NS("focus"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`focus`)
    .addCommentNoLanguage(`The underlying or 'focal' entity associated with some SKOS-described concept.`),

  /**
   * An organization funding a project or person.
   */
  fundedBy: new LitVocabTerm(
    _NS("fundedBy"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`funded by`)
    .addCommentNoLanguage(`An organization funding a project or person.`),

  /**
   * A textual geekcode for this person, see http://www.geekcode.com/geek.html
   */
  geekcode: new LitVocabTerm(
    _NS("geekcode"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`geekcode`)
    .addCommentNoLanguage(`A textual geekcode for this person, see http://www.geekcode.com/geek.html`),

  /**
   * The gender of this Agent (typically but not necessarily 'male' or 'female').
   */
  gender: new LitVocabTerm(
    _NS("gender"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`gender`)
    .addCommentNoLanguage(`The gender of this Agent (typically but not necessarily 'male' or 'female').`),

  /**
   * The given name of some person.
   */
  givenName: new LitVocabTerm(
    _NS("givenName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Given name`)
    .addCommentNoLanguage(`The given name of some person.`),

  /**
   * The given name of some person.
   */
  givenname: new LitVocabTerm(
    _NS("givenname"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Given name`)
    .addCommentNoLanguage(`The given name of some person.`),

  /**
   * Indicates an account held by this agent.
   */
  holdsAccount: new LitVocabTerm(
    _NS("holdsAccount"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`account`)
    .addCommentNoLanguage(`Indicates an account held by this agent.`),

  /**
   * A homepage for some thing.
   */
  homepage: new LitVocabTerm(
    _NS("homepage"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`homepage`)
    .addCommentNoLanguage(`A homepage for some thing.`),

  /**
   * A page or document about this thing.
   */
  page: new LitVocabTerm(
    _NS("page"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`page`)
    .addCommentNoLanguage(`A page or document about this thing.`),

  /**
   * A document that this thing is the primary topic of.
   */
  isPrimaryTopicOf: new LitVocabTerm(
    _NS("isPrimaryTopicOf"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`is primary topic of`)
    .addCommentNoLanguage(`A document that this thing is the primary topic of.`),

  /**
   * An ICQ chat ID
   */
  icqChatID: new LitVocabTerm(
    _NS("icqChatID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`ICQ chat ID`)
    .addCommentNoLanguage(`An ICQ chat ID`),

  /**
   * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
   */
  img: new LitVocabTerm(
    _NS("img"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`image`)
    .addCommentNoLanguage(`An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).`),

  /**
   * A page about a topic of interest to this person.
   */
  interest: new LitVocabTerm(
    _NS("interest"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`interest`)
    .addCommentNoLanguage(`A page about a topic of interest to this person.`),

  /**
   * The primary topic of some page or document.
   */
  primaryTopic: new LitVocabTerm(
    _NS("primaryTopic"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`primary topic`)
    .addCommentNoLanguage(`The primary topic of some page or document.`),

  /**
   * A jabber ID for something.
   */
  jabberID: new LitVocabTerm(
    _NS("jabberID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`jabber ID`)
    .addCommentNoLanguage(`A jabber ID for something.`),

  /**
   * A person known by this person (indicating some level of reciprocated interaction between the parties).
   */
  knows: new LitVocabTerm(
    _NS("knows"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`knows`)
    .addCommentNoLanguage(`A person known by this person (indicating some level of reciprocated interaction between the parties).`),

  /**
   * The last name of a person.
   */
  lastName: new LitVocabTerm(
    _NS("lastName"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`lastName`)
    .addCommentNoLanguage(`The last name of a person.`),

  /**
   * A logo representing some thing.
   */
  logo: new LitVocabTerm(
    _NS("logo"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`logo`)
    .addCommentNoLanguage(`A logo representing some thing.`),

  /**
   * Something that was made by this agent.
   */
  made: new LitVocabTerm(
    _NS("made"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`made`)
    .addCommentNoLanguage(`Something that was made by this agent.`),

  /**
   * An agent that made this thing.
   */
  maker: new LitVocabTerm(
    _NS("maker"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`maker`)
    .addCommentNoLanguage(`An agent that made this thing.`),

  /**
   * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
   */
  mbox: new LitVocabTerm(
    _NS("mbox"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`personal mailbox`)
    .addCommentNoLanguage(`A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.`),

  /**
   * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
   */
  mbox_sha1sum: new LitVocabTerm(
    _NS("mbox_sha1sum"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`sha1sum of a personal mailbox URI name`)
    .addCommentNoLanguage(`The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.`),

  /**
   * Indicates a member of a Group
   */
  member: new LitVocabTerm(
    _NS("member"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`member`)
    .addCommentNoLanguage(`Indicates a member of a Group`),

  /**
   * Indicates the class of individuals that are a member of a Group
   */
  membershipClass: new LitVocabTerm(
    _NS("membershipClass"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`membershipClass`)
    .addCommentNoLanguage(`Indicates the class of individuals that are a member of a Group`),

  /**
   * An MSN chat ID
   */
  msnChatID: new LitVocabTerm(
    _NS("msnChatID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`MSN chat ID`)
    .addCommentNoLanguage(`An MSN chat ID`),

  /**
   * A Myers Briggs (MBTI) personality classification.
   */
  myersBriggs: new LitVocabTerm(
    _NS("myersBriggs"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`myersBriggs`)
    .addCommentNoLanguage(`A Myers Briggs (MBTI) personality classification.`),

  /**
   * A name for some thing.
   */
  name: new LitVocabTerm(
    _NS("name"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`name`)
    .addCommentNoLanguage(`A name for some thing.`),

  /**
   * An OpenID for an Agent.
   */
  openid: new LitVocabTerm(
    _NS("openid"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`openid`)
    .addCommentNoLanguage(`An OpenID for an Agent.`),

  /**
   * A topic of some page or document.
   */
  topic: new LitVocabTerm(
    _NS("topic"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`topic`)
    .addCommentNoLanguage(`A topic of some page or document.`),

  /**
   * A project this person has previously worked on.
   */
  pastProject: new LitVocabTerm(
    _NS("pastProject"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`past project`)
    .addCommentNoLanguage(`A project this person has previously worked on.`),

  /**
   * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
   */
  phone: new LitVocabTerm(
    _NS("phone"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`phone`)
    .addCommentNoLanguage(`A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).`),

  /**
   * A .plan comment, in the tradition of finger and '.plan' files.
   */
  plan: new LitVocabTerm(
    _NS("plan"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`plan`)
    .addCommentNoLanguage(`A .plan comment, in the tradition of finger and '.plan' files.`),

  /**
   * A link to the publications of this person.
   */
  publications: new LitVocabTerm(
    _NS("publications"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`publications`)
    .addCommentNoLanguage(`A link to the publications of this person.`),

  /**
   * A homepage of a school attended by the person.
   */
  schoolHomepage: new LitVocabTerm(
    _NS("schoolHomepage"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`schoolHomepage`)
    .addCommentNoLanguage(`A homepage of a school attended by the person.`),

  /**
   * A sha1sum hash, in hex.
   */
  sha1: new LitVocabTerm(
    _NS("sha1"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`sha1sum (hex)`)
    .addCommentNoLanguage(`A sha1sum hash, in hex.`),

  /**
   * A Skype ID
   */
  skypeID: new LitVocabTerm(
    _NS("skypeID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Skype ID`)
    .addCommentNoLanguage(`A Skype ID`),

  /**
   * A string expressing what the user is happy for the general public (normally) to know about their current activity.
   */
  status: new LitVocabTerm(
    _NS("status"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`status`)
    .addCommentNoLanguage(`A string expressing what the user is happy for the general public (normally) to know about their current activity.`),

  /**
   * The surname of some person.
   */
  surname: new LitVocabTerm(
    _NS("surname"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Surname`)
    .addCommentNoLanguage(`The surname of some person.`),

  /**
   * A theme.
   */
  theme: new LitVocabTerm(
    _NS("theme"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`theme`)
    .addCommentNoLanguage(`A theme.`),

  /**
   * A derived thumbnail image.
   */
  thumbnail: new LitVocabTerm(
    _NS("thumbnail"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`thumbnail`)
    .addCommentNoLanguage(`A derived thumbnail image.`),

  /**
   * A tipjar document for this agent, describing means for payment and reward.
   */
  tipjar: new LitVocabTerm(
    _NS("tipjar"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`tipjar`)
    .addCommentNoLanguage(`A tipjar document for this agent, describing means for payment and reward.`),

  /**
   * Title (Mr, Mrs, Ms, Dr. etc)
   */
  title: new LitVocabTerm(
    _NS("title"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`title`)
    .addCommentNoLanguage(`Title (Mr, Mrs, Ms, Dr. etc)`),

  /**
   * A thing of interest to this person.
   */
  topic_interest: new LitVocabTerm(
    _NS("topic_interest"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`topic_interest`)
    .addCommentNoLanguage(`A thing of interest to this person.`),

  /**
   * A weblog of some thing (whether person, group, company etc.).
   */
  weblog: new LitVocabTerm(
    _NS("weblog"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`weblog`)
    .addCommentNoLanguage(`A weblog of some thing (whether person, group, company etc.).`),

  /**
   * A work info homepage of some person; a page about their work for some organization.
   */
  workInfoHomepage: new LitVocabTerm(
    _NS("workInfoHomepage"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`work info homepage`)
    .addCommentNoLanguage(`A work info homepage of some person; a page about their work for some organization.`),

  /**
   * A workplace homepage of some person; the homepage of an organization they work for.
   */
  workplaceHomepage: new LitVocabTerm(
    _NS("workplaceHomepage"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`workplace homepage`)
    .addCommentNoLanguage(`A workplace homepage of some person; the homepage of an organization they work for.`),

  /**
   * A Yahoo chat ID
   */
  yahooChatID: new LitVocabTerm(
    _NS("yahooChatID"),
    dataFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Yahoo chat ID`)
    .addCommentNoLanguage(`A Yahoo chat ID`),

};

export { FOAF };
