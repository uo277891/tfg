import { LitVocabTerm } from "@inrupt/lit-vocab-term";
import { NamedNode } from "rdf-js";
/**
  Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.15]
  as part of artifact: [vocab-common], version: [0.3.11]
  at 'Saturday, May 30, 2020 1:18 AM'.

  Vocabulary built from vocab list file: [/home/pmcb55/Work/Projects/LIT/lit-vocab/vocab/lit-rdf-vocab/Common/Vocab-List-LIT-Common.yml].
 */
declare function _NS(localName: string): NamedNode;
declare const QB: {
    PREFIX: string;
    NAMESPACE: string;
    PREFIX_AND_NAMESPACE: {
        qb: string;
    };
    NS: typeof _NS;
    /**
     * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.
     */
    DataSet: LitVocabTerm;
    /**
     * Abstract superclass for everything that can have attributes and dimensions
     */
    Attachable: LitVocabTerm;
    /**
     * A single observation in the cube, may have one or more associated measured values
     */
    Observation: LitVocabTerm;
    /**
     * A, possibly arbitrary, group of observations.
     */
    ObservationGroup: LitVocabTerm;
    /**
     * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice
     */
    Slice: LitVocabTerm;
    /**
     * Abstract super-property of all properties representing dimensions, attributes or measures
     */
    ComponentProperty: LitVocabTerm;
    /**
     * The class of components which represent the dimensions of the cube
     */
    DimensionProperty: LitVocabTerm;
    /**
     * Superclass of all coded ComponentProperties
     */
    CodedProperty: LitVocabTerm;
    /**
     * The class of components which represent the measured value of the phenomenon being observed
     */
    MeasureProperty: LitVocabTerm;
    /**
     * The class of components which represent attributes of observations in the cube, e.g. unit of measurement
     */
    AttributeProperty: LitVocabTerm;
    /**
     * Defines the structure of a DataSet or slice
     */
    DataStructureDefinition: LitVocabTerm;
    /**
     * Abstract class of things which reference one or more ComponentProperties
     */
    ComponentSet: LitVocabTerm;
    /**
     * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.
     */
    ComponentSpecification: LitVocabTerm;
    /**
     * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices
     */
    SliceKey: LitVocabTerm;
    /**
     * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.
     */
    HierarchicalCodeList: LitVocabTerm;
    /**
     * indicates the data set of which this observation is a part
     */
    dataSet: LitVocabTerm;
    /**
     * indicates a observation contained within this slice of the data set
     */
    observation: LitVocabTerm;
    /**
     * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet
     */
    observationGroup: LitVocabTerm;
    /**
     * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values
     */
    slice: LitVocabTerm;
    /**
     * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)
     */
    measureType: LitVocabTerm;
    /**
     * indicates the structure to which this data set conforms
     */
    structure: LitVocabTerm;
    /**
     * indicates a component specification which is included in the structure of the dataset
     */
    component: LitVocabTerm;
    /**
     * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey
     */
    componentProperty: LitVocabTerm;
    /**
     * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last
     */
    order: LitVocabTerm;
    /**
     * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
      to components correspond to an attribute. Defaults to false (optional).
     */
    componentRequired: LitVocabTerm;
    /**
     * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.
     */
    componentAttachment: LitVocabTerm;
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a dimension
     */
    dimension: LitVocabTerm;
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure
     */
    measure: LitVocabTerm;
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a attribute
     */
    attribute: LitVocabTerm;
    /**
     * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension
     */
    measureDimension: LitVocabTerm;
    /**
     * indicates the sub-key corresponding to this slice
     */
    sliceStructure: LitVocabTerm;
    /**
     * indicates a slice key which is used for slices in this dataset
     */
    sliceKey: LitVocabTerm;
    /**
     * gives the concept which is being measured or indicated by a ComponentProperty
     */
    concept: LitVocabTerm;
    /**
     * gives the code list associated with a CodedProperty
     */
    codeList: LitVocabTerm;
    /**
     * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.
     */
    hierarchyRoot: LitVocabTerm;
    /**
     * Specifies a property which relates a parent concept in the hierarchy to a child concept.
     */
    parentChildProperty: LitVocabTerm;
};
export { QB };
